Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.group_by_rolling", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.cumsum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_last", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.group_by_rolling.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.cumsum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_last.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst"], "titles": ["Index", "Extending the API", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.group_by_rolling", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.apply", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.set_ordering", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_batches", "polars.Expr.map_dict", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_apply", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_match", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.find", "polars.Expr.str.head", "polars.Expr.str.json_decode", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.apply", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.cumsum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.lit", "polars.map", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.group_by_rolling", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.apply", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.set_ordering", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_first_distinct", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_last", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_apply", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_match", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.find", "polars.Series.str.head", "polars.Series.str.json_decode", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Plot", "String", "Struct", "Temporal", "SQL Interface", "Testing"], "terms": {"python": [0, 38, 39, 81, 109, 120, 121, 126, 128, 142, 143, 145, 161, 210, 216, 242, 243, 263, 294, 308, 323, 393, 398, 402, 466, 549, 551, 553, 659, 735, 752, 753, 755, 756, 798, 799, 801, 811, 817, 837, 912, 924, 936, 1010, 1014, 1026, 1027, 1028, 1034, 1166, 1240, 1299, 1319], "api": [0, 109, 140, 161, 216, 294, 308, 553, 774, 811, 912, 1166, 1319], "refer": [0, 37, 118, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 169, 308, 311, 393, 433, 436, 551, 601, 657, 674, 675, 691, 693, 694, 698, 811, 837, 924, 1049, 1052, 1186, 1255, 1256, 1272, 1274, 1275, 1279, 1319, 1323], "datafram": [0, 1, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60, 61, 62, 79, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 137, 138, 139, 143, 144, 147, 148, 159, 306, 307, 311, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 371, 372, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 410, 412, 413, 414, 416, 417, 419, 421, 422, 423, 424, 426, 427, 428, 429, 431, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 671, 672, 674, 675, 676, 677, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 692, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 751, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 807, 811, 823, 832, 833, 836, 838, 842, 843, 847, 850, 858, 859, 860, 861, 863, 864, 868, 869, 873, 876, 886, 888, 894, 895, 896, 901, 904, 905, 906, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 924, 929, 1004, 1005, 1045, 1070, 1088, 1166, 1184, 1245, 1263, 1264, 1288, 1296, 1297, 1307, 1319, 1327, 1328], "lazyfram": [0, 1, 47, 48, 50, 52, 54, 55, 56, 57, 58, 60, 61, 62, 134, 135, 136, 137, 138, 139, 140, 143, 144, 150, 214, 230, 231, 255, 308, 462, 541, 811, 823, 923, 929, 1327, 1328], "seri": [0, 1, 12, 26, 53, 55, 56, 57, 58, 62, 63, 72, 83, 91, 92, 108, 110, 113, 115, 143, 145, 146, 150, 173, 182, 185, 188, 190, 193, 198, 201, 202, 203, 205, 207, 209, 217, 218, 219, 220, 224, 225, 236, 237, 238, 240, 244, 257, 258, 262, 265, 268, 269, 270, 287, 308, 322, 323, 334, 357, 361, 369, 370, 372, 429, 459, 462, 465, 469, 470, 478, 482, 485, 486, 489, 491, 492, 493, 505, 512, 514, 539, 541, 547, 549, 551, 553, 601, 602, 603, 604, 605, 606, 610, 611, 612, 623, 634, 637, 661, 691, 692, 693, 694, 698, 702, 709, 710, 714, 719, 728, 730, 734, 743, 744, 747, 748, 752, 753, 755, 756, 761, 763, 767, 768, 771, 772, 773, 774, 784, 786, 787, 790, 793, 798, 799, 802, 811, 823, 846, 850, 877, 905, 924, 928, 1311, 1313, 1315, 1318, 1320, 1323, 1324, 1325, 1326, 1328], "express": [0, 9, 43, 44, 45, 46, 60, 61, 147, 150, 154, 164, 178, 180, 182, 192, 195, 216, 227, 231, 241, 246, 247, 250, 254, 270, 271, 281, 282, 284, 286, 294, 308, 316, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 333, 334, 338, 339, 340, 341, 342, 345, 356, 361, 362, 363, 364, 365, 367, 373, 376, 377, 378, 379, 390, 391, 392, 393, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 410, 412, 413, 414, 416, 417, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 453, 456, 458, 459, 461, 462, 466, 468, 469, 471, 472, 473, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 495, 498, 499, 503, 504, 506, 507, 508, 511, 512, 518, 520, 540, 541, 547, 548, 550, 551, 552, 553, 557, 558, 559, 560, 561, 562, 564, 565, 567, 569, 571, 573, 574, 576, 578, 580, 581, 584, 585, 587, 589, 590, 594, 595, 596, 597, 598, 600, 604, 605, 606, 608, 609, 632, 633, 634, 636, 638, 640, 641, 643, 645, 648, 649, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 674, 675, 680, 681, 682, 683, 692, 696, 705, 706, 709, 711, 712, 715, 716, 717, 719, 720, 722, 723, 724, 725, 727, 728, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 743, 744, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 767, 768, 769, 770, 771, 772, 773, 774, 776, 778, 781, 783, 784, 786, 787, 788, 789, 790, 791, 793, 795, 797, 798, 799, 801, 802, 807, 810, 823, 827, 832, 833, 841, 842, 843, 846, 849, 852, 873, 879, 880, 883, 884, 885, 887, 893, 899, 900, 901, 903, 904, 912, 924, 928, 929, 953, 988, 1003, 1010, 1013, 1014, 1031, 1070, 1076, 1092, 1124, 1125, 1128, 1166, 1190, 1210, 1216, 1217, 1230, 1232, 1233, 1238, 1239, 1240, 1241, 1242, 1243, 1245, 1255, 1256, 1273, 1277, 1319], "selector": [0, 37, 165, 172, 174, 178, 222, 229, 231, 264, 270, 273, 275, 308, 456, 462, 811, 823, 829, 838, 839, 842, 868, 894, 924], "function": [0, 37, 38, 53, 54, 55, 56, 57, 58, 61, 70, 72, 91, 92, 109, 113, 115, 118, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 139, 140, 143, 144, 145, 146, 148, 157, 159, 161, 162, 169, 177, 185, 216, 222, 230, 231, 235, 255, 266, 267, 272, 275, 276, 288, 294, 308, 319, 323, 357, 390, 391, 393, 430, 452, 454, 455, 476, 541, 549, 550, 551, 553, 564, 574, 575, 590, 594, 598, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 642, 713, 724, 728, 729, 740, 742, 743, 744, 747, 748, 749, 750, 760, 761, 763, 765, 766, 769, 772, 773, 774, 777, 779, 782, 783, 784, 786, 788, 789, 792, 796, 800, 802, 807, 811, 823, 833, 837, 843, 863, 864, 868, 872, 875, 881, 888, 896, 903, 906, 912, 924, 928, 936, 969, 983, 1003, 1004, 1046, 1068, 1069, 1071, 1072, 1088, 1158, 1166, 1184, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1209, 1212, 1219, 1224, 1299, 1301, 1319, 1328], "data": [0, 1, 2, 11, 19, 20, 22, 29, 32, 34, 35, 36, 37, 38, 39, 42, 43, 44, 45, 46, 47, 53, 54, 55, 57, 60, 61, 62, 67, 68, 69, 71, 80, 81, 83, 84, 92, 97, 98, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 161, 167, 178, 179, 191, 192, 193, 194, 195, 196, 197, 210, 211, 212, 214, 216, 229, 230, 234, 240, 241, 242, 243, 252, 261, 266, 267, 270, 272, 281, 285, 306, 308, 319, 320, 321, 325, 326, 327, 328, 329, 330, 333, 336, 337, 338, 339, 340, 342, 345, 347, 348, 349, 354, 355, 356, 358, 359, 361, 362, 363, 364, 365, 368, 369, 373, 376, 377, 378, 379, 391, 392, 393, 398, 399, 400, 401, 404, 405, 406, 408, 410, 412, 413, 414, 416, 417, 419, 421, 422, 423, 424, 426, 427, 428, 430, 431, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 453, 458, 469, 471, 472, 473, 476, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 498, 499, 503, 504, 506, 512, 518, 520, 528, 540, 542, 548, 553, 584, 585, 589, 590, 598, 600, 601, 604, 605, 606, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 632, 640, 641, 642, 648, 651, 652, 653, 654, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 680, 681, 682, 683, 691, 692, 693, 694, 696, 698, 701, 711, 712, 713, 716, 717, 720, 723, 728, 730, 740, 751, 752, 753, 754, 755, 756, 757, 767, 768, 770, 771, 772, 773, 774, 784, 787, 797, 798, 799, 802, 807, 811, 823, 830, 831, 832, 833, 837, 842, 843, 849, 850, 851, 852, 853, 854, 872, 877, 899, 924, 933, 934, 946, 948, 949, 950, 951, 952, 954, 956, 957, 968, 970, 972, 973, 974, 978, 979, 981, 987, 988, 991, 1004, 1005, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1020, 1022, 1024, 1025, 1029, 1031, 1032, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1070, 1074, 1075, 1088, 1094, 1096, 1097, 1098, 1100, 1101, 1103, 1104, 1105, 1106, 1107, 1108, 1112, 1118, 1119, 1120, 1121, 1123, 1129, 1135, 1137, 1145, 1157, 1159, 1166, 1178, 1184, 1186, 1190, 1191, 1193, 1194, 1206, 1208, 1219, 1224, 1229, 1230, 1232, 1233, 1234, 1235, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1245, 1246, 1247, 1261, 1262, 1263, 1264, 1272, 1273, 1274, 1275, 1277, 1279, 1282, 1299, 1300, 1301, 1302, 1304, 1309, 1318, 1319, 1327], "type": [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 36, 37, 43, 44, 45, 46, 47, 55, 56, 57, 58, 60, 61, 63, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 108, 110, 111, 112, 113, 114, 116, 120, 121, 122, 124, 125, 129, 130, 131, 132, 134, 135, 136, 138, 139, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 162, 178, 185, 191, 193, 194, 196, 197, 198, 211, 212, 216, 240, 261, 266, 269, 270, 273, 284, 308, 319, 321, 325, 326, 327, 328, 329, 330, 333, 338, 339, 340, 342, 345, 356, 357, 361, 362, 363, 364, 365, 368, 369, 370, 373, 376, 377, 378, 379, 391, 392, 398, 399, 401, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 453, 456, 458, 469, 472, 474, 480, 481, 482, 483, 484, 485, 486, 487, 488, 499, 503, 504, 506, 512, 518, 520, 540, 541, 551, 553, 598, 600, 604, 605, 606, 608, 609, 610, 640, 641, 648, 651, 652, 653, 654, 656, 657, 658, 659, 661, 664, 665, 666, 680, 681, 682, 683, 691, 692, 696, 711, 712, 713, 720, 728, 730, 740, 751, 752, 753, 754, 755, 756, 757, 759, 767, 768, 770, 771, 772, 773, 774, 784, 787, 797, 798, 799, 802, 807, 811, 823, 832, 833, 841, 842, 843, 850, 851, 853, 854, 858, 873, 877, 885, 894, 903, 924, 933, 934, 946, 948, 949, 950, 951, 952, 954, 956, 957, 968, 969, 970, 972, 973, 974, 978, 979, 981, 988, 1004, 1005, 1010, 1011, 1013, 1015, 1016, 1017, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1070, 1074, 1086, 1094, 1096, 1097, 1098, 1100, 1101, 1103, 1104, 1105, 1106, 1107, 1108, 1112, 1118, 1119, 1120, 1121, 1123, 1129, 1135, 1137, 1157, 1158, 1178, 1184, 1190, 1191, 1193, 1194, 1219, 1229, 1230, 1232, 1233, 1234, 1235, 1237, 1238, 1239, 1240, 1242, 1245, 1246, 1247, 1261, 1262, 1263, 1264, 1272, 1273, 1277, 1299, 1300, 1302, 1310, 1319, 1327], "input": [0, 54, 60, 111, 113, 120, 121, 164, 172, 192, 195, 216, 220, 229, 235, 246, 247, 250, 254, 258, 271, 281, 282, 286, 308, 316, 367, 373, 453, 456, 468, 480, 545, 551, 552, 553, 562, 590, 605, 645, 661, 680, 687, 688, 689, 690, 692, 715, 723, 725, 727, 728, 730, 733, 736, 737, 738, 746, 750, 757, 759, 767, 768, 771, 772, 773, 774, 776, 778, 781, 790, 793, 795, 801, 811, 823, 827, 838, 849, 852, 875, 879, 880, 881, 883, 887, 893, 899, 900, 904, 924, 928, 988, 1070, 1092, 1162, 1163, 1166, 1190, 1216, 1242, 1261, 1273, 1319], "output": [0, 9, 31, 34, 37, 38, 39, 40, 41, 43, 162, 171, 193, 194, 196, 197, 210, 216, 220, 223, 229, 231, 240, 242, 246, 258, 277, 281, 308, 319, 321, 323, 345, 391, 453, 518, 541, 549, 550, 551, 553, 561, 564, 574, 598, 610, 617, 621, 624, 628, 648, 666, 720, 724, 725, 726, 727, 728, 738, 739, 752, 753, 772, 773, 774, 811, 823, 836, 841, 850, 851, 853, 854, 863, 864, 868, 869, 877, 879, 881, 899, 906, 912, 924, 933, 934, 936, 957, 1004, 1070, 1135, 1166, 1184, 1229, 1247, 1307, 1319], "config": [0, 54, 171, 246, 281, 308, 650, 676, 753, 756, 757, 823, 832, 836, 879, 899, 924, 1231, 1257], "extend": [0, 111, 279, 308, 459, 811, 823, 928, 935, 1076, 1319], "plugin": [0, 811, 823], "sql": [0, 35, 47, 51, 122, 123, 212, 250, 308, 352, 533, 635, 770, 791, 811, 823, 883, 924, 964, 1150, 1216, 1319], "interfac": [0, 823], "except": [0, 143, 199, 213, 215, 259, 308, 661, 692, 759, 823, 859, 924, 929, 1087, 1117, 1242, 1273, 1290, 1300, 1309, 1319], "test": [0, 2, 35, 122, 123, 125, 131, 308, 823, 855, 862, 924], "metadata": [0, 136, 193, 194, 196, 197, 240, 308, 823, 850, 851, 853, 854, 877, 924], "These": [1, 37, 117, 122, 123, 159, 272, 308, 444, 810, 811, 928, 1046, 1060], "allow": [1, 9, 36, 37, 43, 44, 45, 46, 53, 92, 97, 109, 122, 125, 134, 137, 138, 139, 140, 147, 150, 154, 161, 210, 213, 214, 241, 242, 244, 266, 267, 270, 273, 285, 308, 426, 433, 436, 528, 551, 553, 603, 632, 691, 693, 694, 811, 858, 859, 863, 864, 868, 894, 901, 924, 928, 929, 1042, 1049, 1052, 1067, 1145, 1166, 1188, 1208, 1211, 1272, 1274, 1275, 1300, 1301, 1319, 1328], "you": [1, 11, 15, 37, 42, 46, 52, 54, 61, 62, 108, 110, 111, 112, 113, 114, 120, 121, 122, 123, 125, 126, 129, 130, 132, 134, 138, 140, 159, 179, 193, 194, 196, 197, 209, 210, 216, 227, 231, 240, 241, 242, 243, 263, 272, 294, 308, 311, 398, 422, 423, 426, 429, 430, 433, 436, 444, 456, 462, 480, 511, 541, 551, 553, 603, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 650, 665, 674, 675, 676, 735, 743, 752, 757, 761, 774, 784, 787, 802, 811, 833, 839, 850, 851, 853, 854, 855, 862, 877, 885, 888, 912, 924, 928, 929, 1010, 1038, 1039, 1045, 1046, 1049, 1052, 1060, 1075, 1092, 1128, 1166, 1188, 1231, 1246, 1255, 1256, 1257, 1275, 1309, 1319, 1323, 1328], "regist": [1, 47, 49, 50, 51, 52, 55, 56, 57, 58, 153, 155, 255, 308, 811, 888, 924, 928, 1327], "custom": [1, 28, 36, 37, 55, 56, 57, 58, 153, 155, 162, 171, 216, 288, 294, 308, 323, 357, 398, 433, 436, 541, 549, 551, 553, 611, 612, 728, 735, 772, 773, 774, 811, 836, 863, 864, 906, 912, 924, 936, 969, 1010, 1049, 1052, 1158, 1166, 1195, 1196, 1319, 1328], "dedic": [1, 109, 210, 242, 308], "namespac": [1, 122, 307, 308, 810, 823, 923, 1319, 1328], "underli": [1, 53, 68, 69, 71, 84, 92, 95, 101, 108, 110, 111, 112, 114, 122, 123, 125, 129, 130, 132, 138, 147, 150, 154, 178, 179, 210, 211, 242, 261, 266, 308, 362, 400, 401, 402, 406, 410, 412, 413, 414, 416, 417, 419, 421, 424, 427, 428, 429, 431, 445, 446, 447, 448, 603, 630, 649, 653, 660, 811, 842, 924, 929, 973, 982, 1012, 1013, 1014, 1018, 1022, 1024, 1025, 1029, 1031, 1032, 1035, 1037, 1040, 1043, 1044, 1045, 1047, 1061, 1062, 1063, 1064, 1075, 1188, 1206, 1219, 1230, 1234, 1241, 1295, 1300, 1319], "polar": [1, 308, 311, 810, 811, 817, 823, 924, 928, 929, 1319, 1323, 1327], "class": [1, 18, 53, 55, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 100, 147, 148, 243, 308, 798, 807, 811, 817, 823, 924, 1299, 1300, 1319, 1327], "without": [1, 38, 43, 44, 45, 46, 59, 60, 61, 70, 72, 115, 124, 127, 132, 133, 135, 136, 139, 140, 255, 266, 275, 276, 308, 323, 390, 391, 430, 476, 553, 598, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 650, 676, 740, 788, 789, 790, 811, 832, 833, 888, 896, 924, 980, 983, 1003, 1004, 1046, 1088, 1184, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1231, 1257, 1299, 1300, 1319], "requir": [1, 36, 37, 54, 113, 122, 123, 143, 144, 145, 146, 164, 169, 241, 267, 270, 271, 308, 358, 452, 454, 455, 542, 553, 590, 637, 691, 693, 694, 717, 787, 811, 827, 887, 893, 924, 970, 1069, 1071, 1072, 1159, 1218, 1272, 1274, 1275, 1300, 1301, 1304, 1319, 1323], "subclass": [1, 308], "mixin": 1, "expr": [1, 54, 55, 56, 57, 58, 178, 180, 181, 212, 213, 227, 231, 241, 246, 247, 270, 281, 282, 308, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 806, 807, 811, 812, 813, 816, 817, 818, 819, 820, 842, 844, 845, 858, 859, 874, 879, 880, 884, 899, 900, 924, 928, 1003, 1010, 1013, 1014, 1031, 1042, 1060, 1070, 1077, 1078, 1082, 1124, 1128, 1134, 1151, 1155, 1217, 1230, 1236, 1241, 1265, 1291, 1319], "ar": [1, 11, 12, 18, 21, 31, 34, 36, 37, 43, 44, 45, 46, 52, 53, 54, 61, 62, 91, 92, 99, 107, 108, 109, 110, 111, 112, 113, 114, 115, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 146, 148, 150, 151, 152, 154, 159, 161, 164, 169, 171, 174, 177, 180, 184, 185, 191, 192, 193, 194, 195, 196, 197, 210, 212, 213, 214, 216, 222, 223, 229, 231, 240, 241, 242, 243, 246, 247, 248, 250, 254, 255, 262, 266, 267, 270, 271, 276, 277, 281, 282, 285, 286, 308, 319, 321, 336, 352, 357, 366, 367, 373, 381, 383, 384, 398, 430, 444, 449, 451, 452, 453, 454, 455, 460, 480, 482, 485, 486, 489, 491, 492, 493, 496, 501, 533, 541, 551, 552, 585, 590, 598, 601, 604, 605, 606, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 635, 639, 642, 644, 645, 659, 661, 662, 664, 671, 672, 673, 674, 675, 680, 692, 696, 701, 707, 714, 715, 724, 725, 727, 733, 736, 737, 738, 739, 742, 746, 750, 752, 753, 755, 756, 776, 778, 781, 790, 793, 795, 798, 799, 801, 803, 804, 806, 810, 811, 812, 813, 816, 817, 818, 819, 820, 823, 827, 832, 833, 836, 839, 843, 844, 849, 850, 851, 852, 853, 854, 855, 858, 859, 862, 864, 868, 869, 873, 875, 877, 879, 880, 882, 883, 887, 888, 893, 896, 899, 900, 901, 904, 924, 928, 929, 933, 934, 948, 964, 969, 980, 988, 997, 998, 1010, 1046, 1060, 1066, 1068, 1069, 1070, 1071, 1072, 1077, 1080, 1085, 1092, 1096, 1100, 1101, 1105, 1106, 1107, 1108, 1115, 1118, 1150, 1158, 1184, 1186, 1190, 1191, 1202, 1216, 1221, 1224, 1240, 1242, 1243, 1252, 1253, 1254, 1255, 1256, 1261, 1273, 1275, 1277, 1282, 1289, 1300, 1301, 1309, 1311, 1313, 1315, 1319, 1320, 1324, 1325, 1326, 1328], "all": [1, 5, 9, 14, 18, 21, 26, 31, 34, 36, 37, 43, 49, 54, 60, 67, 100, 108, 113, 120, 121, 124, 125, 126, 128, 131, 132, 134, 137, 138, 147, 148, 151, 154, 159, 163, 165, 171, 174, 181, 199, 205, 207, 209, 210, 211, 212, 214, 215, 220, 222, 226, 227, 231, 234, 241, 242, 243, 247, 253, 255, 258, 259, 264, 266, 270, 273, 275, 276, 277, 282, 284, 308, 320, 322, 345, 360, 367, 379, 390, 396, 397, 398, 399, 456, 461, 467, 474, 477, 479, 482, 486, 492, 493, 495, 499, 510, 511, 518, 537, 541, 550, 551, 570, 573, 574, 576, 577, 578, 579, 580, 581, 588, 596, 601, 605, 607, 612, 637, 643, 645, 651, 652, 658, 659, 661, 664, 669, 675, 679, 685, 686, 687, 688, 692, 706, 715, 725, 735, 743, 744, 745, 746, 749, 750, 752, 759, 761, 766, 767, 770, 778, 786, 793, 794, 795, 801, 811, 817, 823, 826, 829, 832, 833, 836, 839, 841, 843, 845, 858, 863, 864, 868, 873, 880, 885, 886, 888, 894, 896, 900, 901, 903, 924, 929, 957, 1003, 1005, 1008, 1009, 1010, 1011, 1087, 1094, 1112, 1117, 1127, 1128, 1135, 1154, 1158, 1186, 1190, 1196, 1225, 1232, 1233, 1239, 1240, 1242, 1245, 1250, 1256, 1260, 1266, 1267, 1268, 1269, 1273, 1290, 1319, 1327, 1328], "support": [1, 36, 37, 42, 62, 108, 109, 110, 111, 112, 113, 114, 115, 122, 123, 124, 125, 129, 130, 131, 132, 135, 136, 139, 147, 151, 154, 159, 210, 211, 212, 213, 217, 219, 224, 242, 243, 253, 254, 257, 263, 267, 270, 308, 453, 534, 590, 605, 643, 645, 661, 674, 675, 676, 680, 692, 807, 811, 817, 858, 859, 886, 887, 924, 929, 1070, 1151, 1190, 1225, 1242, 1255, 1256, 1257, 1261, 1273, 1301, 1319, 1327], "target": [1, 35, 36, 37, 59, 125, 270, 308, 657, 691, 693, 694, 929, 1238, 1272, 1274, 1275], "thi": [1, 2, 5, 11, 13, 15, 31, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 52, 53, 54, 60, 61, 62, 68, 69, 70, 71, 72, 84, 92, 108, 110, 111, 112, 113, 114, 115, 117, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 159, 161, 162, 163, 164, 167, 169, 171, 174, 175, 177, 179, 183, 184, 185, 186, 191, 192, 193, 194, 195, 196, 197, 198, 202, 203, 205, 207, 208, 209, 210, 212, 213, 214, 216, 217, 219, 221, 222, 223, 224, 226, 227, 229, 232, 233, 234, 237, 238, 240, 241, 242, 243, 244, 246, 247, 250, 251, 253, 255, 256, 257, 260, 261, 263, 266, 267, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 288, 289, 294, 307, 308, 319, 322, 323, 324, 333, 345, 351, 352, 353, 358, 366, 367, 369, 370, 373, 385, 386, 387, 388, 389, 390, 391, 393, 399, 400, 413, 422, 423, 426, 429, 430, 433, 436, 444, 447, 451, 453, 458, 468, 474, 476, 478, 479, 480, 483, 485, 487, 490, 495, 507, 511, 512, 518, 521, 528, 529, 530, 531, 532, 533, 535, 539, 541, 542, 546, 547, 549, 550, 551, 552, 553, 557, 558, 559, 560, 561, 562, 564, 567, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 585, 590, 596, 598, 601, 602, 603, 604, 605, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 634, 635, 636, 637, 638, 643, 644, 645, 648, 650, 651, 657, 662, 663, 667, 668, 669, 670, 671, 672, 673, 676, 678, 679, 685, 686, 687, 688, 689, 690, 695, 701, 703, 706, 709, 710, 714, 715, 717, 718, 719, 720, 724, 728, 729, 737, 740, 742, 743, 747, 748, 749, 750, 760, 761, 763, 765, 766, 769, 770, 772, 774, 777, 779, 782, 783, 784, 788, 789, 790, 792, 796, 800, 801, 802, 807, 811, 823, 826, 827, 828, 831, 832, 833, 836, 837, 839, 841, 843, 849, 850, 851, 852, 853, 854, 856, 858, 859, 863, 864, 868, 869, 873, 875, 877, 879, 880, 881, 883, 884, 885, 886, 887, 888, 892, 893, 894, 896, 899, 900, 901, 902, 903, 906, 907, 912, 923, 924, 928, 929, 935, 936, 945, 957, 963, 964, 965, 970, 977, 979, 981, 982, 983, 988, 991, 999, 1000, 1001, 1002, 1003, 1004, 1011, 1012, 1014, 1025, 1038, 1039, 1042, 1045, 1046, 1049, 1052, 1060, 1063, 1065, 1068, 1070, 1074, 1075, 1083, 1084, 1086, 1088, 1093, 1097, 1099, 1100, 1102, 1103, 1109, 1111, 1113, 1114, 1124, 1128, 1129, 1135, 1138, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1156, 1159, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1173, 1174, 1175, 1176, 1179, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1208, 1209, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1225, 1226, 1228, 1229, 1231, 1232, 1238, 1243, 1244, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1257, 1259, 1260, 1266, 1267, 1268, 1269, 1275, 1276, 1282, 1283, 1285, 1288, 1289, 1291, 1292, 1295, 1297, 1299, 1300, 1301, 1303, 1304, 1306, 1307, 1308, 1309, 1319, 1323, 1327, 1328], "featur": [1, 42, 59, 70, 72, 270, 308], "i": [1, 2, 13, 15, 18, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 52, 53, 54, 59, 60, 61, 62, 68, 69, 70, 71, 72, 84, 92, 94, 96, 97, 99, 104, 106, 108, 109, 110, 111, 112, 113, 114, 117, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 154, 156, 158, 159, 163, 164, 167, 171, 174, 176, 177, 179, 182, 186, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 206, 208, 210, 211, 212, 213, 214, 215, 216, 219, 222, 223, 227, 229, 230, 231, 238, 240, 241, 242, 243, 244, 247, 250, 253, 254, 255, 256, 257, 259, 261, 266, 267, 270, 271, 272, 273, 275, 276, 277, 278, 282, 284, 285, 294, 307, 308, 316, 319, 321, 322, 323, 324, 334, 337, 344, 345, 352, 357, 390, 391, 393, 396, 397, 398, 399, 402, 412, 426, 430, 433, 444, 452, 453, 454, 455, 458, 462, 466, 474, 476, 478, 480, 496, 502, 510, 511, 514, 516, 518, 528, 533, 534, 536, 539, 541, 543, 546, 551, 553, 557, 560, 561, 562, 564, 572, 590, 598, 601, 603, 604, 605, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 635, 638, 639, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 669, 671, 672, 673, 674, 675, 676, 679, 680, 683, 685, 686, 687, 688, 691, 692, 693, 694, 696, 698, 701, 720, 721, 724, 725, 726, 727, 729, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 747, 748, 752, 753, 755, 756, 761, 765, 766, 767, 768, 770, 771, 774, 777, 779, 782, 784, 787, 788, 789, 790, 792, 796, 798, 799, 800, 801, 802, 807, 811, 826, 827, 828, 831, 832, 833, 836, 837, 839, 841, 843, 846, 849, 850, 851, 852, 853, 854, 857, 858, 859, 861, 863, 864, 868, 869, 873, 877, 880, 881, 883, 885, 886, 887, 888, 889, 893, 894, 896, 897, 900, 903, 906, 912, 924, 928, 929, 933, 934, 935, 936, 949, 956, 957, 964, 969, 980, 983, 988, 991, 1003, 1004, 1005, 1008, 1009, 1010, 1011, 1014, 1024, 1042, 1046, 1049, 1060, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1079, 1085, 1086, 1087, 1088, 1092, 1093, 1095, 1102, 1109, 1110, 1111, 1113, 1114, 1115, 1117, 1119, 1127, 1128, 1131, 1133, 1135, 1145, 1150, 1151, 1156, 1158, 1166, 1184, 1186, 1188, 1190, 1191, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1208, 1209, 1210, 1211, 1212, 1214, 1216, 1220, 1221, 1224, 1225, 1228, 1229, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1250, 1252, 1253, 1254, 1255, 1256, 1257, 1260, 1261, 1264, 1266, 1267, 1268, 1269, 1272, 1273, 1274, 1275, 1277, 1279, 1282, 1290, 1295, 1300, 1301, 1307, 1308, 1309, 1319, 1327, 1328], "primarili": 1, "intend": [1, 125, 143, 144, 145, 146, 701, 981, 1282], "us": [1, 8, 10, 12, 13, 15, 21, 26, 28, 33, 34, 35, 36, 37, 42, 43, 46, 47, 48, 49, 50, 52, 53, 54, 59, 60, 61, 62, 69, 83, 91, 92, 109, 111, 112, 114, 116, 119, 120, 121, 122, 123, 124, 125, 126, 128, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 156, 162, 163, 165, 171, 172, 174, 180, 181, 182, 185, 192, 193, 194, 195, 196, 197, 205, 207, 209, 210, 211, 213, 216, 217, 219, 222, 224, 226, 227, 229, 230, 231, 236, 240, 241, 242, 243, 244, 246, 247, 251, 254, 255, 256, 257, 263, 264, 265, 266, 267, 270, 272, 273, 275, 276, 277, 278, 281, 282, 283, 284, 286, 294, 308, 311, 317, 319, 321, 323, 324, 333, 334, 357, 362, 363, 366, 367, 370, 374, 375, 390, 393, 396, 397, 405, 407, 411, 415, 418, 420, 425, 429, 430, 432, 433, 436, 444, 447, 449, 452, 453, 454, 455, 456, 460, 461, 462, 466, 476, 479, 480, 496, 511, 528, 536, 541, 543, 551, 552, 553, 556, 573, 576, 578, 580, 581, 590, 598, 601, 603, 606, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 632, 634, 636, 637, 642, 644, 645, 647, 649, 650, 653, 654, 655, 657, 658, 660, 665, 666, 674, 675, 676, 680, 682, 684, 687, 688, 689, 690, 691, 693, 694, 698, 701, 714, 715, 721, 722, 724, 725, 726, 727, 729, 733, 738, 739, 740, 741, 742, 743, 745, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 761, 763, 767, 768, 770, 771, 774, 775, 776, 778, 780, 781, 784, 787, 788, 789, 790, 792, 793, 794, 795, 798, 799, 800, 801, 802, 807, 810, 811, 822, 823, 826, 827, 828, 829, 832, 833, 836, 837, 838, 839, 843, 844, 845, 846, 849, 850, 851, 853, 854, 855, 859, 861, 862, 868, 877, 879, 880, 884, 887, 888, 889, 893, 894, 896, 897, 899, 900, 902, 903, 904, 912, 924, 929, 933, 934, 936, 965, 969, 973, 974, 981, 983, 989, 990, 1003, 1004, 1005, 1008, 1009, 1017, 1019, 1023, 1030, 1033, 1036, 1041, 1045, 1046, 1048, 1049, 1052, 1060, 1063, 1066, 1069, 1070, 1071, 1072, 1077, 1078, 1082, 1085, 1088, 1091, 1092, 1093, 1099, 1102, 1109, 1111, 1113, 1115, 1128, 1145, 1152, 1158, 1165, 1166, 1184, 1186, 1188, 1191, 1193, 1194, 1196, 1208, 1209, 1212, 1214, 1217, 1218, 1224, 1226, 1228, 1230, 1231, 1234, 1235, 1238, 1239, 1241, 1246, 1247, 1255, 1256, 1257, 1261, 1263, 1272, 1274, 1275, 1279, 1282, 1291, 1296, 1298, 1299, 1300, 1301, 1308, 1309, 1319, 1323, 1327, 1328], "librari": [1, 101, 122, 125, 551, 811, 928, 1328], "author": 1, "domain": [1, 658, 1239], "specif": [1, 31, 36, 37, 108, 110, 112, 114, 120, 123, 124, 125, 129, 130, 131, 135, 165, 210, 212, 308, 433, 436, 691, 693, 694, 698, 829, 858, 924, 929, 1049, 1052, 1272, 1274, 1275, 1279, 1319, 1328], "capabl": [1, 37, 308], "which": [1, 7, 11, 21, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 53, 54, 55, 56, 57, 58, 111, 113, 120, 121, 122, 123, 124, 125, 131, 132, 134, 135, 136, 139, 143, 144, 150, 153, 155, 164, 165, 171, 174, 179, 180, 192, 193, 194, 195, 196, 197, 203, 213, 240, 266, 271, 273, 277, 308, 319, 357, 398, 426, 430, 433, 444, 453, 459, 480, 482, 486, 489, 491, 492, 493, 541, 551, 553, 562, 564, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 673, 696, 735, 752, 753, 755, 756, 757, 798, 799, 801, 811, 827, 829, 836, 839, 841, 850, 851, 853, 854, 859, 877, 881, 893, 894, 924, 969, 1010, 1042, 1046, 1049, 1060, 1070, 1075, 1076, 1092, 1096, 1101, 1105, 1106, 1107, 1108, 1158, 1212, 1254, 1277, 1300, 1319, 1327, 1328], "mai": [1, 36, 38, 43, 44, 45, 46, 60, 61, 62, 70, 72, 108, 110, 111, 112, 114, 120, 121, 122, 124, 126, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 143, 145, 171, 177, 179, 193, 213, 216, 240, 251, 255, 267, 275, 276, 277, 308, 323, 390, 391, 398, 399, 400, 413, 426, 430, 433, 436, 444, 456, 476, 514, 539, 541, 551, 553, 561, 598, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 636, 662, 663, 665, 735, 743, 744, 747, 748, 752, 753, 755, 756, 761, 786, 788, 789, 798, 799, 811, 832, 833, 836, 843, 850, 859, 863, 864, 877, 884, 888, 896, 902, 903, 906, 912, 924, 982, 983, 1003, 1004, 1005, 1010, 1011, 1012, 1025, 1042, 1046, 1049, 1052, 1060, 1068, 1075, 1088, 1131, 1166, 1184, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1217, 1243, 1244, 1246, 1275, 1300, 1301, 1319, 1328], "exist": [1, 35, 36, 37, 54, 124, 135, 150, 272, 276, 281, 282, 308, 318, 361, 364, 365, 402, 429, 552, 811, 875, 896, 899, 900, 924, 929, 1014, 1045, 1165, 1319], "belong": [1, 193, 308, 850, 924], "core": [1, 308, 1328], "cannot": [1, 98, 120, 121, 125, 126, 128, 131, 132, 156, 216, 243, 244, 284, 294, 308, 362, 456, 528, 553, 632, 653, 682, 704, 774, 811, 885, 903, 912, 924, 973, 1145, 1166, 1208, 1234, 1263, 1300, 1319], "overrid": [1, 37, 108, 110, 111, 112, 113, 114, 120, 122, 123, 125, 129, 130, 131, 147, 148, 154, 156, 308, 552, 811, 924, 1165, 1319], "str": [1, 3, 4, 6, 7, 10, 11, 13, 16, 17, 18, 21, 22, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 69, 72, 108, 109, 110, 111, 112, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 147, 148, 150, 153, 154, 155, 159, 164, 165, 168, 171, 172, 173, 174, 175, 177, 178, 182, 183, 184, 185, 188, 189, 191, 192, 193, 194, 196, 197, 199, 201, 205, 207, 208, 210, 212, 213, 217, 219, 221, 222, 223, 224, 226, 227, 229, 231, 233, 235, 236, 238, 239, 240, 241, 242, 244, 245, 248, 251, 253, 254, 255, 256, 257, 259, 262, 263, 264, 265, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 308, 316, 317, 318, 340, 345, 357, 361, 362, 363, 364, 365, 367, 369, 380, 391, 393, 395, 403, 426, 429, 430, 433, 436, 444, 453, 456, 458, 462, 464, 468, 469, 472, 478, 480, 505, 506, 516, 517, 518, 534, 538, 541, 550, 553, 561, 563, 564, 565, 567, 574, 575, 576, 577, 578, 579, 580, 581, 587, 590, 594, 596, 598, 604, 605, 607, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 637, 644, 645, 702, 703, 704, 706, 715, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 738, 740, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 807, 811, 818, 827, 829, 832, 833, 834, 836, 837, 838, 839, 841, 842, 843, 846, 849, 850, 851, 853, 854, 856, 858, 859, 868, 869, 873, 875, 876, 877, 878, 881, 882, 884, 885, 886, 887, 888, 893, 894, 895, 896, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 924, 928, 929, 932, 952, 957, 969, 974, 978, 979, 1004, 1005, 1015, 1042, 1045, 1046, 1049, 1052, 1060, 1070, 1074, 1078, 1122, 1123, 1124, 1135, 1158, 1175, 1176, 1184, 1189, 1190, 1212, 1213, 1283, 1285, 1286, 1296, 1297, 1298, 1307, 1319, 1324, 1327, 1328], "dt": [1, 54, 125, 131, 240, 277, 308, 610, 757, 811, 820, 877, 924, 929, 1326], "attempt": [1, 393, 811, 837, 924], "do": [1, 37, 43, 44, 45, 46, 54, 60, 61, 110, 111, 114, 120, 134, 143, 144, 145, 146, 171, 179, 193, 194, 196, 197, 209, 213, 231, 240, 261, 272, 275, 308, 390, 398, 511, 551, 610, 686, 687, 688, 784, 787, 802, 811, 828, 832, 833, 836, 841, 850, 851, 853, 854, 859, 863, 864, 873, 877, 885, 924, 929, 1003, 1010, 1075, 1128, 1267, 1268, 1269, 1309, 1319], "so": [1, 122, 123, 134, 156, 191, 193, 194, 196, 197, 231, 240, 308, 334, 344, 393, 466, 480, 516, 541, 553, 610, 674, 675, 676, 686, 687, 688, 811, 837, 850, 851, 853, 854, 877, 924, 956, 1133, 1255, 1256, 1257, 1267, 1268, 1269], "rais": [1, 16, 17, 21, 36, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 120, 121, 125, 131, 134, 143, 145, 161, 231, 241, 270, 308, 344, 362, 398, 429, 430, 444, 514, 516, 539, 561, 598, 649, 653, 660, 673, 691, 693, 694, 696, 698, 754, 771, 811, 956, 973, 1010, 1045, 1046, 1060, 1131, 1133, 1156, 1184, 1230, 1234, 1241, 1254, 1272, 1274, 1275, 1277, 1279, 1300, 1309, 1319], "an": [1, 31, 34, 35, 36, 37, 43, 44, 45, 55, 57, 58, 70, 71, 92, 95, 97, 98, 101, 103, 108, 110, 111, 114, 120, 121, 122, 123, 124, 125, 127, 131, 132, 134, 136, 137, 148, 150, 154, 165, 166, 167, 177, 180, 185, 193, 194, 196, 197, 209, 210, 211, 213, 216, 227, 231, 237, 238, 240, 241, 255, 261, 270, 272, 275, 276, 281, 284, 294, 308, 318, 341, 344, 356, 362, 368, 374, 375, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 398, 402, 403, 426, 429, 433, 447, 453, 461, 462, 468, 469, 472, 495, 507, 508, 511, 514, 516, 539, 540, 541, 550, 551, 553, 562, 564, 573, 574, 597, 598, 606, 610, 611, 613, 615, 617, 619, 621, 624, 626, 628, 649, 653, 658, 660, 662, 691, 693, 694, 696, 698, 709, 716, 724, 730, 734, 752, 753, 755, 756, 758, 760, 763, 767, 768, 769, 770, 771, 783, 784, 786, 787, 790, 793, 798, 799, 801, 802, 807, 811, 829, 830, 831, 833, 836, 841, 843, 846, 850, 851, 853, 854, 859, 864, 873, 877, 885, 888, 896, 899, 901, 903, 912, 924, 928, 929, 953, 956, 968, 973, 978, 987, 989, 990, 991, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1010, 1014, 1049, 1063, 1068, 1070, 1102, 1114, 1124, 1125, 1128, 1131, 1133, 1156, 1157, 1166, 1195, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1209, 1212, 1230, 1234, 1239, 1241, 1243, 1272, 1274, 1275, 1277, 1279, 1300, 1309, 1319, 1327], "attributeerror": 1, "howev": [1, 111, 122, 177, 216, 266, 308, 1068, 1319], "can": [1, 15, 28, 37, 42, 52, 53, 54, 60, 61, 68, 69, 71, 83, 91, 92, 111, 120, 121, 122, 125, 126, 131, 132, 134, 137, 139, 140, 148, 149, 150, 154, 156, 159, 164, 166, 174, 175, 185, 192, 193, 194, 195, 196, 197, 205, 207, 209, 216, 227, 231, 240, 242, 243, 246, 254, 266, 270, 271, 272, 275, 281, 284, 294, 308, 311, 319, 323, 357, 367, 381, 384, 390, 393, 398, 422, 423, 426, 429, 430, 433, 436, 444, 453, 459, 462, 480, 495, 511, 541, 551, 553, 561, 564, 570, 573, 574, 576, 578, 580, 581, 590, 596, 598, 603, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 634, 637, 639, 642, 645, 650, 659, 664, 674, 675, 676, 686, 687, 688, 691, 706, 715, 733, 735, 751, 754, 761, 763, 767, 768, 774, 801, 807, 810, 811, 822, 827, 828, 832, 833, 837, 839, 841, 843, 850, 851, 853, 854, 877, 879, 881, 885, 887, 888, 893, 899, 902, 903, 924, 929, 936, 969, 1003, 1004, 1010, 1038, 1039, 1042, 1045, 1046, 1049, 1052, 1060, 1070, 1076, 1092, 1128, 1158, 1166, 1171, 1184, 1188, 1190, 1209, 1212, 1214, 1218, 1221, 1224, 1231, 1232, 1233, 1240, 1245, 1255, 1256, 1257, 1267, 1268, 1269, 1272, 1275, 1299, 1300, 1319, 1323, 1327], "other": [1, 21, 33, 37, 38, 42, 52, 61, 119, 120, 121, 122, 125, 134, 143, 144, 145, 146, 174, 176, 179, 182, 186, 212, 213, 222, 223, 241, 243, 246, 247, 270, 276, 279, 281, 282, 306, 308, 316, 320, 322, 333, 334, 373, 395, 450, 451, 462, 466, 471, 473, 480, 485, 498, 505, 529, 530, 531, 532, 548, 557, 560, 569, 571, 584, 585, 589, 605, 645, 705, 713, 716, 723, 725, 727, 733, 736, 737, 738, 746, 750, 752, 757, 776, 778, 781, 790, 793, 795, 811, 823, 833, 839, 846, 858, 859, 868, 869, 879, 880, 896, 899, 900, 901, 924, 929, 935, 988, 1007, 1067, 1075, 1100, 1122, 1146, 1147, 1148, 1149, 1190, 1211, 1302, 1310, 1318, 1319], "onli": [1, 11, 14, 21, 31, 34, 35, 37, 43, 47, 49, 53, 54, 59, 62, 92, 120, 121, 122, 124, 125, 126, 128, 132, 134, 135, 137, 138, 139, 140, 143, 144, 145, 146, 150, 154, 159, 162, 174, 179, 193, 196, 198, 210, 213, 216, 217, 219, 224, 231, 240, 242, 243, 257, 263, 265, 266, 276, 277, 294, 308, 317, 319, 321, 323, 334, 372, 373, 393, 398, 426, 434, 456, 465, 474, 495, 551, 553, 573, 574, 575, 576, 577, 578, 579, 580, 581, 590, 596, 603, 613, 615, 617, 619, 621, 624, 626, 628, 650, 676, 706, 718, 735, 752, 753, 774, 811, 832, 837, 839, 850, 851, 853, 854, 855, 859, 862, 877, 896, 912, 924, 928, 933, 934, 935, 985, 988, 1004, 1010, 1042, 1075, 1081, 1086, 1102, 1166, 1184, 1188, 1231, 1257, 1295, 1298, 1319, 1327, 1328], "gener": [1, 59, 122, 123, 141, 147, 148, 149, 150, 151, 152, 154, 161, 169, 231, 244, 264, 266, 272, 308, 528, 632, 638, 730, 752, 755, 767, 768, 770, 787, 798, 799, 811, 924, 1145, 1208, 1220, 1296, 1319, 1328], "userwarn": 1, "pl": [1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 79, 83, 91, 92, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 134, 135, 136, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 154, 156, 159, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 193, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 308, 311, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 416, 417, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 671, 672, 674, 675, 676, 677, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 807, 811, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 883, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 924, 929, 931, 932, 933, 934, 935, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 991, 992, 993, 994, 995, 996, 997, 998, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089, 1091, 1092, 1093, 1094, 1095, 1096, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1214, 1215, 1216, 1218, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1245, 1246, 1247, 1252, 1253, 1255, 1256, 1257, 1258, 1261, 1263, 1264, 1265, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1285, 1286, 1288, 1289, 1290, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1310, 1319, 1323, 1327, 1328], "register_expr_namespac": [1, 55, 57, 58], "greet": 1, "def": [1, 53, 55, 56, 57, 58, 122, 148, 150, 154, 159, 230, 272, 308, 316, 594, 658, 688, 723, 773, 811, 833, 872, 924, 929, 1239, 1328], "__init__": [1, 53, 55, 56, 57, 58, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 147, 1327], "self": [1, 48, 49, 50, 52, 55, 56, 57, 58, 60, 61, 166, 167, 179, 199, 201, 202, 203, 215, 217, 219, 221, 222, 224, 228, 229, 231, 233, 234, 236, 237, 238, 244, 252, 253, 255, 256, 257, 259, 264, 272, 274, 277, 278, 279, 283, 284, 285, 308, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 360, 366, 367, 368, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 568, 569, 570, 571, 572, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 807, 811, 826, 827, 828, 829, 831, 832, 833, 835, 837, 838, 839, 841, 842, 843, 844, 845, 846, 847, 848, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 879, 880, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 924, 935, 936, 978, 991, 1075, 1079, 1089, 1164, 1165, 1166, 1177, 1181, 1182, 1187, 1190, 1209, 1212, 1214, 1226, 1306, 1310, 1319], "_expr": [1, 56], "hello": [1, 21, 48, 51, 686, 687, 688, 1135, 1267, 1268, 1269], "return": [1, 6, 7, 31, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 99, 102, 107, 108, 110, 111, 112, 113, 114, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 138, 156, 157, 162, 164, 166, 169, 170, 173, 175, 177, 178, 179, 180, 181, 184, 185, 187, 188, 191, 192, 193, 195, 196, 199, 201, 208, 209, 210, 211, 212, 214, 215, 216, 218, 220, 225, 226, 227, 229, 230, 231, 235, 240, 241, 242, 243, 244, 255, 258, 259, 260, 266, 267, 270, 271, 272, 273, 277, 281, 282, 289, 291, 293, 294, 297, 302, 308, 319, 321, 325, 326, 327, 328, 329, 330, 333, 334, 338, 339, 340, 342, 344, 345, 356, 361, 362, 363, 364, 365, 366, 367, 376, 377, 378, 379, 380, 391, 392, 398, 399, 401, 404, 405, 406, 408, 410, 412, 413, 414, 416, 417, 419, 421, 422, 423, 424, 426, 427, 428, 430, 431, 434, 435, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 453, 458, 466, 469, 470, 472, 475, 476, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 499, 500, 503, 504, 506, 512, 514, 516, 517, 518, 520, 521, 528, 538, 539, 540, 547, 551, 552, 553, 562, 564, 565, 570, 594, 598, 600, 604, 605, 606, 608, 609, 632, 633, 639, 640, 641, 648, 649, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 664, 665, 666, 667, 668, 670, 671, 672, 677, 678, 680, 681, 682, 683, 692, 696, 701, 708, 710, 711, 712, 714, 715, 716, 718, 719, 720, 723, 724, 728, 730, 731, 732, 733, 734, 735, 740, 742, 751, 752, 753, 754, 755, 756, 757, 760, 763, 765, 767, 768, 769, 770, 771, 772, 773, 774, 783, 784, 787, 790, 793, 796, 797, 798, 799, 801, 802, 811, 827, 830, 832, 833, 835, 836, 840, 841, 843, 848, 850, 851, 853, 854, 855, 858, 861, 862, 864, 872, 873, 875, 877, 881, 885, 891, 892, 893, 894, 899, 900, 907, 909, 911, 915, 920, 924, 928, 933, 934, 935, 943, 944, 946, 947, 948, 949, 950, 951, 952, 954, 956, 957, 968, 970, 972, 973, 974, 977, 980, 983, 987, 1004, 1005, 1010, 1011, 1013, 1016, 1017, 1018, 1020, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1064, 1067, 1068, 1070, 1074, 1075, 1083, 1085, 1087, 1088, 1094, 1096, 1097, 1098, 1100, 1101, 1103, 1104, 1105, 1106, 1107, 1108, 1112, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1123, 1129, 1131, 1133, 1134, 1135, 1137, 1138, 1145, 1155, 1156, 1157, 1164, 1165, 1166, 1171, 1178, 1184, 1190, 1191, 1192, 1193, 1194, 1208, 1210, 1211, 1221, 1229, 1230, 1232, 1233, 1234, 1235, 1237, 1238, 1239, 1240, 1241, 1242, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1258, 1259, 1261, 1262, 1263, 1264, 1273, 1277, 1282, 1290, 1292, 1295, 1301, 1303, 1305, 1306, 1307, 1310, 1319, 1327, 1328], "lit": [1, 318, 361, 480, 495, 573, 660, 743, 747, 761, 784, 787, 802, 811, 1078, 1319], "alia": [1, 13, 54, 56, 58, 90, 193, 215, 231, 236, 240, 255, 274, 281, 284, 308, 316, 320, 361, 362, 363, 364, 365, 366, 380, 381, 382, 383, 384, 391, 394, 399, 400, 402, 403, 404, 405, 406, 408, 409, 410, 413, 414, 417, 419, 421, 424, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 441, 443, 444, 445, 446, 447, 450, 451, 464, 466, 471, 473, 478, 480, 484, 488, 495, 498, 500, 524, 536, 543, 548, 553, 557, 558, 559, 560, 562, 566, 569, 571, 573, 584, 585, 589, 591, 595, 598, 601, 603, 631, 633, 649, 650, 652, 653, 655, 657, 658, 660, 661, 665, 666, 676, 677, 680, 681, 682, 683, 684, 689, 690, 692, 702, 703, 704, 705, 713, 714, 716, 722, 723, 730, 731, 732, 736, 737, 738, 752, 755, 757, 758, 761, 762, 767, 770, 773, 774, 786, 793, 798, 801, 811, 850, 856, 862, 877, 888, 895, 899, 903, 924, 1004, 1011, 1012, 1015, 1018, 1020, 1021, 1022, 1028, 1029, 1032, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1049, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1117, 1184, 1189, 1238, 1239, 1263, 1264, 1319], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 21, 48, 51, 650, 676, 686, 687, 688, 699, 1135, 1231, 1257, 1267, 1268, 1269, 1280], "select": [1, 9, 35, 47, 48, 49, 54, 55, 56, 57, 118, 120, 121, 122, 123, 124, 126, 128, 132, 134, 140, 149, 163, 208, 209, 213, 216, 227, 230, 241, 247, 253, 255, 268, 274, 277, 284, 308, 315, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 342, 347, 348, 349, 354, 355, 356, 357, 358, 359, 360, 361, 364, 365, 366, 367, 369, 371, 372, 376, 377, 378, 379, 390, 392, 394, 395, 396, 397, 400, 402, 403, 413, 422, 423, 426, 429, 437, 438, 439, 440, 441, 442, 443, 444, 447, 449, 452, 454, 455, 456, 457, 458, 459, 463, 465, 467, 470, 474, 476, 477, 478, 479, 481, 482, 486, 494, 495, 496, 497, 499, 511, 512, 541, 544, 545, 546, 547, 551, 553, 554, 555, 556, 568, 570, 572, 573, 575, 577, 579, 582, 583, 587, 588, 589, 590, 592, 593, 597, 599, 600, 601, 602, 603, 604, 606, 607, 608, 612, 623, 630, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 656, 657, 658, 659, 660, 691, 702, 704, 707, 711, 712, 714, 715, 717, 718, 719, 720, 721, 724, 726, 729, 731, 732, 733, 734, 737, 739, 740, 741, 742, 745, 756, 757, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 775, 777, 779, 780, 782, 783, 786, 787, 791, 792, 793, 794, 796, 800, 807, 811, 826, 834, 859, 872, 880, 881, 886, 888, 895, 901, 903, 924, 929, 1045, 1082, 1128, 1209, 1212, 1225, 1245, 1272, 1291, 1319, 1327], "shape": [1, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 62, 63, 79, 83, 91, 92, 105, 108, 109, 110, 111, 112, 113, 114, 115, 120, 129, 130, 134, 140, 147, 150, 154, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 178, 179, 180, 181, 182, 185, 187, 188, 190, 192, 193, 198, 199, 201, 203, 204, 205, 207, 208, 209, 212, 213, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 235, 236, 238, 239, 240, 244, 246, 250, 253, 254, 255, 256, 257, 258, 259, 262, 264, 265, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 308, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 416, 417, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 568, 569, 570, 571, 572, 573, 574, 576, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 671, 672, 674, 675, 676, 677, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 807, 811, 826, 827, 829, 830, 832, 833, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 855, 857, 858, 859, 860, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 879, 881, 883, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 899, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 924, 929, 931, 932, 935, 937, 938, 939, 940, 941, 942, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 982, 984, 985, 987, 988, 991, 992, 993, 994, 995, 996, 997, 998, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1024, 1025, 1028, 1029, 1031, 1032, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089, 1091, 1092, 1094, 1096, 1098, 1100, 1101, 1104, 1105, 1106, 1107, 1108, 1112, 1114, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1166, 1171, 1177, 1178, 1180, 1181, 1182, 1184, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1216, 1218, 1220, 1221, 1222, 1223, 1225, 1226, 1227, 1229, 1230, 1231, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1245, 1246, 1247, 1252, 1253, 1255, 1256, 1257, 1258, 1261, 1263, 1264, 1265, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1285, 1288, 1290, 1293, 1294, 1296, 1297, 1298, 1302, 1303, 1304, 1305, 1306, 1307, 1310, 1319, 1327], "3": [1, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 32, 34, 36, 37, 38, 39, 40, 41, 42, 47, 49, 50, 52, 54, 55, 56, 57, 58, 62, 63, 79, 92, 108, 109, 110, 111, 112, 113, 114, 115, 120, 123, 125, 129, 130, 131, 134, 140, 142, 143, 144, 145, 146, 149, 150, 151, 152, 154, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 185, 187, 188, 189, 190, 191, 192, 193, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 308, 311, 316, 317, 318, 319, 321, 333, 334, 335, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 379, 380, 381, 382, 383, 384, 390, 391, 394, 395, 396, 397, 398, 400, 402, 403, 404, 405, 409, 410, 412, 413, 414, 416, 417, 419, 421, 424, 426, 428, 429, 430, 431, 433, 434, 435, 436, 437, 444, 445, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 494, 495, 496, 498, 499, 500, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 540, 541, 544, 545, 546, 547, 548, 550, 551, 553, 569, 570, 571, 572, 573, 574, 576, 578, 580, 581, 584, 587, 588, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 642, 644, 645, 646, 649, 650, 651, 653, 654, 655, 657, 658, 659, 660, 661, 662, 665, 666, 669, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 692, 693, 698, 702, 703, 704, 705, 706, 708, 714, 715, 718, 719, 720, 722, 723, 729, 730, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 807, 811, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 855, 856, 857, 858, 859, 860, 861, 862, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 883, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 924, 929, 931, 932, 935, 937, 939, 940, 941, 943, 944, 945, 946, 947, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 982, 984, 985, 986, 991, 992, 993, 994, 995, 996, 997, 998, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1012, 1014, 1015, 1018, 1021, 1022, 1024, 1026, 1027, 1028, 1031, 1034, 1035, 1037, 1043, 1045, 1046, 1047, 1049, 1051, 1052, 1053, 1055, 1056, 1058, 1060, 1062, 1063, 1065, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089, 1091, 1092, 1094, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1115, 1116, 1117, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1196, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1214, 1215, 1216, 1218, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1231, 1232, 1234, 1235, 1236, 1238, 1239, 1240, 1242, 1243, 1246, 1247, 1250, 1255, 1256, 1257, 1258, 1260, 1261, 1265, 1266, 1273, 1274, 1279, 1283, 1285, 1286, 1288, 1289, 1290, 1293, 1294, 1295, 1296, 1299, 1300, 1301, 1303, 1304, 1305, 1306, 1307, 1308, 1310, 1319, 1327, 1328], "1": [1, 8, 9, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 62, 63, 79, 83, 108, 109, 110, 111, 112, 113, 114, 115, 120, 121, 124, 125, 126, 129, 130, 131, 134, 135, 136, 139, 140, 142, 143, 144, 145, 146, 147, 150, 154, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 193, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 308, 311, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 366, 367, 368, 369, 371, 372, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 410, 412, 413, 414, 416, 417, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 488, 489, 491, 492, 493, 494, 495, 496, 497, 499, 500, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 655, 656, 657, 658, 659, 660, 662, 664, 665, 666, 674, 675, 682, 683, 684, 686, 687, 688, 701, 702, 703, 704, 705, 706, 707, 708, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 729, 730, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 807, 811, 826, 827, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 855, 856, 857, 858, 859, 860, 862, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 924, 929, 931, 932, 935, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 950, 951, 952, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 977, 978, 982, 984, 985, 986, 988, 991, 992, 993, 995, 996, 997, 998, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089, 1091, 1092, 1094, 1096, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1120, 1121, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1212, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1238, 1240, 1241, 1243, 1245, 1246, 1247, 1255, 1256, 1263, 1264, 1282, 1283, 1285, 1286, 1288, 1289, 1290, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1310, 1319, 1323, 1327, 1328], "2": [1, 8, 9, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 36, 37, 38, 39, 40, 41, 42, 47, 49, 50, 52, 54, 55, 56, 57, 58, 62, 63, 79, 83, 108, 109, 110, 111, 112, 113, 114, 115, 120, 123, 129, 130, 134, 140, 141, 142, 143, 144, 145, 146, 147, 150, 152, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 193, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 308, 311, 315, 316, 317, 318, 320, 322, 324, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 366, 367, 368, 371, 372, 373, 378, 379, 380, 381, 382, 383, 384, 390, 391, 394, 395, 398, 399, 401, 402, 403, 404, 405, 406, 408, 412, 416, 421, 422, 423, 426, 427, 428, 429, 430, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 553, 565, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 642, 643, 644, 645, 646, 648, 650, 652, 653, 654, 655, 657, 659, 660, 661, 662, 664, 665, 666, 671, 672, 674, 675, 676, 677, 680, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 708, 711, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 777, 778, 779, 780, 782, 783, 786, 790, 791, 792, 793, 794, 796, 799, 800, 801, 807, 811, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 855, 856, 858, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 881, 883, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 924, 929, 931, 932, 935, 938, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 977, 982, 984, 985, 986, 987, 991, 992, 994, 996, 997, 998, 1003, 1004, 1005, 1006, 1007, 1010, 1011, 1014, 1016, 1017, 1020, 1022, 1026, 1027, 1028, 1031, 1034, 1035, 1037, 1038, 1039, 1044, 1045, 1046, 1050, 1060, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089, 1091, 1092, 1094, 1096, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1115, 1116, 1117, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1177, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1196, 1197, 1198, 1199, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1214, 1215, 1216, 1218, 1220, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1233, 1238, 1240, 1241, 1242, 1243, 1245, 1247, 1255, 1256, 1263, 1264, 1267, 1268, 1269, 1272, 1273, 1275, 1276, 1277, 1278, 1280, 1281, 1283, 1285, 1286, 1288, 1289, 1290, 1293, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1303, 1304, 1305, 1306, 1307, 1308, 1310, 1319, 1323, 1327, 1328], "column_0": [1, 216, 272, 308], "register_dataframe_namespac": [1, 56, 57, 58], "split": [1, 37, 55, 211, 308, 682, 683, 1263, 1264], "splitfram": [1, 55], "df": [1, 8, 9, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 47, 48, 55, 56, 79, 109, 110, 111, 112, 113, 114, 115, 121, 122, 123, 134, 147, 148, 150, 159, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 180, 181, 182, 185, 188, 189, 190, 191, 192, 193, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 253, 254, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 308, 311, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 366, 367, 368, 369, 371, 372, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 416, 417, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 615, 617, 619, 621, 623, 624, 626, 628, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 671, 672, 674, 675, 676, 677, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 692, 695, 696, 697, 699, 700, 701, 702, 704, 705, 706, 707, 708, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 751, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 807, 811, 850, 877, 881, 895, 896, 909, 912, 920, 924, 929, 1045, 1070, 1245, 1263, 1264, 1297, 1319, 1328], "_df": [1, 55], "by_alternate_row": 1, "list": [1, 14, 36, 37, 47, 51, 54, 55, 57, 60, 61, 63, 69, 83, 108, 110, 111, 112, 114, 115, 117, 118, 120, 121, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 148, 149, 150, 154, 168, 172, 175, 177, 178, 182, 190, 192, 193, 201, 210, 226, 229, 241, 242, 243, 246, 254, 262, 263, 270, 272, 273, 274, 275, 281, 286, 287, 308, 317, 345, 356, 357, 358, 391, 398, 458, 464, 469, 477, 485, 549, 551, 553, 562, 563, 590, 598, 604, 606, 611, 612, 613, 615, 617, 619, 621, 624, 626, 628, 644, 645, 658, 681, 702, 704, 709, 713, 733, 735, 737, 753, 756, 758, 766, 768, 771, 774, 791, 793, 799, 811, 834, 840, 842, 846, 849, 850, 879, 887, 894, 895, 899, 901, 904, 905, 924, 929, 957, 968, 969, 970, 986, 1004, 1010, 1068, 1074, 1079, 1082, 1084, 1088, 1089, 1100, 1166, 1184, 1191, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1231, 1239, 1257, 1262, 1291, 1299, 1302, 1319, 1328], "with_row_index": [1, 283, 308, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 811, 902, 924, 1209, 1319], "name": [1, 19, 23, 25, 32, 34, 35, 37, 40, 43, 48, 49, 50, 51, 52, 55, 56, 57, 58, 62, 83, 96, 108, 110, 111, 112, 113, 114, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 145, 146, 147, 148, 150, 153, 154, 155, 164, 165, 168, 172, 173, 174, 178, 182, 183, 184, 188, 189, 191, 192, 195, 208, 209, 210, 212, 213, 216, 218, 220, 222, 223, 225, 229, 231, 235, 241, 242, 243, 245, 246, 247, 254, 255, 258, 262, 264, 266, 269, 270, 271, 272, 273, 274, 275, 276, 281, 282, 283, 284, 285, 286, 293, 308, 318, 323, 357, 361, 362, 364, 365, 367, 391, 433, 436, 456, 462, 480, 489, 491, 492, 493, 495, 541, 550, 553, 561, 563, 566, 590, 596, 598, 607, 645, 658, 659, 674, 675, 702, 704, 706, 715, 724, 725, 726, 727, 729, 731, 732, 733, 736, 737, 738, 739, 740, 741, 742, 745, 746, 749, 750, 759, 760, 765, 766, 769, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 788, 789, 790, 792, 793, 794, 795, 796, 800, 801, 807, 811, 827, 829, 834, 838, 839, 842, 846, 849, 852, 858, 859, 868, 869, 875, 878, 879, 880, 881, 887, 888, 893, 894, 895, 896, 899, 900, 901, 902, 903, 904, 911, 924, 928, 929, 932, 969, 987, 1004, 1049, 1052, 1158, 1184, 1189, 1238, 1239, 1240, 1255, 1256, 1283, 1286, 1296, 1297, 1301, 1319, 1327, 1328], "n": [1, 13, 14, 18, 26, 34, 41, 43, 49, 50, 55, 56, 57, 58, 69, 71, 117, 120, 121, 125, 130, 134, 150, 162, 166, 179, 187, 193, 199, 210, 211, 215, 216, 242, 243, 244, 250, 251, 256, 259, 260, 263, 265, 278, 291, 293, 302, 308, 324, 352, 357, 366, 367, 390, 394, 398, 400, 402, 409, 435, 447, 459, 462, 470, 475, 500, 509, 515, 517, 528, 529, 533, 536, 538, 541, 543, 591, 594, 604, 624, 625, 628, 629, 632, 635, 636, 642, 647, 661, 665, 666, 674, 682, 683, 686, 687, 692, 694, 708, 710, 714, 715, 716, 721, 723, 739, 741, 752, 753, 754, 755, 756, 757, 763, 765, 783, 784, 787, 788, 789, 792, 796, 800, 802, 811, 830, 832, 848, 850, 855, 862, 883, 884, 889, 891, 892, 897, 909, 911, 920, 924, 929, 964, 969, 977, 987, 1003, 1006, 1010, 1012, 1014, 1021, 1051, 1063, 1075, 1076, 1083, 1087, 1117, 1126, 1132, 1134, 1145, 1146, 1150, 1155, 1158, 1180, 1203, 1205, 1208, 1216, 1217, 1224, 1228, 1242, 1246, 1247, 1255, 1263, 1264, 1273, 1275, 1290, 1292, 1298, 1303, 1308, 1319, 1327, 1328], "filter": [1, 55, 124, 134, 135, 140, 174, 205, 206, 207, 212, 231, 294, 308, 561, 563, 655, 684, 722, 751, 754, 761, 801, 811, 839, 843, 856, 858, 888, 912, 924, 929, 1212, 1319], "col": [1, 13, 34, 37, 43, 54, 55, 56, 57, 112, 114, 134, 148, 150, 182, 192, 193, 206, 208, 216, 227, 230, 231, 240, 241, 246, 254, 270, 274, 275, 281, 286, 308, 315, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 368, 369, 371, 372, 373, 376, 377, 378, 380, 381, 382, 383, 384, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 416, 417, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 476, 478, 479, 480, 481, 484, 485, 488, 489, 491, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 571, 572, 573, 575, 577, 579, 582, 583, 584, 585, 586, 587, 589, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 638, 639, 640, 641, 642, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 671, 672, 674, 675, 676, 677, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 707, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 729, 733, 734, 736, 737, 738, 740, 742, 745, 751, 754, 757, 761, 762, 763, 764, 765, 766, 775, 777, 779, 780, 782, 785, 786, 792, 794, 796, 797, 800, 801, 811, 846, 849, 850, 856, 872, 877, 879, 887, 888, 895, 899, 901, 904, 924, 929, 1042, 1045, 1128, 1191, 1209, 1212, 1245, 1272, 1319, 1328], "0": [1, 8, 10, 12, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 36, 37, 42, 46, 47, 52, 54, 55, 56, 58, 62, 70, 79, 92, 109, 120, 121, 122, 123, 125, 126, 128, 129, 131, 132, 134, 137, 138, 139, 140, 142, 147, 148, 149, 150, 151, 152, 154, 157, 161, 162, 163, 165, 166, 167, 169, 170, 171, 172, 175, 176, 180, 181, 183, 185, 186, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 202, 203, 204, 208, 210, 211, 212, 214, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228, 231, 232, 233, 236, 237, 238, 242, 243, 244, 245, 246, 251, 253, 254, 255, 256, 257, 258, 260, 264, 265, 266, 267, 268, 270, 272, 275, 277, 278, 281, 283, 284, 286, 288, 289, 290, 292, 294, 295, 296, 297, 298, 299, 300, 301, 308, 315, 317, 318, 320, 323, 325, 326, 327, 328, 329, 330, 333, 334, 335, 338, 339, 341, 344, 354, 357, 359, 368, 371, 372, 374, 375, 376, 377, 378, 385, 386, 387, 388, 389, 390, 391, 392, 396, 397, 398, 404, 405, 407, 410, 411, 414, 415, 417, 418, 419, 420, 424, 425, 429, 430, 431, 432, 434, 439, 440, 442, 443, 444, 447, 450, 451, 452, 453, 454, 455, 457, 459, 460, 461, 462, 465, 466, 468, 470, 471, 473, 474, 476, 479, 482, 483, 486, 487, 489, 490, 491, 492, 493, 495, 496, 498, 503, 504, 507, 508, 511, 514, 515, 516, 521, 523, 524, 536, 539, 541, 543, 544, 545, 546, 548, 549, 550, 551, 552, 554, 555, 556, 562, 567, 568, 569, 571, 573, 582, 583, 584, 585, 586, 588, 589, 591, 594, 595, 596, 598, 599, 600, 601, 605, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 637, 639, 640, 641, 642, 646, 647, 651, 652, 657, 658, 660, 663, 667, 668, 669, 670, 673, 678, 679, 685, 691, 694, 705, 706, 707, 709, 710, 711, 712, 713, 716, 721, 722, 724, 728, 730, 731, 732, 733, 734, 735, 736, 737, 739, 741, 743, 747, 748, 749, 750, 752, 754, 758, 761, 767, 768, 770, 772, 774, 777, 778, 779, 783, 785, 786, 797, 798, 799, 800, 801, 802, 807, 811, 826, 829, 830, 831, 835, 836, 838, 840, 844, 845, 848, 849, 850, 851, 852, 853, 854, 857, 858, 861, 863, 864, 867, 871, 873, 874, 878, 879, 884, 885, 887, 888, 889, 892, 897, 899, 901, 902, 903, 904, 906, 907, 908, 910, 912, 913, 914, 915, 916, 917, 918, 919, 924, 929, 936, 937, 938, 939, 940, 941, 942, 943, 945, 947, 950, 956, 966, 969, 971, 978, 981, 982, 984, 985, 987, 989, 990, 992, 993, 994, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1007, 1008, 1009, 1010, 1017, 1019, 1022, 1023, 1027, 1028, 1029, 1030, 1032, 1033, 1035, 1036, 1040, 1041, 1045, 1046, 1047, 1048, 1055, 1056, 1058, 1059, 1060, 1063, 1066, 1069, 1070, 1071, 1072, 1077, 1081, 1083, 1086, 1088, 1091, 1093, 1096, 1097, 1099, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1111, 1113, 1114, 1115, 1120, 1121, 1124, 1125, 1128, 1131, 1132, 1133, 1138, 1140, 1141, 1153, 1156, 1158, 1160, 1161, 1162, 1163, 1164, 1165, 1168, 1169, 1180, 1184, 1185, 1186, 1190, 1194, 1195, 1196, 1198, 1199, 1201, 1202, 1203, 1205, 1206, 1207, 1208, 1210, 1211, 1213, 1217, 1221, 1222, 1223, 1224, 1227, 1228, 1232, 1233, 1238, 1239, 1241, 1244, 1245, 1248, 1249, 1250, 1251, 1254, 1259, 1260, 1266, 1272, 1275, 1291, 1292, 1293, 1294, 1296, 1299, 1300, 1301, 1302, 1306, 1308, 1309, 1319, 1328], "drop": [1, 111, 173, 174, 216, 273, 281, 308, 394, 396, 397, 509, 510, 598, 811, 839, 894, 899, 924, 1006, 1008, 1009, 1126, 1127, 1184, 1319], "aaa": [1, 37, 308, 649, 660, 702, 704, 1230, 1241], "bbb": [1, 37, 308, 702, 704, 929], "ccc": [1, 37, 308, 702, 704], "ddd": [1, 37, 308, 702, 704], "eee": [1, 37, 308, 929], "fff": 1, "schema": [1, 15, 29, 32, 35, 36, 47, 55, 56, 57, 62, 103, 104, 108, 110, 111, 112, 114, 120, 121, 122, 123, 125, 127, 129, 130, 131, 132, 133, 134, 138, 139, 162, 166, 167, 175, 177, 211, 216, 223, 227, 266, 270, 308, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 405, 540, 541, 561, 575, 577, 579, 662, 663, 723, 793, 811, 830, 831, 840, 863, 864, 869, 881, 906, 912, 924, 929, 991, 1243, 1244, 1319], "txt": [1, 13, 134, 649, 660, 1241], "string": [1, 3, 4, 6, 7, 13, 15, 16, 17, 21, 32, 34, 35, 37, 40, 41, 43, 47, 53, 66, 69, 72, 83, 90, 91, 92, 111, 115, 120, 121, 122, 123, 134, 143, 144, 145, 146, 147, 154, 158, 164, 165, 175, 177, 185, 191, 192, 193, 195, 213, 229, 231, 240, 243, 245, 246, 247, 254, 265, 271, 272, 275, 277, 281, 282, 285, 286, 308, 316, 340, 345, 362, 363, 364, 367, 370, 426, 430, 433, 436, 444, 453, 456, 458, 464, 468, 480, 518, 564, 565, 590, 594, 605, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 645, 648, 649, 650, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 701, 703, 715, 723, 725, 727, 733, 736, 737, 738, 746, 750, 752, 753, 755, 756, 762, 776, 778, 781, 790, 793, 795, 798, 799, 801, 811, 823, 827, 829, 840, 841, 849, 850, 852, 859, 877, 878, 879, 880, 881, 887, 893, 899, 900, 904, 924, 929, 957, 973, 974, 975, 980, 981, 1042, 1046, 1049, 1052, 1060, 1070, 1074, 1092, 1113, 1135, 1190, 1229, 1230, 1231, 1233, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1261, 1262, 1263, 1264, 1265, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1285, 1298, 1319, 1328], "register_lazyframe_namespac": [1, 55, 56, 58], "dtypeoper": [1, 57], "ldf": [1, 57, 904, 905, 908, 910, 913, 914, 915, 916, 917, 918, 919], "_ldf": [1, 57], "upcast_integer_typ": [1, 57], "with_column": [1, 13, 57, 193, 230, 236, 240, 270, 275, 282, 308, 316, 318, 334, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 350, 351, 352, 353, 357, 362, 363, 368, 373, 380, 381, 382, 383, 384, 391, 394, 398, 399, 401, 404, 405, 406, 408, 409, 410, 412, 414, 416, 417, 419, 421, 424, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 445, 446, 448, 450, 451, 453, 460, 461, 466, 471, 473, 474, 479, 480, 484, 485, 488, 489, 491, 492, 493, 495, 498, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 548, 550, 553, 569, 571, 573, 574, 576, 578, 580, 581, 584, 585, 586, 590, 591, 594, 595, 596, 598, 601, 605, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 631, 635, 649, 650, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 664, 665, 666, 671, 672, 674, 675, 676, 677, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 692, 695, 696, 697, 699, 700, 701, 703, 705, 706, 713, 716, 723, 725, 727, 735, 736, 738, 743, 744, 746, 751, 753, 754, 758, 768, 773, 776, 778, 781, 791, 795, 797, 799, 801, 807, 811, 850, 856, 872, 877, 900, 924, 929, 1004, 1045, 1184, 1319], "tp": [1, 57], "cast": [1, 36, 56, 57, 108, 110, 111, 114, 143, 144, 145, 146, 185, 193, 194, 196, 197, 230, 240, 270, 281, 308, 322, 383, 384, 400, 433, 436, 447, 589, 594, 603, 610, 662, 663, 664, 701, 707, 713, 738, 791, 811, 850, 851, 853, 854, 872, 877, 899, 924, 928, 929, 981, 983, 997, 998, 1012, 1049, 1052, 1063, 1188, 1243, 1244, 1245, 1282, 1289, 1297, 1302, 1319], "int64": [1, 36, 37, 40, 56, 57, 62, 63, 83, 120, 129, 175, 185, 193, 194, 196, 197, 230, 240, 245, 261, 267, 308, 338, 339, 341, 342, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 359, 383, 384, 437, 438, 439, 440, 441, 442, 443, 447, 453, 456, 551, 553, 575, 577, 579, 594, 603, 610, 662, 696, 707, 713, 730, 759, 767, 768, 771, 787, 793, 811, 840, 850, 851, 853, 854, 872, 877, 878, 881, 924, 950, 951, 953, 954, 959, 960, 961, 962, 963, 964, 965, 966, 967, 970, 971, 997, 998, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1063, 1065, 1067, 1070, 1166, 1188, 1211, 1277, 1289, 1300, 1301, 1302, 1319], "int8": [1, 57, 83, 185, 308, 356, 357, 383, 384, 406, 410, 419, 421, 428, 431, 445, 446, 540, 707, 784, 787, 802, 811, 968, 969, 997, 998, 1006, 1018, 1022, 1035, 1037, 1044, 1047, 1061, 1062, 1157, 1192, 1289, 1306, 1319], "int16": [1, 57, 270, 308, 383, 384, 427, 707, 811, 929, 997, 998, 1043, 1289, 1298, 1319], "int32": [1, 57, 62, 108, 111, 147, 149, 150, 193, 194, 196, 197, 211, 240, 308, 343, 344, 346, 368, 401, 413, 414, 416, 417, 424, 448, 453, 608, 610, 713, 787, 811, 850, 851, 853, 854, 877, 924, 929, 952, 955, 956, 958, 1013, 1025, 1029, 1031, 1032, 1040, 1064, 1070, 1164, 1193, 1302, 1319], "b": [1, 11, 32, 34, 36, 38, 39, 42, 49, 50, 52, 57, 62, 83, 108, 109, 110, 111, 112, 113, 114, 115, 120, 122, 125, 161, 163, 164, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 185, 187, 189, 190, 191, 192, 193, 198, 199, 201, 203, 205, 207, 208, 209, 210, 211, 212, 214, 217, 219, 221, 222, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 238, 239, 241, 242, 243, 244, 245, 246, 250, 253, 254, 255, 256, 257, 259, 261, 262, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 308, 316, 318, 319, 321, 322, 333, 335, 340, 345, 360, 361, 362, 363, 364, 365, 367, 368, 379, 391, 395, 433, 436, 456, 458, 460, 461, 462, 464, 467, 474, 477, 479, 480, 482, 486, 489, 491, 492, 493, 495, 499, 505, 511, 518, 529, 530, 531, 532, 550, 551, 553, 558, 570, 573, 574, 575, 576, 577, 578, 579, 587, 588, 590, 594, 596, 598, 601, 605, 607, 609, 637, 643, 645, 653, 656, 660, 662, 674, 675, 703, 706, 715, 718, 722, 724, 725, 726, 727, 729, 733, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 758, 759, 760, 761, 762, 765, 766, 767, 769, 770, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 788, 789, 792, 793, 794, 795, 796, 800, 811, 826, 827, 830, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 855, 858, 860, 861, 862, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 878, 879, 883, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 899, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 913, 914, 915, 916, 917, 918, 919, 920, 924, 929, 932, 935, 957, 972, 973, 974, 975, 976, 980, 982, 983, 1004, 1007, 1049, 1052, 1066, 1067, 1068, 1075, 1078, 1092, 1100, 1113, 1122, 1146, 1147, 1148, 1149, 1184, 1189, 1234, 1237, 1241, 1243, 1255, 1256, 1283, 1285, 1286, 1288, 1301, 1305, 1319, 1327], "4": [1, 9, 14, 18, 26, 32, 34, 36, 37, 38, 39, 42, 47, 49, 50, 52, 54, 55, 56, 57, 58, 62, 63, 79, 108, 109, 110, 111, 112, 113, 114, 115, 125, 134, 142, 154, 161, 163, 164, 165, 166, 167, 170, 174, 178, 179, 180, 181, 185, 187, 188, 190, 191, 192, 193, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 216, 218, 219, 220, 222, 223, 225, 226, 227, 229, 230, 231, 232, 236, 240, 242, 243, 249, 250, 254, 255, 258, 259, 261, 262, 263, 264, 269, 271, 272, 274, 275, 276, 277, 279, 280, 281, 283, 284, 286, 287, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 308, 311, 315, 316, 317, 318, 320, 322, 335, 342, 343, 344, 346, 347, 348, 349, 350, 352, 354, 355, 356, 357, 359, 360, 366, 367, 368, 371, 372, 373, 379, 380, 381, 382, 383, 384, 390, 392, 395, 402, 405, 406, 416, 427, 428, 429, 430, 431, 433, 436, 438, 441, 443, 444, 446, 450, 451, 453, 457, 458, 460, 461, 462, 464, 465, 466, 467, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 492, 493, 495, 498, 499, 500, 508, 509, 510, 511, 512, 514, 515, 517, 526, 528, 529, 530, 531, 532, 533, 534, 538, 540, 545, 548, 550, 551, 553, 569, 571, 573, 574, 576, 578, 580, 581, 584, 585, 586, 589, 590, 592, 593, 594, 595, 596, 599, 601, 605, 606, 607, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 633, 635, 639, 643, 644, 645, 646, 649, 652, 658, 660, 661, 665, 666, 671, 672, 674, 675, 680, 681, 682, 683, 689, 690, 691, 692, 696, 701, 702, 704, 705, 706, 708, 713, 714, 715, 716, 722, 723, 725, 727, 729, 731, 732, 733, 734, 736, 738, 739, 741, 743, 744, 745, 746, 751, 752, 753, 754, 755, 756, 758, 760, 761, 765, 767, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 807, 811, 826, 827, 829, 830, 831, 832, 833, 835, 839, 841, 842, 843, 844, 845, 847, 848, 849, 850, 855, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 877, 883, 885, 886, 887, 888, 889, 890, 891, 893, 895, 896, 897, 898, 899, 902, 903, 904, 905, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 919, 920, 924, 929, 935, 938, 945, 952, 954, 955, 956, 958, 959, 960, 961, 962, 964, 966, 967, 968, 969, 970, 971, 977, 985, 986, 988, 1003, 1005, 1007, 1017, 1022, 1029, 1031, 1032, 1035, 1037, 1038, 1039, 1040, 1044, 1045, 1046, 1049, 1052, 1054, 1057, 1059, 1060, 1061, 1062, 1067, 1070, 1074, 1075, 1077, 1078, 1082, 1083, 1084, 1087, 1088, 1091, 1092, 1094, 1100, 1105, 1106, 1107, 1108, 1112, 1117, 1125, 1126, 1127, 1128, 1129, 1134, 1139, 1142, 1143, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1155, 1157, 1172, 1175, 1176, 1177, 1180, 1181, 1182, 1186, 1187, 1190, 1191, 1194, 1199, 1201, 1202, 1203, 1204, 1205, 1208, 1210, 1216, 1218, 1221, 1224, 1225, 1226, 1230, 1233, 1239, 1241, 1242, 1246, 1247, 1252, 1253, 1261, 1263, 1264, 1270, 1271, 1272, 1273, 1277, 1282, 1283, 1286, 1288, 1290, 1298, 1302, 1303, 1310, 1319, 1323, 1328], "c": [1, 11, 32, 34, 36, 38, 39, 42, 49, 50, 52, 55, 57, 62, 109, 111, 113, 115, 125, 134, 161, 164, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 178, 182, 185, 189, 190, 191, 192, 193, 199, 201, 203, 211, 212, 214, 217, 219, 221, 222, 224, 226, 227, 228, 229, 231, 232, 233, 235, 238, 239, 241, 244, 245, 246, 253, 254, 255, 256, 257, 259, 261, 264, 265, 266, 267, 268, 271, 275, 276, 278, 279, 281, 286, 290, 291, 292, 295, 296, 298, 301, 302, 308, 316, 318, 319, 321, 323, 340, 360, 367, 391, 462, 480, 495, 505, 518, 550, 553, 573, 574, 588, 590, 594, 598, 637, 682, 691, 715, 718, 725, 727, 729, 733, 736, 738, 739, 740, 741, 743, 744, 746, 760, 761, 762, 765, 766, 769, 770, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 792, 794, 795, 796, 800, 807, 811, 827, 829, 830, 831, 832, 833, 834, 835, 838, 839, 840, 841, 842, 843, 846, 849, 850, 858, 861, 868, 871, 873, 875, 876, 878, 879, 885, 886, 887, 888, 893, 896, 899, 901, 904, 908, 909, 910, 913, 914, 916, 919, 920, 924, 928, 929, 982, 1004, 1092, 1113, 1122, 1184, 1263, 1272, 1286, 1305, 1319], "5": [1, 8, 9, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 32, 34, 36, 38, 39, 42, 50, 52, 54, 55, 57, 58, 62, 108, 111, 112, 113, 114, 115, 117, 121, 142, 143, 145, 148, 150, 154, 165, 166, 167, 171, 178, 179, 180, 181, 185, 187, 188, 190, 191, 192, 193, 199, 200, 203, 204, 206, 208, 209, 210, 212, 213, 214, 215, 216, 218, 219, 220, 222, 225, 226, 227, 229, 231, 232, 233, 236, 240, 243, 249, 250, 254, 255, 258, 259, 261, 262, 263, 264, 266, 269, 270, 272, 275, 276, 277, 280, 281, 283, 284, 286, 289, 290, 291, 292, 295, 296, 297, 298, 299, 300, 301, 302, 308, 311, 316, 317, 320, 336, 337, 342, 343, 344, 346, 348, 352, 357, 359, 366, 367, 368, 372, 373, 390, 391, 392, 394, 395, 398, 401, 402, 403, 404, 405, 410, 414, 416, 417, 419, 424, 429, 431, 433, 434, 436, 437, 443, 447, 451, 453, 455, 456, 459, 461, 465, 466, 470, 471, 473, 475, 477, 479, 480, 484, 488, 489, 491, 492, 493, 495, 498, 500, 508, 511, 512, 514, 515, 517, 520, 523, 524, 528, 529, 530, 531, 532, 533, 537, 538, 543, 569, 571, 573, 585, 589, 590, 591, 592, 593, 594, 598, 599, 601, 605, 606, 607, 609, 610, 612, 613, 615, 616, 617, 618, 619, 621, 624, 626, 627, 628, 629, 630, 633, 639, 645, 652, 660, 661, 664, 665, 666, 692, 696, 705, 708, 714, 715, 716, 729, 734, 735, 736, 737, 739, 741, 743, 744, 745, 746, 751, 752, 754, 757, 758, 759, 760, 761, 765, 767, 769, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 792, 794, 795, 796, 800, 807, 811, 829, 830, 831, 832, 833, 836, 841, 842, 843, 844, 845, 847, 848, 849, 850, 855, 857, 858, 859, 860, 861, 862, 866, 867, 868, 873, 877, 883, 885, 886, 887, 888, 889, 890, 891, 896, 898, 899, 902, 903, 904, 907, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 920, 924, 929, 935, 938, 942, 945, 948, 949, 952, 954, 955, 956, 958, 960, 964, 969, 970, 971, 977, 986, 988, 995, 1003, 1004, 1005, 1006, 1007, 1010, 1013, 1014, 1015, 1016, 1017, 1018, 1031, 1045, 1047, 1049, 1050, 1052, 1053, 1059, 1061, 1062, 1063, 1067, 1070, 1072, 1074, 1075, 1076, 1084, 1087, 1088, 1091, 1092, 1098, 1104, 1117, 1125, 1128, 1129, 1134, 1137, 1141, 1145, 1146, 1147, 1148, 1149, 1150, 1154, 1155, 1160, 1164, 1172, 1177, 1180, 1181, 1182, 1184, 1185, 1186, 1187, 1190, 1191, 1194, 1196, 1197, 1198, 1200, 1201, 1204, 1208, 1210, 1218, 1221, 1224, 1227, 1233, 1241, 1242, 1245, 1246, 1273, 1277, 1290, 1303, 1306, 1310, 1319, 1328], "6": [1, 9, 14, 32, 34, 36, 37, 38, 39, 40, 41, 42, 50, 52, 53, 55, 57, 62, 91, 92, 108, 111, 112, 113, 114, 125, 129, 130, 142, 165, 168, 172, 173, 174, 175, 176, 178, 179, 182, 187, 188, 189, 190, 191, 193, 199, 201, 203, 204, 206, 208, 209, 210, 212, 213, 216, 217, 218, 219, 220, 221, 222, 224, 225, 228, 231, 232, 233, 235, 236, 238, 240, 241, 242, 243, 244, 245, 246, 250, 253, 254, 256, 257, 258, 259, 261, 263, 264, 265, 266, 267, 268, 272, 274, 275, 277, 278, 279, 281, 283, 284, 291, 301, 302, 308, 311, 316, 320, 342, 343, 344, 346, 352, 360, 367, 368, 383, 384, 395, 398, 402, 406, 421, 426, 427, 428, 439, 440, 442, 445, 446, 449, 451, 460, 461, 466, 467, 470, 475, 477, 479, 500, 501, 502, 512, 515, 529, 530, 531, 532, 536, 553, 585, 589, 597, 600, 601, 602, 606, 608, 610, 613, 615, 617, 619, 621, 624, 626, 627, 628, 633, 645, 652, 656, 665, 666, 696, 705, 708, 715, 723, 725, 727, 735, 743, 744, 745, 751, 754, 758, 761, 767, 773, 774, 778, 794, 807, 811, 829, 832, 833, 834, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 850, 855, 857, 858, 860, 862, 864, 868, 871, 873, 875, 877, 878, 879, 881, 883, 885, 886, 887, 888, 891, 895, 898, 899, 902, 903, 909, 919, 920, 924, 929, 952, 954, 955, 956, 958, 964, 986, 992, 994, 997, 998, 1007, 1010, 1042, 1062, 1067, 1074, 1084, 1088, 1118, 1119, 1129, 1132, 1146, 1147, 1148, 1149, 1153, 1172, 1183, 1186, 1187, 1191, 1193, 1199, 1201, 1203, 1205, 1210, 1218, 1233, 1237, 1246, 1277, 1289, 1319, 1327, 1328], "7": [1, 17, 28, 32, 34, 36, 37, 38, 39, 40, 41, 42, 52, 55, 57, 62, 129, 130, 142, 157, 165, 168, 169, 171, 172, 173, 175, 176, 178, 182, 187, 189, 193, 199, 201, 204, 212, 217, 219, 221, 223, 224, 228, 231, 233, 235, 238, 240, 241, 243, 244, 245, 246, 250, 253, 256, 257, 258, 259, 265, 266, 267, 268, 275, 277, 278, 279, 308, 316, 320, 343, 344, 346, 355, 384, 401, 402, 406, 416, 427, 429, 430, 444, 446, 457, 470, 475, 479, 500, 515, 529, 530, 531, 532, 589, 601, 606, 610, 626, 627, 645, 660, 695, 708, 735, 743, 744, 751, 754, 755, 761, 766, 773, 774, 794, 811, 829, 834, 836, 838, 840, 842, 846, 848, 850, 855, 857, 858, 862, 869, 871, 874, 875, 877, 878, 879, 883, 888, 891, 924, 929, 942, 955, 956, 958, 967, 1013, 1014, 1018, 1025, 1031, 1045, 1046, 1060, 1062, 1073, 1114, 1132, 1146, 1147, 1148, 1149, 1190, 1191, 1204, 1210, 1241, 1276, 1319, 1328], "float32": [1, 11, 34, 43, 57, 165, 185, 265, 266, 270, 308, 453, 771, 811, 829, 924, 929, 1070, 1095, 1164, 1319], "lazi": [1, 47, 48, 49, 50, 52, 57, 62, 134, 150, 213, 230, 231, 255, 308, 553, 763, 784, 787, 802, 811, 836, 858, 859, 901, 904, 905, 908, 910, 912, 913, 914, 915, 916, 917, 918, 919, 924, 929, 1327, 1328], "i16": [1, 57, 406, 427, 446, 637, 811, 929, 1043, 1298, 1319, 1328], "i32": [1, 57, 108, 111, 115, 147, 149, 150, 246, 255, 308, 343, 344, 346, 368, 401, 410, 413, 414, 416, 417, 419, 424, 448, 608, 637, 735, 801, 811, 879, 924, 955, 956, 958, 1013, 1025, 1029, 1031, 1032, 1040, 1064, 1164, 1193, 1319, 1328], "f32": [1, 57, 165, 255, 265, 270, 308, 637, 811, 829, 888, 924, 929, 1164, 1319], "i64": [1, 11, 14, 17, 18, 22, 28, 47, 49, 55, 56, 57, 58, 62, 63, 79, 108, 109, 110, 111, 112, 113, 114, 115, 120, 122, 129, 130, 134, 164, 165, 166, 167, 168, 172, 174, 175, 178, 179, 181, 182, 187, 188, 190, 191, 192, 193, 199, 201, 203, 205, 207, 209, 212, 213, 216, 217, 222, 223, 224, 229, 230, 231, 232, 235, 236, 238, 239, 240, 244, 246, 250, 253, 254, 255, 257, 259, 262, 268, 271, 272, 273, 274, 275, 276, 277, 279, 281, 283, 284, 285, 286, 287, 290, 291, 292, 294, 295, 298, 301, 302, 308, 316, 318, 322, 333, 338, 339, 341, 342, 347, 349, 350, 351, 352, 353, 355, 358, 360, 366, 367, 373, 381, 382, 383, 384, 390, 391, 394, 395, 409, 435, 437, 438, 439, 440, 441, 442, 443, 453, 456, 458, 459, 461, 462, 463, 464, 466, 467, 469, 470, 472, 475, 477, 478, 479, 480, 484, 485, 488, 489, 491, 492, 493, 495, 497, 500, 503, 504, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 541, 542, 543, 547, 550, 551, 553, 569, 570, 571, 573, 574, 576, 578, 580, 581, 586, 590, 591, 594, 595, 596, 597, 598, 601, 602, 603, 605, 606, 607, 608, 609, 610, 632, 634, 635, 637, 638, 639, 643, 644, 645, 661, 674, 675, 692, 696, 701, 702, 704, 705, 706, 707, 708, 714, 715, 716, 717, 719, 722, 730, 733, 736, 738, 743, 744, 745, 746, 751, 754, 757, 758, 759, 760, 761, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 778, 780, 781, 783, 786, 790, 791, 794, 795, 796, 797, 801, 807, 811, 827, 829, 830, 832, 833, 837, 838, 839, 842, 843, 845, 846, 847, 848, 849, 850, 855, 858, 859, 860, 862, 864, 865, 868, 869, 870, 872, 873, 875, 876, 877, 879, 881, 883, 886, 887, 888, 890, 891, 893, 894, 895, 896, 899, 902, 903, 904, 905, 908, 909, 910, 912, 913, 916, 919, 920, 924, 929, 931, 932, 935, 954, 959, 961, 963, 964, 965, 967, 970, 977, 988, 991, 995, 996, 997, 998, 1003, 1004, 1021, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1074, 1075, 1076, 1078, 1079, 1082, 1083, 1084, 1087, 1089, 1100, 1117, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1136, 1139, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1158, 1159, 1166, 1171, 1177, 1184, 1187, 1188, 1189, 1190, 1191, 1193, 1197, 1200, 1204, 1208, 1209, 1212, 1216, 1218, 1220, 1221, 1225, 1226, 1277, 1283, 1288, 1290, 1297, 1303, 1304, 1310, 1319, 1327, 1328], "register_series_namespac": [1, 55, 56, 57], "math": [1, 11, 58, 392, 731, 732, 811, 992, 994, 1222, 1293, 1319], "mathshortcut": [1, 58], "": [1, 12, 34, 35, 36, 37, 42, 43, 47, 50, 58, 63, 83, 108, 115, 120, 121, 122, 123, 125, 131, 135, 136, 139, 140, 154, 164, 165, 174, 177, 182, 187, 192, 193, 194, 195, 196, 197, 203, 209, 212, 213, 222, 229, 231, 236, 238, 240, 243, 246, 247, 254, 264, 271, 273, 274, 275, 276, 281, 282, 308, 345, 367, 403, 409, 433, 436, 456, 462, 466, 496, 518, 551, 553, 562, 570, 582, 583, 590, 591, 603, 609, 645, 649, 657, 658, 659, 660, 661, 674, 675, 680, 681, 683, 691, 692, 693, 694, 698, 699, 702, 704, 715, 724, 725, 726, 727, 733, 739, 742, 745, 746, 749, 750, 759, 760, 762, 763, 769, 773, 774, 775, 776, 778, 780, 781, 783, 790, 791, 793, 794, 795, 801, 807, 811, 827, 829, 839, 849, 850, 851, 852, 853, 854, 859, 868, 877, 879, 880, 887, 893, 894, 895, 896, 899, 900, 906, 912, 924, 929, 931, 932, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 991, 992, 993, 994, 995, 996, 997, 998, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1014, 1015, 1018, 1020, 1021, 1024, 1026, 1027, 1031, 1032, 1034, 1038, 1039, 1043, 1046, 1047, 1049, 1052, 1060, 1062, 1063, 1064, 1065, 1068, 1069, 1071, 1072, 1073, 1074, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1087, 1089, 1091, 1092, 1093, 1094, 1095, 1096, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1150, 1151, 1152, 1153, 1154, 1155, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1214, 1215, 1216, 1218, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1246, 1247, 1252, 1253, 1255, 1256, 1257, 1258, 1261, 1264, 1265, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1285, 1286, 1288, 1289, 1290, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1319, 1323], "_": [1, 54, 58, 231, 264, 267, 308, 345, 518, 650, 658, 665, 666, 676, 681, 682, 885, 924, 982, 1231, 1239, 1246, 1247, 1257, 1263, 1296, 1319], "squar": [1, 58, 294, 496, 646, 811, 912, 1115, 1227, 1319], "cube": [1, 58, 371, 595, 811, 984, 1319], "s2": [1, 53, 91, 92, 145, 146, 185, 308, 969, 986, 1007, 1067, 1084, 1100, 1114, 1122, 1158, 1172, 1187, 1310, 1319], "renam": [1, 111, 120, 121, 157, 162, 183, 186, 192, 194, 195, 196, 197, 202, 237, 246, 247, 260, 281, 282, 286, 288, 289, 308, 318, 323, 385, 386, 387, 388, 389, 468, 483, 487, 490, 495, 507, 521, 539, 549, 550, 552, 566, 567, 573, 574, 575, 576, 578, 580, 581, 596, 611, 651, 663, 667, 668, 669, 670, 673, 678, 679, 685, 704, 706, 709, 710, 728, 747, 748, 749, 750, 772, 790, 793, 811, 849, 851, 852, 853, 854, 863, 879, 880, 892, 899, 900, 904, 906, 907, 924, 932, 936, 999, 1000, 1001, 1002, 1004, 1097, 1103, 1124, 1138, 1156, 1165, 1184, 1195, 1211, 1213, 1232, 1241, 1244, 1248, 1249, 1250, 1251, 1254, 1259, 1260, 1266, 1286, 1291, 1292, 1297, 1319], "n2": [1, 357], "s3": [1, 36, 124, 135, 136, 139, 140, 308, 969, 1158, 1319], "n3": 1, "8": [1, 12, 32, 34, 36, 38, 39, 40, 41, 42, 43, 47, 52, 54, 55, 57, 58, 62, 78, 82, 88, 129, 130, 142, 165, 168, 169, 171, 172, 173, 174, 175, 176, 178, 182, 187, 189, 191, 199, 201, 209, 212, 213, 216, 217, 219, 221, 224, 233, 235, 238, 241, 243, 244, 245, 246, 250, 253, 255, 256, 257, 259, 265, 266, 267, 268, 275, 278, 279, 281, 308, 320, 322, 335, 343, 344, 346, 381, 384, 390, 402, 470, 476, 479, 509, 511, 515, 521, 529, 530, 531, 532, 571, 589, 595, 606, 607, 612, 637, 643, 645, 667, 670, 671, 672, 691, 723, 729, 735, 739, 741, 744, 746, 758, 760, 765, 766, 769, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 792, 795, 796, 800, 811, 829, 834, 836, 838, 839, 840, 842, 846, 848, 855, 858, 862, 864, 873, 875, 878, 879, 883, 888, 891, 899, 924, 929, 955, 956, 958, 994, 1003, 1025, 1088, 1114, 1126, 1128, 1132, 1138, 1146, 1147, 1148, 1149, 1180, 1191, 1194, 1196, 1199, 1201, 1203, 1205, 1248, 1251, 1252, 1253, 1272, 1319, 1328], "9": [1, 10, 32, 34, 36, 37, 38, 39, 42, 47, 52, 54, 62, 142, 169, 171, 185, 194, 199, 204, 216, 240, 242, 243, 246, 258, 259, 275, 279, 281, 301, 308, 316, 320, 322, 335, 343, 344, 346, 351, 353, 381, 384, 392, 402, 462, 470, 479, 485, 495, 509, 515, 527, 535, 573, 589, 600, 606, 610, 612, 623, 626, 627, 639, 643, 658, 695, 703, 737, 743, 744, 751, 754, 766, 799, 811, 836, 851, 855, 857, 862, 877, 879, 891, 899, 919, 924, 929, 950, 951, 955, 956, 958, 963, 965, 1005, 1018, 1029, 1032, 1040, 1046, 1060, 1061, 1100, 1114, 1126, 1132, 1144, 1152, 1191, 1196, 1202, 1204, 1206, 1221, 1239, 1276, 1285, 1299, 1319], "27": [1, 58, 301, 384, 421, 428, 445, 811, 919, 1319, 1328], "16": [1, 37, 56, 75, 85, 142, 156, 171, 186, 193, 240, 281, 308, 381, 384, 479, 552, 571, 595, 610, 696, 743, 757, 758, 761, 811, 836, 850, 877, 885, 899, 924, 929, 1046, 1060, 1165, 1180, 1211, 1222, 1277, 1293, 1319], "64": [1, 56, 58, 69, 71, 74, 77, 84, 87, 141, 161, 270, 308, 378, 571, 595, 811, 1180, 1319], "25": [1, 28, 37, 58, 115, 171, 193, 213, 240, 270, 277, 281, 308, 394, 406, 408, 427, 430, 444, 446, 453, 598, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 716, 752, 753, 754, 755, 756, 757, 763, 774, 798, 799, 811, 836, 850, 859, 866, 877, 897, 899, 924, 929, 1005, 1006, 1020, 1046, 1060, 1066, 1070, 1088, 1180, 1184, 1319], "125": [1, 37, 58, 255, 308, 316, 811, 888, 924, 1180, 1319], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 393, 468, 811, 837, 924], "activ": [2, 8, 9, 19, 20, 22, 23, 24, 25, 29, 30, 511, 658, 1128, 1239], "bool": [2, 8, 9, 10, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 34, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 54, 60, 61, 62, 91, 92, 108, 109, 110, 111, 113, 114, 115, 120, 121, 122, 125, 126, 128, 130, 131, 132, 134, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 158, 161, 164, 165, 166, 167, 171, 176, 181, 182, 184, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 201, 203, 205, 206, 207, 210, 212, 213, 220, 229, 231, 240, 241, 242, 243, 244, 248, 252, 254, 255, 258, 262, 264, 266, 267, 271, 272, 273, 274, 276, 277, 279, 281, 290, 292, 295, 298, 308, 318, 319, 320, 321, 322, 323, 333, 336, 337, 340, 344, 345, 353, 358, 361, 362, 364, 365, 366, 367, 368, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 398, 412, 429, 431, 444, 449, 450, 451, 452, 453, 454, 455, 471, 473, 476, 480, 481, 482, 484, 485, 486, 488, 489, 491, 492, 493, 494, 496, 498, 501, 502, 506, 511, 514, 516, 518, 528, 535, 539, 542, 548, 549, 551, 553, 557, 558, 559, 560, 561, 565, 584, 585, 587, 589, 592, 593, 598, 601, 603, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 634, 637, 642, 644, 645, 648, 649, 650, 652, 653, 655, 660, 673, 674, 675, 676, 681, 682, 684, 691, 693, 694, 696, 698, 704, 714, 715, 717, 720, 723, 724, 725, 726, 727, 728, 730, 733, 734, 735, 738, 739, 742, 743, 747, 752, 753, 754, 755, 756, 767, 768, 771, 774, 784, 787, 793, 798, 799, 801, 802, 811, 827, 829, 830, 832, 833, 836, 841, 843, 845, 846, 849, 850, 851, 852, 853, 854, 858, 859, 863, 864, 868, 873, 877, 882, 885, 887, 888, 893, 894, 895, 896, 899, 908, 910, 913, 916, 924, 928, 929, 933, 934, 936, 945, 948, 949, 952, 956, 957, 965, 970, 972, 973, 975, 976, 978, 980, 983, 987, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1010, 1024, 1045, 1047, 1060, 1066, 1067, 1069, 1071, 1072, 1079, 1085, 1088, 1092, 1093, 1094, 1095, 1096, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1118, 1119, 1123, 1124, 1128, 1131, 1133, 1135, 1145, 1152, 1156, 1159, 1166, 1178, 1181, 1182, 1184, 1186, 1187, 1188, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1208, 1211, 1212, 1213, 1214, 1219, 1224, 1226, 1229, 1230, 1231, 1233, 1234, 1236, 1241, 1254, 1255, 1256, 1257, 1262, 1263, 1265, 1272, 1274, 1275, 1277, 1279, 1296, 1299, 1300, 1301, 1304, 1307, 1309, 1319, 1327], "none": [2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 52, 54, 61, 66, 69, 70, 92, 108, 110, 111, 112, 113, 114, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 162, 166, 170, 171, 174, 180, 181, 191, 193, 194, 196, 197, 198, 204, 208, 212, 213, 214, 216, 217, 219, 222, 224, 227, 228, 231, 240, 241, 244, 250, 251, 253, 254, 255, 257, 262, 264, 267, 270, 272, 273, 274, 275, 276, 277, 289, 293, 308, 319, 321, 322, 323, 335, 336, 337, 344, 345, 357, 360, 373, 379, 380, 381, 384, 391, 396, 397, 405, 426, 429, 430, 444, 451, 452, 453, 454, 455, 456, 459, 460, 461, 467, 474, 476, 479, 480, 489, 491, 492, 493, 499, 501, 502, 510, 516, 518, 520, 528, 529, 530, 531, 532, 534, 541, 549, 551, 552, 553, 561, 564, 565, 567, 572, 585, 586, 587, 588, 591, 598, 601, 602, 605, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 632, 635, 636, 637, 638, 639, 643, 644, 648, 649, 652, 654, 655, 658, 660, 661, 662, 663, 664, 665, 666, 669, 671, 672, 673, 679, 680, 682, 683, 684, 685, 686, 687, 688, 691, 692, 693, 694, 696, 698, 701, 702, 703, 704, 713, 725, 726, 727, 728, 730, 736, 738, 740, 742, 746, 752, 753, 754, 755, 756, 757, 759, 760, 767, 768, 769, 770, 771, 772, 773, 774, 776, 778, 781, 783, 787, 788, 789, 793, 795, 797, 798, 799, 801, 811, 830, 831, 833, 835, 836, 839, 844, 845, 850, 851, 853, 854, 857, 858, 859, 861, 863, 864, 868, 871, 877, 881, 883, 884, 885, 886, 887, 888, 894, 895, 896, 901, 906, 907, 911, 912, 924, 928, 929, 933, 934, 936, 943, 944, 948, 949, 956, 957, 969, 987, 988, 1004, 1005, 1007, 1008, 1009, 1017, 1026, 1027, 1028, 1034, 1045, 1046, 1060, 1066, 1069, 1070, 1071, 1072, 1076, 1077, 1078, 1086, 1088, 1090, 1091, 1092, 1102, 1107, 1108, 1111, 1114, 1115, 1116, 1118, 1119, 1122, 1127, 1133, 1135, 1137, 1145, 1146, 1147, 1148, 1149, 1151, 1158, 1165, 1166, 1167, 1168, 1169, 1170, 1179, 1184, 1185, 1186, 1190, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1208, 1209, 1212, 1213, 1216, 1217, 1220, 1221, 1224, 1225, 1228, 1229, 1230, 1233, 1235, 1236, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1250, 1252, 1253, 1254, 1260, 1261, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1272, 1273, 1274, 1275, 1277, 1279, 1282, 1285, 1297, 1298, 1299, 1300, 1301, 1302, 1308, 1319, 1327], "true": [2, 8, 9, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 49, 51, 60, 61, 62, 108, 109, 110, 111, 113, 114, 115, 117, 120, 121, 122, 124, 125, 126, 128, 131, 132, 134, 135, 137, 139, 140, 143, 144, 145, 146, 147, 148, 150, 153, 154, 159, 161, 164, 165, 166, 167, 171, 176, 181, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 203, 205, 206, 207, 210, 212, 213, 214, 219, 220, 226, 227, 229, 231, 232, 240, 241, 242, 243, 244, 246, 254, 255, 258, 262, 264, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 281, 287, 290, 292, 295, 296, 297, 298, 299, 300, 301, 308, 317, 318, 319, 320, 321, 322, 323, 334, 336, 337, 340, 344, 345, 353, 357, 361, 362, 364, 365, 366, 367, 368, 380, 381, 382, 383, 384, 391, 398, 400, 403, 406, 409, 412, 422, 423, 426, 427, 429, 430, 431, 435, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455, 469, 471, 472, 473, 476, 480, 481, 482, 484, 485, 486, 488, 489, 491, 492, 493, 494, 496, 498, 501, 502, 506, 514, 516, 518, 535, 539, 541, 548, 551, 553, 557, 558, 559, 560, 561, 562, 565, 566, 584, 585, 587, 589, 592, 593, 598, 603, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 637, 642, 644, 645, 648, 649, 650, 652, 653, 655, 660, 662, 664, 673, 674, 675, 681, 682, 684, 691, 693, 694, 696, 698, 702, 704, 714, 715, 717, 720, 723, 724, 725, 726, 727, 728, 730, 733, 734, 735, 739, 752, 754, 755, 761, 767, 774, 784, 787, 793, 798, 801, 802, 811, 827, 829, 830, 831, 832, 833, 836, 841, 843, 845, 849, 850, 851, 852, 853, 854, 858, 859, 861, 863, 864, 868, 873, 877, 879, 885, 887, 888, 893, 894, 895, 896, 899, 905, 908, 910, 913, 914, 915, 916, 917, 918, 919, 924, 928, 929, 933, 934, 936, 946, 948, 949, 952, 956, 957, 965, 972, 973, 975, 976, 978, 980, 983, 986, 987, 1004, 1010, 1011, 1012, 1015, 1018, 1020, 1021, 1022, 1024, 1028, 1029, 1032, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1066, 1067, 1069, 1071, 1072, 1079, 1085, 1088, 1092, 1093, 1094, 1095, 1096, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1118, 1119, 1123, 1131, 1133, 1135, 1152, 1156, 1166, 1172, 1178, 1181, 1182, 1184, 1187, 1188, 1202, 1211, 1224, 1226, 1229, 1230, 1231, 1233, 1234, 1236, 1241, 1243, 1245, 1254, 1255, 1256, 1262, 1263, 1265, 1272, 1274, 1275, 1277, 1279, 1296, 1300, 1301, 1307, 1309, 1310, 1319, 1328], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 308, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 807, 811, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 924, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1285, 1286, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1319, 1327], "decim": [2, 10, 11, 12, 28, 29, 34, 37, 43, 120, 121, 134, 308, 630, 695, 811, 924, 1206, 1276, 1319], "temporari": [2, 35, 308], "set": [2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 18, 21, 26, 27, 28, 31, 34, 37, 38, 39, 40, 41, 43, 44, 45, 46, 54, 55, 60, 61, 66, 69, 70, 72, 109, 110, 111, 114, 120, 121, 122, 125, 126, 128, 129, 131, 132, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 161, 168, 174, 184, 192, 193, 194, 195, 196, 197, 198, 210, 213, 217, 219, 220, 222, 224, 240, 242, 244, 246, 253, 255, 257, 258, 264, 266, 270, 272, 273, 275, 276, 281, 308, 319, 321, 323, 344, 345, 357, 373, 391, 429, 447, 453, 474, 485, 514, 516, 518, 528, 529, 530, 531, 532, 534, 539, 541, 551, 552, 553, 564, 594, 598, 605, 610, 611, 612, 613, 615, 617, 619, 621, 624, 626, 628, 632, 638, 642, 643, 648, 662, 663, 669, 674, 675, 679, 680, 685, 686, 687, 688, 689, 690, 691, 693, 694, 698, 720, 724, 726, 730, 734, 738, 752, 753, 754, 755, 756, 757, 767, 768, 771, 784, 787, 788, 789, 793, 798, 799, 801, 802, 811, 823, 832, 833, 839, 841, 849, 850, 851, 852, 853, 854, 858, 859, 863, 864, 868, 877, 879, 881, 886, 888, 894, 896, 899, 906, 912, 924, 928, 933, 934, 956, 957, 969, 973, 981, 988, 1004, 1045, 1063, 1070, 1080, 1086, 1100, 1131, 1133, 1135, 1145, 1146, 1147, 1148, 1149, 1151, 1156, 1158, 1165, 1166, 1184, 1190, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1208, 1209, 1210, 1213, 1220, 1224, 1225, 1229, 1243, 1244, 1250, 1255, 1256, 1260, 1261, 1266, 1267, 1268, 1269, 1272, 1274, 1275, 1279, 1300, 1307, 1319, 1328], "remov": [2, 5, 93, 120, 121, 134, 161, 172, 217, 219, 224, 257, 264, 277, 308, 323, 430, 444, 456, 550, 574, 669, 679, 685, 686, 687, 688, 689, 690, 759, 811, 838, 924, 981, 1004, 1046, 1060, 1184, 1250, 1260, 1266, 1267, 1268, 1269, 1270, 1271, 1275, 1296, 1299, 1309, 1319], "onc": [2, 50, 120, 121, 156, 216, 242, 244, 286, 308, 528, 551, 553, 632, 689, 690, 811, 828, 904, 924, 1145, 1166, 1208, 1270, 1271, 1319], "stabil": [2, 198, 308, 474, 811, 1086, 1319], "current": [2, 3, 4, 6, 7, 31, 35, 49, 115, 122, 123, 125, 132, 139, 166, 167, 212, 213, 255, 308, 408, 452, 454, 455, 541, 591, 811, 830, 831, 858, 859, 888, 924, 929, 987, 991, 1011, 1020, 1069, 1071, 1072, 1180, 1319, 1327], "consid": [2, 38, 43, 44, 45, 46, 60, 61, 70, 72, 91, 92, 120, 121, 122, 132, 134, 139, 140, 143, 144, 145, 146, 174, 176, 186, 209, 216, 222, 242, 255, 273, 275, 276, 308, 323, 367, 373, 390, 391, 430, 466, 476, 551, 553, 572, 573, 576, 578, 580, 581, 598, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 715, 743, 761, 788, 789, 807, 811, 832, 833, 839, 855, 862, 868, 888, 894, 896, 912, 924, 980, 983, 988, 1003, 1004, 1046, 1067, 1088, 1102, 1166, 1184, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1209, 1211, 1212, 1319], "beta": 2, "cfg": [3, 5, 18, 159], "previous": [3, 4], "save": [3, 4, 7, 193, 213, 240, 277, 308, 399, 408, 426, 430, 444, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 752, 753, 755, 756, 757, 798, 799, 807, 811, 823, 850, 859, 877, 924, 1020, 1042, 1046, 1060], "option": [3, 4, 5, 6, 7, 31, 35, 36, 37, 54, 70, 120, 122, 123, 124, 125, 126, 128, 132, 135, 136, 137, 139, 140, 142, 147, 148, 149, 150, 153, 154, 155, 193, 208, 213, 222, 255, 262, 266, 272, 276, 308, 398, 496, 564, 611, 613, 615, 617, 619, 621, 624, 626, 628, 642, 650, 676, 680, 720, 793, 801, 811, 823, 850, 858, 859, 868, 888, 896, 924, 929, 1010, 1111, 1115, 1195, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1224, 1231, 1257, 1261, 1297, 1307, 1319], "from": [3, 4, 5, 6, 7, 11, 17, 29, 33, 34, 36, 37, 43, 47, 48, 49, 54, 62, 83, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 165, 171, 172, 177, 179, 184, 191, 193, 196, 210, 211, 212, 213, 214, 222, 231, 235, 240, 241, 243, 244, 246, 247, 255, 264, 270, 272, 273, 275, 276, 277, 283, 308, 311, 357, 391, 392, 393, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 451, 453, 456, 466, 468, 479, 496, 515, 528, 541, 553, 564, 582, 583, 585, 590, 591, 594, 598, 600, 610, 612, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 632, 645, 657, 658, 661, 662, 663, 673, 680, 686, 687, 688, 689, 690, 691, 692, 693, 694, 698, 718, 731, 732, 735, 736, 751, 752, 753, 754, 755, 756, 757, 771, 787, 797, 798, 799, 807, 810, 811, 829, 836, 837, 838, 843, 850, 853, 858, 859, 868, 875, 877, 879, 880, 888, 894, 896, 901, 902, 924, 929, 969, 1004, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1068, 1070, 1075, 1111, 1115, 1132, 1145, 1158, 1175, 1176, 1177, 1180, 1184, 1196, 1208, 1238, 1239, 1242, 1243, 1244, 1254, 1261, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1279, 1296, 1310, 1319, 1327, 1328], "json": [3, 4, 6, 7, 40, 41, 129, 130, 136, 138, 308, 393, 468, 564, 567, 662, 663, 664, 703, 811, 823, 837, 881, 924, 928, 1243, 1244, 1245, 1285], "paramet": [3, 4, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 21, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 58, 60, 61, 62, 63, 66, 69, 70, 71, 72, 79, 83, 92, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 161, 162, 164, 165, 166, 169, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 208, 210, 211, 212, 213, 215, 216, 217, 219, 220, 222, 223, 224, 226, 227, 229, 230, 231, 233, 235, 236, 237, 238, 240, 241, 242, 243, 244, 246, 247, 248, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 286, 288, 291, 293, 294, 300, 302, 308, 316, 318, 319, 320, 321, 322, 323, 333, 340, 341, 344, 345, 352, 353, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 373, 374, 375, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 398, 400, 402, 403, 409, 426, 429, 430, 431, 433, 435, 436, 444, 447, 449, 450, 451, 452, 453, 454, 455, 456, 459, 460, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 485, 496, 498, 500, 505, 506, 507, 508, 509, 511, 514, 515, 516, 517, 518, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 548, 549, 550, 551, 552, 553, 564, 565, 569, 571, 574, 575, 576, 577, 578, 579, 584, 585, 589, 590, 591, 594, 595, 596, 598, 599, 601, 603, 604, 605, 606, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 638, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 668, 669, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 701, 702, 704, 705, 706, 708, 709, 710, 714, 715, 716, 717, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 807, 811, 827, 829, 830, 832, 833, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 858, 859, 862, 863, 864, 868, 869, 872, 873, 874, 875, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 906, 909, 911, 912, 918, 920, 924, 928, 929, 932, 933, 934, 935, 936, 945, 952, 953, 956, 957, 964, 965, 969, 970, 972, 973, 974, 975, 976, 977, 978, 981, 987, 988, 989, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1010, 1012, 1014, 1015, 1021, 1042, 1045, 1046, 1047, 1049, 1051, 1052, 1060, 1063, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1075, 1076, 1077, 1078, 1079, 1082, 1083, 1086, 1087, 1088, 1091, 1092, 1102, 1110, 1111, 1115, 1117, 1122, 1123, 1124, 1125, 1126, 1128, 1131, 1132, 1133, 1134, 1135, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1155, 1156, 1157, 1158, 1159, 1165, 1166, 1180, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1216, 1217, 1220, 1224, 1225, 1226, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1249, 1250, 1252, 1253, 1254, 1255, 1256, 1257, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1279, 1282, 1283, 1286, 1290, 1291, 1292, 1296, 1297, 1298, 1299, 1300, 1301, 1303, 1304, 1307, 1308, 1309, 1310, 1319, 1327], "produc": [3, 4, 150, 154, 212, 308, 341, 507, 508, 561, 773, 858, 863, 864, 924, 953, 1124, 1125], "load_from_fil": [3, 6, 7], "file": [3, 4, 6, 7, 32, 33, 34, 38, 39, 40, 41, 42, 43, 44, 45, 46, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 179, 308, 393, 468, 564, 567, 577, 579, 811, 837, 881, 924, 928, 1075, 1319], "path": [4, 7, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 118, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 308, 393, 564, 567, 634, 664, 811, 837, 881, 885, 924, 928, 1214, 1245, 1319, 1328], "load": [4, 6, 7, 111, 113, 122, 124, 125, 131, 135, 136, 153, 155, 308, 811, 823, 855, 862, 924, 928, 1328], "reset": [5, 159], "default": [5, 8, 10, 11, 15, 28, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 54, 60, 61, 62, 66, 69, 70, 71, 108, 110, 111, 112, 113, 114, 115, 120, 121, 123, 125, 126, 128, 129, 130, 131, 132, 134, 139, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 159, 171, 174, 177, 192, 193, 194, 195, 196, 197, 198, 210, 212, 213, 220, 222, 229, 231, 240, 241, 242, 243, 244, 250, 256, 258, 264, 266, 273, 275, 276, 278, 283, 293, 308, 318, 319, 321, 345, 352, 357, 370, 391, 398, 429, 430, 444, 449, 451, 452, 454, 455, 474, 514, 518, 528, 533, 534, 536, 539, 541, 543, 544, 552, 561, 564, 582, 583, 585, 591, 598, 601, 605, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 632, 635, 638, 647, 648, 657, 669, 673, 679, 680, 685, 686, 687, 688, 691, 693, 694, 696, 698, 720, 721, 724, 726, 730, 734, 735, 738, 739, 741, 752, 753, 754, 755, 756, 757, 760, 763, 767, 768, 769, 771, 783, 784, 787, 792, 793, 798, 799, 800, 802, 811, 832, 833, 836, 839, 841, 849, 850, 851, 852, 853, 854, 858, 859, 868, 877, 881, 883, 889, 894, 896, 897, 902, 911, 924, 933, 934, 957, 964, 969, 981, 988, 1004, 1005, 1010, 1045, 1046, 1060, 1066, 1068, 1069, 1071, 1072, 1086, 1131, 1135, 1145, 1150, 1151, 1156, 1158, 1165, 1175, 1176, 1180, 1184, 1186, 1190, 1208, 1216, 1220, 1228, 1229, 1230, 1238, 1241, 1250, 1254, 1260, 1261, 1266, 1267, 1268, 1269, 1272, 1274, 1275, 1277, 1279, 1307, 1308, 1319, 1328], "state": [5, 101, 743, 747, 823, 841, 843, 873, 885, 924], "note": [5, 11, 21, 36, 37, 47, 51, 52, 53, 54, 59, 61, 68, 69, 71, 84, 91, 92, 108, 109, 110, 112, 114, 115, 120, 122, 123, 124, 125, 129, 130, 132, 135, 136, 140, 143, 145, 148, 150, 154, 156, 159, 161, 164, 169, 171, 180, 193, 194, 196, 197, 198, 208, 209, 210, 212, 213, 216, 227, 230, 231, 240, 241, 242, 243, 250, 255, 263, 266, 267, 270, 271, 272, 276, 277, 281, 283, 284, 308, 352, 373, 383, 384, 396, 397, 403, 422, 423, 426, 430, 444, 453, 460, 466, 468, 474, 480, 489, 491, 495, 511, 514, 533, 539, 541, 553, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 596, 605, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 635, 642, 649, 657, 658, 659, 660, 661, 665, 666, 674, 675, 680, 686, 687, 688, 691, 692, 701, 706, 707, 716, 725, 727, 735, 743, 752, 753, 755, 756, 757, 761, 771, 784, 786, 787, 798, 799, 801, 802, 807, 811, 822, 827, 833, 836, 843, 844, 850, 851, 853, 854, 855, 859, 862, 875, 877, 883, 885, 887, 888, 893, 896, 899, 902, 903, 924, 964, 988, 997, 998, 1005, 1008, 1009, 1015, 1038, 1039, 1042, 1046, 1060, 1070, 1077, 1085, 1086, 1092, 1128, 1131, 1150, 1156, 1166, 1190, 1194, 1202, 1209, 1212, 1216, 1219, 1224, 1230, 1238, 1239, 1240, 1241, 1242, 1246, 1247, 1255, 1256, 1261, 1267, 1268, 1269, 1272, 1273, 1282, 1289, 1300, 1301, 1319, 1323, 1327], "method": [5, 32, 35, 36, 37, 38, 39, 51, 53, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 109, 118, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 140, 147, 150, 154, 159, 162, 171, 174, 179, 183, 186, 192, 194, 195, 196, 197, 202, 204, 210, 216, 217, 219, 224, 227, 233, 237, 241, 242, 243, 250, 257, 260, 273, 281, 288, 289, 294, 300, 308, 316, 319, 320, 323, 352, 373, 385, 386, 387, 388, 389, 393, 433, 436, 450, 451, 459, 466, 468, 471, 473, 479, 483, 487, 490, 495, 498, 507, 521, 533, 539, 548, 549, 550, 552, 553, 567, 569, 571, 573, 574, 576, 578, 580, 581, 584, 585, 586, 589, 595, 596, 599, 601, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 635, 651, 663, 667, 668, 669, 670, 673, 678, 679, 685, 687, 688, 689, 690, 695, 701, 705, 706, 709, 710, 716, 718, 723, 739, 774, 785, 803, 804, 806, 807, 811, 812, 813, 816, 817, 818, 819, 820, 823, 833, 836, 837, 839, 851, 852, 853, 854, 857, 863, 874, 883, 892, 894, 899, 906, 907, 912, 918, 924, 935, 936, 964, 981, 988, 999, 1000, 1001, 1002, 1005, 1049, 1052, 1075, 1076, 1091, 1097, 1103, 1124, 1138, 1150, 1156, 1165, 1166, 1185, 1186, 1195, 1201, 1211, 1213, 1216, 1232, 1244, 1248, 1249, 1250, 1251, 1254, 1259, 1260, 1266, 1276, 1282, 1291, 1292, 1302, 1309, 1311, 1313, 1315, 1319, 1320, 1324, 1325, 1326], "oper": [5, 37, 53, 62, 92, 97, 98, 105, 108, 110, 111, 112, 113, 114, 120, 122, 132, 162, 167, 179, 182, 185, 192, 195, 202, 203, 214, 216, 223, 227, 229, 230, 234, 238, 240, 243, 244, 250, 261, 267, 272, 275, 285, 286, 308, 316, 317, 320, 352, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 450, 451, 466, 468, 471, 473, 495, 498, 528, 529, 530, 531, 532, 533, 541, 548, 566, 569, 571, 572, 573, 574, 576, 578, 580, 581, 584, 585, 586, 589, 590, 595, 596, 603, 632, 635, 705, 706, 716, 723, 724, 726, 737, 738, 742, 758, 801, 811, 823, 831, 836, 843, 849, 852, 855, 858, 862, 868, 869, 883, 888, 904, 924, 928, 964, 991, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1075, 1145, 1146, 1147, 1148, 1149, 1150, 1188, 1208, 1216, 1295, 1299, 1300, 1301, 1309, 1319], "environ": [5, 31, 132, 139, 153, 156], "ani": [5, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 59, 60, 61, 69, 70, 72, 108, 109, 110, 111, 112, 113, 114, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 136, 137, 139, 140, 147, 149, 150, 152, 154, 159, 162, 169, 174, 179, 181, 182, 185, 208, 210, 211, 216, 220, 229, 230, 241, 242, 243, 255, 258, 262, 263, 266, 267, 270, 273, 275, 276, 284, 308, 316, 319, 320, 323, 345, 368, 390, 391, 430, 431, 450, 451, 461, 462, 466, 469, 471, 473, 476, 485, 498, 505, 511, 518, 548, 549, 551, 552, 553, 566, 569, 571, 573, 574, 576, 578, 580, 581, 584, 585, 589, 594, 596, 598, 605, 606, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 633, 648, 650, 673, 687, 688, 689, 690, 691, 693, 694, 696, 698, 705, 706, 709, 716, 723, 724, 725, 727, 728, 738, 739, 740, 771, 774, 788, 789, 801, 811, 832, 833, 839, 845, 846, 872, 888, 894, 896, 903, 924, 928, 929, 933, 936, 957, 983, 1003, 1004, 1046, 1047, 1075, 1078, 1082, 1088, 1100, 1114, 1122, 1128, 1135, 1165, 1166, 1184, 1190, 1191, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1209, 1210, 1213, 1229, 1231, 1254, 1272, 1274, 1275, 1277, 1279, 1291, 1299, 1300, 1301, 1319, 1327, 1328], "local": [5, 36, 122, 124, 135, 136, 139, 308, 444, 592, 593, 811, 980, 982, 1016, 1017, 1046, 1050, 1060, 1181, 1182, 1319], "non": [5, 34, 36, 37, 43, 54, 69, 70, 113, 141, 170, 194, 197, 211, 222, 240, 246, 247, 250, 272, 276, 281, 282, 308, 373, 379, 380, 398, 429, 480, 541, 551, 552, 553, 591, 605, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 651, 652, 658, 665, 701, 725, 727, 736, 737, 738, 740, 742, 746, 750, 757, 776, 778, 781, 788, 789, 790, 793, 795, 811, 835, 851, 854, 868, 877, 879, 880, 883, 896, 899, 900, 924, 928, 988, 1005, 1010, 1045, 1092, 1158, 1166, 1180, 1190, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1216, 1232, 1233, 1239, 1246, 1282, 1300, 1319], "env": [5, 155], "back": [5, 54, 179, 193, 196, 267, 308, 564, 590, 699, 811, 850, 853, 881, 924, 1075, 1280, 1301, 1319], "valu": [5, 11, 12, 13, 14, 18, 29, 31, 33, 34, 37, 40, 43, 47, 51, 53, 54, 62, 63, 66, 79, 80, 89, 92, 110, 111, 113, 114, 120, 121, 122, 123, 125, 134, 140, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 159, 161, 163, 164, 171, 174, 176, 179, 180, 181, 182, 186, 191, 193, 196, 198, 199, 204, 208, 210, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 227, 229, 231, 232, 233, 235, 240, 241, 242, 243, 244, 250, 251, 254, 256, 257, 258, 259, 262, 263, 267, 271, 272, 275, 276, 277, 278, 285, 289, 290, 292, 295, 296, 298, 299, 308, 315, 316, 317, 319, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 358, 359, 360, 362, 363, 364, 365, 366, 367, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 384, 390, 391, 394, 396, 397, 402, 406, 421, 427, 445, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 491, 492, 493, 494, 497, 498, 499, 501, 502, 503, 504, 507, 508, 509, 510, 513, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 528, 533, 535, 536, 537, 538, 541, 542, 543, 545, 547, 548, 551, 552, 553, 554, 555, 556, 568, 569, 570, 571, 572, 582, 583, 584, 585, 588, 590, 591, 594, 595, 598, 599, 601, 604, 605, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 635, 636, 639, 640, 641, 642, 644, 645, 646, 648, 649, 651, 652, 653, 654, 655, 657, 660, 661, 662, 663, 664, 666, 671, 672, 674, 675, 677, 680, 682, 683, 684, 692, 701, 703, 705, 707, 709, 710, 711, 712, 714, 715, 716, 717, 718, 719, 720, 723, 724, 725, 726, 727, 729, 733, 736, 738, 740, 742, 743, 744, 745, 746, 747, 748, 749, 750, 760, 761, 766, 767, 768, 769, 771, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 787, 788, 789, 794, 795, 801, 811, 826, 827, 836, 839, 844, 845, 846, 850, 853, 856, 857, 858, 859, 865, 866, 867, 868, 870, 871, 874, 875, 877, 881, 883, 884, 887, 889, 890, 893, 896, 897, 907, 908, 910, 913, 914, 916, 917, 924, 929, 931, 933, 934, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 948, 949, 950, 951, 953, 955, 956, 957, 958, 959, 960, 961, 962, 964, 965, 966, 967, 970, 971, 973, 974, 975, 976, 981, 985, 988, 989, 990, 992, 993, 994, 1003, 1004, 1005, 1006, 1008, 1009, 1014, 1018, 1037, 1043, 1061, 1067, 1068, 1069, 1070, 1071, 1072, 1075, 1076, 1077, 1078, 1081, 1082, 1083, 1085, 1086, 1087, 1088, 1089, 1091, 1092, 1094, 1096, 1097, 1098, 1100, 1101, 1103, 1104, 1105, 1106, 1107, 1108, 1112, 1116, 1117, 1118, 1119, 1120, 1121, 1124, 1125, 1126, 1127, 1130, 1132, 1133, 1134, 1135, 1136, 1137, 1139, 1140, 1141, 1142, 1143, 1145, 1150, 1152, 1153, 1154, 1155, 1159, 1160, 1165, 1166, 1167, 1168, 1170, 1171, 1173, 1175, 1176, 1177, 1179, 1180, 1183, 1184, 1185, 1186, 1190, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1208, 1209, 1210, 1211, 1212, 1213, 1216, 1217, 1221, 1222, 1223, 1224, 1226, 1229, 1230, 1232, 1233, 1234, 1235, 1236, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1247, 1252, 1253, 1255, 1256, 1258, 1261, 1263, 1264, 1265, 1273, 1282, 1285, 1289, 1290, 1291, 1292, 1293, 1294, 1300, 1301, 1302, 1305, 1307, 1309, 1310, 1319, 1328], "exampl": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 79, 83, 91, 92, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 129, 130, 131, 134, 135, 136, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 193, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 249, 250, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 308, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 376, 377, 378, 379, 380, 381, 382, 383, 384, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 416, 417, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 486, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 671, 672, 674, 675, 676, 677, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 807, 811, 823, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 883, 885, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 898, 899, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 924, 928, 931, 932, 933, 934, 935, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 982, 983, 984, 985, 986, 987, 988, 991, 992, 993, 994, 995, 996, 997, 998, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1089, 1091, 1092, 1093, 1094, 1095, 1096, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1214, 1215, 1216, 1218, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1245, 1246, 1247, 1252, 1253, 1255, 1256, 1257, 1258, 1261, 1263, 1264, 1265, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1285, 1286, 1288, 1289, 1290, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1310, 1319, 1327], "contain": [6, 34, 35, 36, 37, 43, 54, 59, 110, 113, 115, 122, 123, 124, 135, 136, 143, 144, 149, 152, 164, 174, 193, 196, 211, 227, 231, 270, 271, 276, 289, 308, 319, 321, 323, 345, 364, 365, 393, 485, 518, 552, 553, 648, 655, 657, 659, 660, 664, 683, 684, 701, 724, 725, 726, 727, 738, 742, 774, 811, 827, 837, 839, 850, 853, 873, 893, 896, 907, 924, 928, 929, 933, 934, 957, 1004, 1135, 1165, 1172, 1184, 1229, 1236, 1238, 1240, 1241, 1245, 1264, 1265, 1282, 1295, 1300, 1319], "save_to_fil": 6, "json_str": [6, 129, 130], "written": [7, 32, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 308, 564, 881, 924], "leav": [7, 222, 308, 541, 868, 924], "directli": [7, 31, 49, 61, 122, 150, 154, 159, 243, 308, 452, 454, 455, 605, 787, 811, 833, 924, 981, 1069, 1071, 1072, 1190, 1319, 1328], "ascii": [8, 21, 650, 661, 665, 666, 668, 676, 678, 680, 692, 701, 1231, 1242, 1246, 1247, 1249, 1257, 1259, 1261, 1273, 1282], "charact": [8, 10, 13, 21, 27, 28, 29, 34, 35, 43, 119, 120, 121, 123, 134, 308, 426, 656, 658, 661, 665, 666, 668, 669, 670, 671, 672, 674, 675, 678, 679, 680, 681, 682, 685, 686, 687, 688, 689, 690, 692, 701, 873, 924, 929, 1042, 1237, 1239, 1242, 1246, 1247, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1259, 1260, 1261, 1262, 1263, 1266, 1267, 1268, 1269, 1273, 1282], "displai": [8, 11, 12, 13, 14, 18, 20, 24, 26, 37, 171, 191, 308, 836, 924], "tabl": [8, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 35, 36, 37, 48, 49, 50, 52, 108, 115, 124, 125, 135, 136, 212, 231, 255, 261, 267, 275, 276, 308, 858, 888, 896, 924, 1327], "outlin": 8, "fals": [8, 9, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 34, 36, 37, 38, 40, 42, 43, 44, 45, 46, 54, 60, 61, 62, 109, 110, 111, 113, 114, 115, 120, 121, 122, 125, 126, 128, 130, 131, 132, 134, 137, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 161, 164, 165, 166, 167, 171, 176, 185, 190, 191, 192, 193, 194, 195, 196, 197, 201, 203, 205, 206, 207, 210, 212, 213, 214, 219, 220, 226, 227, 229, 231, 232, 240, 241, 242, 243, 244, 248, 252, 254, 255, 258, 262, 264, 266, 267, 271, 272, 273, 276, 277, 279, 281, 290, 292, 295, 296, 298, 301, 308, 319, 320, 321, 323, 333, 336, 337, 340, 344, 345, 353, 358, 361, 364, 365, 366, 367, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 398, 412, 429, 431, 444, 449, 450, 451, 452, 453, 454, 455, 473, 476, 480, 481, 482, 484, 485, 486, 488, 489, 491, 492, 493, 494, 496, 498, 501, 502, 506, 511, 514, 516, 518, 528, 535, 539, 542, 548, 549, 551, 553, 557, 560, 562, 565, 584, 585, 587, 589, 592, 593, 598, 601, 610, 611, 612, 613, 615, 617, 619, 621, 623, 624, 626, 628, 632, 634, 637, 642, 644, 645, 648, 649, 650, 652, 655, 660, 662, 673, 674, 675, 676, 681, 682, 684, 691, 693, 694, 696, 714, 715, 717, 720, 723, 724, 725, 726, 727, 730, 733, 734, 735, 738, 739, 742, 743, 747, 752, 753, 754, 755, 756, 767, 768, 771, 784, 787, 793, 798, 799, 801, 802, 811, 827, 829, 830, 831, 832, 833, 836, 841, 843, 849, 850, 851, 852, 853, 854, 858, 859, 861, 863, 864, 873, 877, 882, 885, 887, 888, 893, 894, 896, 899, 908, 910, 913, 914, 916, 919, 924, 928, 929, 933, 934, 945, 948, 949, 952, 956, 957, 965, 970, 972, 973, 975, 976, 978, 980, 983, 986, 987, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1010, 1024, 1045, 1047, 1060, 1066, 1067, 1069, 1070, 1071, 1072, 1079, 1080, 1084, 1085, 1092, 1093, 1094, 1096, 1098, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1112, 1115, 1118, 1119, 1123, 1128, 1131, 1133, 1135, 1145, 1152, 1156, 1159, 1172, 1178, 1181, 1182, 1184, 1186, 1187, 1188, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1208, 1211, 1214, 1219, 1224, 1226, 1229, 1230, 1231, 1233, 1236, 1241, 1243, 1254, 1255, 1256, 1257, 1262, 1263, 1265, 1272, 1274, 1275, 1277, 1296, 1300, 1301, 1304, 1307, 1309, 1310, 1319, 1327], "revert": [8, 10, 11], "utf8_full_condens": [8, 21, 115], "format": [8, 12, 16, 17, 21, 33, 34, 37, 38, 39, 43, 118, 120, 121, 122, 126, 128, 134, 140, 178, 191, 210, 222, 242, 243, 263, 306, 308, 430, 433, 436, 564, 565, 691, 693, 694, 698, 757, 841, 842, 868, 881, 924, 1049, 1052, 1272, 1274, 1275, 1279, 1318], "style": [8, 21, 37, 122, 231, 308], "abc": [8, 17, 19, 20, 21, 22, 23, 24, 25, 26, 316, 658, 674, 687, 811, 929, 1239, 1255, 1256], "xyz": [8, 17, 19, 20, 21, 22, 23, 24, 25, 26, 316, 652, 658, 811, 1233, 1239, 1297, 1319], "f64": [8, 10, 11, 12, 16, 19, 20, 22, 23, 24, 25, 26, 28, 47, 54, 56, 58, 62, 79, 109, 111, 129, 140, 147, 150, 165, 166, 167, 169, 171, 172, 175, 180, 181, 185, 190, 191, 192, 193, 203, 204, 212, 213, 218, 219, 220, 221, 225, 231, 232, 233, 253, 254, 256, 258, 270, 278, 281, 286, 290, 292, 295, 296, 297, 298, 300, 301, 308, 315, 318, 325, 326, 327, 328, 329, 330, 348, 354, 359, 368, 371, 372, 376, 377, 378, 391, 392, 396, 397, 431, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 461, 465, 466, 471, 473, 479, 489, 491, 492, 493, 495, 496, 498, 511, 523, 524, 536, 543, 544, 545, 546, 548, 554, 555, 556, 568, 571, 573, 582, 583, 584, 585, 591, 595, 598, 599, 600, 601, 605, 612, 613, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 640, 641, 642, 646, 647, 711, 712, 716, 721, 731, 732, 736, 737, 739, 741, 758, 759, 774, 777, 778, 779, 792, 800, 807, 811, 829, 830, 836, 838, 844, 845, 849, 850, 857, 858, 859, 866, 867, 874, 887, 889, 897, 899, 901, 904, 908, 910, 913, 914, 915, 916, 918, 919, 924, 929, 937, 938, 939, 940, 941, 942, 960, 966, 971, 984, 985, 992, 993, 994, 1004, 1005, 1008, 1009, 1047, 1069, 1070, 1071, 1072, 1073, 1077, 1081, 1088, 1091, 1128, 1140, 1141, 1153, 1160, 1161, 1162, 1163, 1180, 1184, 1186, 1190, 1196, 1198, 1199, 1201, 1202, 1203, 1205, 1206, 1207, 1222, 1223, 1227, 1293, 1294, 1306, 1319, 1328], "multi": [9, 37, 120, 121, 270, 308, 456, 657, 811, 1238], "automat": [9, 49, 52, 108, 110, 111, 112, 114, 115, 120, 121, 122, 123, 125, 129, 130, 134, 138, 150, 154, 156, 246, 255, 281, 308, 430, 444, 551, 552, 605, 686, 687, 688, 811, 879, 888, 899, 924, 928, 1046, 1060, 1165, 1190, 1267, 1268, 1269, 1319, 1327], "turn": [9, 43, 44, 45, 46, 60, 61, 120, 121, 134, 699, 832, 833, 841, 843, 863, 864, 873, 924, 1280], "struct": [9, 106, 115, 227, 246, 269, 274, 281, 308, 357, 391, 476, 541, 575, 577, 579, 598, 608, 609, 659, 662, 682, 683, 720, 743, 744, 746, 747, 748, 773, 811, 879, 895, 899, 912, 924, 969, 1004, 1158, 1184, 1193, 1240, 1243, 1263, 1264, 1319], "v": [9, 10, 42, 49, 50, 177, 308, 633, 725, 727, 811, 1210, 1319], "v2": [9, 126, 137], "out": [9, 15, 35, 43, 44, 45, 46, 115, 142, 240, 243, 308, 344, 362, 514, 516, 539, 649, 653, 660, 801, 877, 924, 956, 973, 1131, 1133, 1156, 1230, 1234, 1241], "separ": [10, 11, 25, 28, 33, 34, 43, 117, 119, 120, 121, 125, 134, 229, 231, 264, 272, 274, 308, 323, 342, 345, 512, 518, 553, 656, 738, 743, 744, 747, 748, 811, 895, 924, 954, 957, 1129, 1135, 1237, 1288, 1296, 1319], "set_thousands_separ": 10, "thousand": [10, 28], "group": [10, 28, 37, 42, 46, 47, 121, 165, 192, 193, 194, 195, 196, 197, 211, 227, 229, 231, 240, 243, 275, 277, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 308, 317, 367, 390, 458, 464, 469, 472, 511, 551, 553, 561, 563, 590, 601, 609, 610, 644, 645, 649, 657, 658, 659, 660, 674, 675, 715, 720, 774, 811, 829, 849, 850, 851, 852, 853, 854, 877, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 924, 928, 929, 1003, 1128, 1194, 1230, 1238, 1239, 1240, 1241, 1255, 1256, 1307, 1319], "9876": 10, "54321": 10, "1010101": 10, "123456": [10, 929], "78": 10, "tbl_cell_numeric_align": [10, 11, 28], "right": [10, 11, 16, 17, 19, 28, 37, 70, 120, 121, 143, 144, 145, 146, 193, 194, 196, 197, 212, 213, 240, 276, 308, 391, 452, 454, 455, 480, 529, 530, 531, 532, 598, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 633, 642, 678, 736, 752, 753, 755, 756, 798, 799, 811, 850, 851, 853, 854, 858, 859, 877, 896, 924, 1004, 1069, 1071, 1072, 1092, 1146, 1147, 1148, 1149, 1184, 1210, 1224, 1259, 1319], "thousands_separ": [10, 11, 28], "decimal_separ": [10, 28], "float_precis": [10, 11, 28, 34, 37, 43, 308, 924], "print": [10, 11, 12, 13, 14, 16, 17, 18, 20, 21, 26, 28, 29, 121, 142, 143, 145, 175, 191, 192, 211, 214, 265, 285, 308, 478, 565, 811, 832, 856, 924, 1100, 1298, 1319, 1328], "876": 10, "543": 10, "010": [10, 696, 1277], "101": [10, 28, 402, 696, 1277, 1328], "000": [10, 11, 28, 37, 308, 1328], "123": [10, 652, 658, 675, 701, 801, 929, 1233, 1239, 1282, 1297, 1319], "456": [10, 11, 402, 929, 1014, 1297, 1319], "780": 10, "precis": [11, 12, 34, 37, 43, 70, 122, 210, 242, 243, 263, 270, 308, 400, 695, 924, 929, 1012, 1276], "int": [11, 13, 14, 15, 18, 26, 27, 34, 35, 37, 42, 43, 46, 49, 52, 56, 63, 70, 111, 114, 117, 118, 120, 121, 122, 123, 124, 125, 126, 128, 129, 131, 132, 134, 135, 137, 138, 139, 140, 141, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 162, 164, 166, 171, 177, 180, 181, 183, 187, 189, 191, 198, 199, 200, 202, 203, 208, 210, 211, 213, 215, 216, 217, 219, 224, 226, 227, 237, 238, 241, 244, 249, 250, 251, 253, 256, 257, 259, 260, 265, 268, 271, 275, 278, 280, 283, 284, 291, 302, 308, 316, 340, 344, 352, 354, 357, 359, 360, 366, 367, 390, 394, 398, 452, 454, 455, 459, 460, 461, 467, 469, 470, 472, 474, 475, 476, 500, 506, 509, 514, 515, 516, 517, 528, 533, 534, 536, 538, 539, 540, 541, 543, 589, 591, 594, 595, 598, 601, 604, 606, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 638, 643, 647, 657, 661, 662, 663, 668, 671, 672, 673, 674, 678, 680, 682, 683, 692, 695, 696, 701, 708, 709, 710, 714, 715, 721, 723, 730, 739, 741, 751, 754, 757, 763, 765, 767, 768, 783, 784, 787, 788, 789, 792, 793, 796, 797, 800, 802, 811, 827, 830, 836, 843, 844, 845, 848, 855, 859, 862, 873, 883, 884, 886, 889, 891, 892, 893, 897, 898, 902, 903, 909, 920, 924, 943, 944, 952, 956, 964, 966, 969, 971, 977, 978, 986, 987, 1003, 1006, 1007, 1010, 1068, 1069, 1071, 1072, 1076, 1077, 1078, 1082, 1083, 1086, 1087, 1088, 1114, 1116, 1117, 1123, 1124, 1126, 1131, 1132, 1133, 1134, 1145, 1150, 1151, 1153, 1155, 1156, 1157, 1158, 1160, 1172, 1173, 1175, 1176, 1177, 1179, 1180, 1183, 1184, 1186, 1191, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1213, 1216, 1217, 1220, 1225, 1228, 1238, 1242, 1243, 1244, 1249, 1252, 1253, 1254, 1255, 1259, 1261, 1263, 1264, 1273, 1276, 1277, 1282, 1289, 1290, 1291, 1292, 1298, 1303, 1308, 1319, 1327, 1328], "control": [11, 12, 37, 52, 61, 62, 125, 148, 150, 255, 308, 605, 811, 833, 841, 888, 924, 1190, 1319], "number": [11, 12, 13, 14, 15, 18, 26, 34, 35, 37, 42, 43, 46, 53, 54, 68, 69, 70, 84, 92, 102, 108, 110, 111, 112, 114, 117, 120, 121, 122, 123, 125, 129, 130, 131, 132, 134, 137, 138, 139, 141, 148, 150, 153, 155, 156, 157, 164, 166, 170, 177, 178, 180, 181, 191, 199, 210, 211, 214, 215, 226, 227, 244, 250, 251, 256, 259, 271, 275, 278, 289, 291, 293, 302, 308, 334, 350, 352, 357, 360, 366, 367, 379, 390, 391, 394, 398, 401, 410, 413, 416, 419, 421, 431, 445, 446, 448, 452, 453, 454, 455, 459, 460, 461, 467, 475, 489, 491, 499, 500, 509, 517, 520, 521, 526, 528, 533, 536, 538, 541, 543, 590, 594, 598, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 636, 638, 647, 661, 662, 663, 665, 666, 667, 670, 674, 680, 682, 683, 692, 695, 708, 714, 715, 721, 735, 739, 740, 741, 757, 765, 770, 788, 789, 792, 796, 800, 811, 827, 830, 835, 842, 843, 844, 845, 855, 862, 873, 883, 884, 889, 891, 893, 897, 907, 909, 911, 920, 924, 962, 964, 969, 977, 987, 1003, 1004, 1006, 1010, 1013, 1022, 1025, 1031, 1035, 1037, 1047, 1061, 1062, 1064, 1068, 1069, 1070, 1071, 1072, 1076, 1077, 1078, 1087, 1099, 1116, 1117, 1126, 1134, 1137, 1138, 1143, 1145, 1150, 1155, 1158, 1172, 1173, 1184, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1206, 1207, 1208, 1216, 1217, 1220, 1228, 1242, 1243, 1244, 1246, 1247, 1248, 1251, 1255, 1261, 1263, 1264, 1273, 1276, 1290, 1303, 1308, 1319, 1328], "place": [11, 12, 34, 43, 164, 173, 179, 201, 202, 203, 231, 236, 238, 243, 251, 254, 271, 279, 308, 333, 345, 353, 366, 367, 518, 535, 636, 644, 645, 714, 715, 733, 811, 827, 884, 887, 893, 924, 935, 945, 957, 965, 1075, 1135, 1152, 1187, 1217, 1226, 1319], "float": [11, 12, 34, 37, 43, 73, 74, 120, 121, 125, 134, 140, 143, 144, 145, 146, 147, 150, 154, 161, 171, 177, 180, 213, 233, 244, 251, 300, 308, 340, 372, 391, 396, 397, 431, 449, 450, 451, 452, 454, 455, 460, 465, 466, 471, 473, 479, 482, 486, 489, 491, 492, 493, 498, 506, 528, 544, 548, 554, 568, 582, 583, 584, 585, 595, 598, 599, 611, 612, 613, 615, 617, 619, 621, 622, 624, 626, 628, 630, 632, 716, 785, 787, 811, 836, 844, 859, 874, 884, 885, 918, 924, 929, 952, 978, 985, 1004, 1005, 1007, 1008, 1009, 1027, 1028, 1047, 1066, 1068, 1069, 1071, 1072, 1077, 1081, 1088, 1099, 1115, 1123, 1124, 1145, 1161, 1175, 1176, 1183, 1184, 1185, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1206, 1208, 1212, 1213, 1224, 1228, 1289, 1300, 1308, 1319, 1328], "point": [11, 12, 37, 38, 43, 44, 45, 46, 60, 61, 70, 72, 73, 74, 132, 139, 140, 150, 154, 180, 193, 196, 214, 255, 275, 276, 308, 372, 390, 391, 396, 430, 431, 460, 465, 466, 476, 489, 491, 528, 553, 598, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 788, 789, 811, 832, 833, 844, 850, 853, 863, 864, 875, 888, 896, 924, 983, 985, 1003, 1004, 1008, 1046, 1047, 1077, 1081, 1088, 1099, 1145, 1184, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1300, 1319], "standard": [11, 37, 256, 266, 270, 308, 413, 454, 624, 625, 642, 647, 664, 792, 807, 811, 889, 924, 1025, 1071, 1224, 1228, 1245, 1319, 1328], "behaviour": [11, 54, 62, 174, 255, 308, 649, 657, 658, 660, 674, 675, 716, 811, 839, 888, 924, 1230, 1238, 1239, 1241, 1255, 1256], "when": [11, 15, 18, 20, 24, 34, 35, 37, 42, 43, 46, 52, 53, 69, 83, 91, 92, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 120, 121, 122, 123, 125, 126, 128, 131, 132, 134, 135, 137, 138, 140, 143, 144, 145, 146, 150, 154, 162, 164, 171, 175, 177, 179, 181, 185, 193, 194, 196, 197, 212, 216, 230, 240, 241, 243, 246, 247, 250, 254, 264, 266, 270, 271, 273, 276, 282, 308, 352, 373, 393, 398, 452, 454, 455, 461, 533, 541, 552, 562, 594, 605, 635, 644, 645, 650, 661, 665, 666, 676, 680, 686, 687, 688, 691, 692, 733, 735, 743, 747, 761, 811, 827, 836, 837, 845, 850, 851, 853, 854, 858, 863, 864, 877, 879, 880, 883, 887, 893, 894, 896, 900, 924, 964, 988, 1005, 1010, 1068, 1069, 1071, 1072, 1075, 1078, 1150, 1165, 1190, 1209, 1212, 1216, 1231, 1242, 1246, 1247, 1257, 1261, 1267, 1268, 1269, 1272, 1273, 1296, 1300, 1319], "larger": [11, 43, 44, 45, 46, 60, 61, 466, 739, 811, 832, 833, 924], "should": [11, 35, 37, 43, 44, 45, 46, 62, 108, 110, 112, 114, 124, 125, 129, 130, 132, 134, 138, 140, 147, 148, 150, 154, 164, 172, 210, 213, 216, 241, 242, 243, 254, 263, 264, 271, 274, 294, 308, 317, 366, 367, 370, 390, 393, 447, 453, 456, 489, 491, 511, 553, 564, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 633, 642, 645, 714, 715, 720, 733, 757, 759, 771, 774, 788, 789, 801, 811, 827, 837, 838, 843, 858, 859, 864, 881, 887, 893, 895, 924, 929, 981, 1003, 1063, 1070, 1128, 1166, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1210, 1224, 1299, 1307, 1319], "ensur": [11, 37, 123, 149, 150, 152, 154, 192, 195, 229, 241, 266, 308, 480, 551, 811, 849, 852, 863, 864, 924, 928, 929, 1300, 1319], "awar": [11, 122, 210, 242, 243, 263, 308, 453, 650, 676, 811, 843, 924, 1070, 1231, 1257, 1275, 1319], "both": [11, 26, 34, 43, 53, 91, 92, 122, 193, 194, 196, 197, 212, 213, 223, 240, 241, 267, 276, 308, 322, 373, 391, 456, 480, 598, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 680, 752, 753, 755, 756, 798, 799, 807, 811, 822, 850, 851, 853, 854, 858, 859, 869, 877, 896, 924, 988, 1092, 1102, 1261, 1301, 1319], "limit": [11, 12, 46, 122, 123, 134, 156, 181, 308, 360, 374, 375, 461, 467, 811, 845, 855, 924, 989, 990, 1078, 1319], "represent": [11, 40, 41, 68, 69, 71, 84, 115, 265, 308, 370, 401, 406, 410, 413, 414, 416, 417, 419, 421, 424, 427, 428, 431, 445, 446, 448, 713, 811, 841, 861, 924, 981, 982, 1013, 1018, 1022, 1024, 1025, 1029, 1031, 1032, 1035, 1037, 1040, 1043, 1044, 1047, 1061, 1062, 1064, 1298, 1302, 1319], "look": [11, 193, 308, 361, 541, 551, 811, 850, 924, 972], "appli": [11, 21, 34, 37, 43, 47, 62, 122, 134, 147, 150, 154, 171, 185, 216, 230, 255, 294, 308, 333, 401, 404, 405, 406, 410, 412, 413, 414, 416, 417, 419, 421, 424, 427, 428, 431, 434, 445, 446, 448, 454, 455, 549, 551, 553, 594, 611, 613, 614, 615, 616, 619, 620, 626, 627, 674, 675, 691, 693, 694, 698, 733, 743, 744, 747, 748, 761, 772, 773, 774, 786, 801, 811, 836, 855, 862, 863, 864, 872, 888, 912, 924, 988, 1013, 1016, 1017, 1018, 1022, 1024, 1025, 1029, 1031, 1032, 1035, 1037, 1040, 1043, 1044, 1047, 1050, 1061, 1062, 1064, 1071, 1072, 1166, 1195, 1197, 1198, 1200, 1204, 1255, 1256, 1272, 1274, 1275, 1279, 1319], "float64": [11, 34, 37, 43, 111, 120, 129, 147, 150, 175, 177, 185, 245, 270, 281, 308, 325, 326, 327, 328, 329, 330, 368, 376, 377, 378, 392, 431, 453, 456, 489, 491, 600, 640, 641, 711, 712, 759, 784, 787, 802, 811, 840, 878, 899, 924, 929, 1047, 1070, 1301, 1306, 1319], "dtype": [11, 37, 53, 57, 63, 69, 83, 91, 92, 108, 110, 112, 114, 115, 120, 121, 122, 123, 125, 129, 130, 131, 134, 147, 148, 149, 150, 154, 161, 165, 193, 194, 196, 197, 213, 240, 265, 266, 267, 270, 275, 284, 308, 323, 368, 369, 383, 384, 447, 456, 469, 505, 514, 539, 547, 549, 551, 552, 553, 603, 604, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 637, 662, 663, 691, 707, 709, 713, 719, 728, 730, 759, 763, 767, 768, 770, 771, 772, 773, 774, 784, 787, 793, 802, 811, 829, 850, 851, 853, 854, 859, 877, 903, 924, 929, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 978, 979, 980, 982, 987, 997, 998, 1005, 1006, 1063, 1067, 1068, 1093, 1095, 1099, 1102, 1109, 1111, 1113, 1118, 1119, 1122, 1131, 1157, 1164, 1165, 1166, 1192, 1211, 1218, 1243, 1244, 1272, 1289, 1298, 1300, 1301, 1302, 1306, 1319, 1328], "doe": [11, 34, 36, 43, 54, 62, 102, 108, 110, 111, 112, 114, 115, 120, 121, 122, 123, 124, 125, 129, 130, 134, 135, 138, 140, 167, 179, 193, 198, 211, 212, 241, 242, 243, 273, 281, 284, 308, 311, 447, 466, 474, 541, 552, 687, 688, 718, 807, 811, 831, 836, 843, 850, 853, 858, 864, 894, 899, 903, 924, 991, 1063, 1075, 1085, 1086, 1165, 1219, 1309, 1319, 1323], "cover": 11, "nativ": [11, 35, 120, 122, 125, 126, 128, 132, 210, 216, 242, 243, 263, 294, 308, 553, 774, 811, 817, 888, 912, 924, 1166, 1319, 1328], "level": [11, 37, 42, 46, 134, 137, 138, 139, 150, 185, 216, 227, 308, 462, 811, 823, 855, 862, 924], "larg": [11, 12, 15, 54, 122, 125, 131], "maximum": [11, 27, 34, 43, 70, 111, 114, 120, 121, 122, 125, 129, 131, 134, 138, 140, 148, 149, 150, 152, 154, 191, 193, 217, 218, 308, 338, 503, 554, 582, 592, 601, 661, 662, 663, 666, 680, 692, 775, 776, 811, 850, 865, 924, 950, 1026, 1120, 1167, 1175, 1181, 1186, 1242, 1243, 1244, 1247, 1261, 1273, 1319], "import": [11, 17, 29, 32, 34, 36, 37, 38, 39, 42, 54, 69, 108, 109, 112, 113, 120, 122, 123, 129, 130, 134, 140, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 165, 171, 172, 174, 191, 193, 211, 213, 222, 229, 231, 255, 264, 266, 270, 275, 277, 308, 311, 392, 393, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 416, 417, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 453, 462, 564, 612, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 731, 732, 735, 751, 752, 753, 754, 755, 756, 757, 798, 799, 807, 811, 823, 829, 833, 836, 837, 838, 839, 850, 859, 864, 868, 881, 924, 992, 994, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1070, 1096, 1101, 1105, 1106, 1111, 1196, 1222, 1293, 1319, 1323, 1328], "pi": [11, 392, 811, 992, 994, 1222, 1293, 1319], "e": [11, 32, 34, 36, 38, 39, 42, 43, 109, 120, 126, 128, 137, 140, 152, 191, 199, 209, 236, 259, 261, 266, 275, 308, 316, 323, 393, 449, 453, 456, 480, 544, 553, 558, 559, 561, 562, 563, 565, 566, 637, 642, 660, 687, 688, 759, 774, 801, 811, 837, 861, 875, 924, 929, 1066, 1067, 1070, 1092, 1211, 1224, 1241, 1319, 1328], "const": 11, "15": [11, 37, 142, 171, 193, 203, 216, 240, 308, 390, 394, 423, 430, 444, 453, 594, 610, 626, 663, 744, 754, 797, 798, 811, 836, 850, 877, 924, 1003, 1006, 1046, 1060, 1070, 1244, 1319], "141592653589793": 11, "718281828459045": [11, 449, 544, 811, 1066, 1161, 1319], "fix": [11, 63, 72, 125, 148, 447, 611, 612, 613, 615, 617, 619, 621, 624, 626, 628, 757, 811, 1063, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1319], "align": [11, 16, 17, 37, 54, 62, 308], "numer": [11, 17, 34, 37, 43, 124, 135, 165, 172, 213, 222, 231, 267, 275, 308, 316, 373, 466, 480, 546, 569, 571, 595, 604, 637, 659, 701, 705, 716, 811, 823, 829, 838, 859, 868, 924, 929, 988, 1005, 1067, 1092, 1109, 1211, 1218, 1240, 1282, 1300, 1319, 1328], "column": [11, 17, 18, 19, 22, 23, 25, 36, 37, 40, 53, 54, 55, 62, 69, 83, 92, 94, 96, 108, 110, 111, 112, 113, 114, 115, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 143, 144, 145, 146, 150, 164, 165, 169, 170, 172, 173, 174, 175, 178, 182, 183, 184, 188, 189, 191, 192, 193, 194, 195, 196, 197, 201, 202, 203, 208, 209, 210, 212, 213, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 240, 241, 242, 243, 245, 246, 247, 248, 254, 256, 257, 258, 262, 264, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 281, 282, 283, 284, 286, 293, 308, 318, 319, 321, 333, 342, 351, 353, 356, 367, 373, 379, 380, 391, 401, 402, 404, 405, 406, 410, 412, 413, 414, 416, 417, 419, 421, 424, 427, 428, 431, 433, 434, 436, 445, 446, 448, 453, 456, 458, 462, 464, 476, 480, 495, 499, 505, 512, 514, 535, 539, 540, 541, 552, 553, 559, 561, 563, 564, 573, 576, 578, 580, 581, 590, 596, 598, 602, 604, 606, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 637, 644, 645, 648, 656, 660, 661, 682, 683, 691, 692, 693, 694, 695, 696, 698, 703, 706, 715, 722, 724, 725, 726, 727, 729, 730, 731, 732, 733, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 759, 760, 761, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 807, 811, 827, 829, 835, 838, 839, 840, 842, 846, 849, 850, 851, 852, 853, 854, 858, 859, 864, 865, 866, 867, 868, 870, 871, 872, 874, 875, 877, 878, 879, 880, 881, 882, 887, 889, 890, 893, 894, 895, 896, 897, 899, 900, 901, 902, 903, 904, 911, 912, 924, 929, 933, 934, 954, 963, 965, 968, 980, 982, 988, 1004, 1013, 1016, 1017, 1018, 1022, 1024, 1025, 1029, 1031, 1032, 1035, 1037, 1040, 1043, 1044, 1047, 1049, 1050, 1052, 1061, 1062, 1064, 1070, 1074, 1085, 1088, 1122, 1129, 1131, 1152, 1157, 1184, 1191, 1194, 1218, 1229, 1237, 1241, 1263, 1264, 1272, 1274, 1275, 1276, 1277, 1279, 1285, 1288, 1296, 1297, 1319, 1328], "order": [11, 37, 43, 44, 45, 46, 47, 49, 54, 60, 66, 111, 122, 141, 143, 144, 164, 174, 182, 192, 193, 194, 195, 196, 197, 212, 229, 230, 231, 240, 242, 244, 248, 254, 266, 271, 273, 277, 308, 333, 353, 358, 366, 367, 370, 396, 397, 462, 510, 528, 535, 542, 601, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 632, 633, 634, 644, 645, 677, 687, 688, 689, 690, 704, 714, 715, 717, 718, 720, 733, 801, 811, 822, 827, 839, 846, 849, 850, 851, 852, 853, 854, 858, 868, 877, 882, 887, 888, 893, 894, 924, 945, 965, 970, 981, 983, 1008, 1009, 1079, 1110, 1127, 1145, 1152, 1159, 1186, 1192, 1208, 1210, 1214, 1226, 1258, 1286, 1304, 1305, 1307, 1319, 1328], "cleanli": [11, 191, 308], "line": [11, 21, 37, 120, 121, 125, 134, 191, 205, 207, 308, 311, 657, 1238], "up": [11, 37, 83, 123, 210, 213, 242, 243, 263, 308, 323, 372, 553, 661, 692, 811, 858, 859, 864, 924, 929, 985, 1242, 1273, 1319], "xx": [11, 55, 57, 154, 171, 255, 308, 836, 924, 929], "yy": [11, 55, 57, 154, 171, 255, 308, 836, 924, 929], "11111111": 11, "44444444444": 11, "100000": [11, 28], "987654321": 11, "23456789": 11, "11": [11, 17, 42, 46, 142, 150, 163, 171, 213, 240, 308, 318, 422, 423, 426, 430, 444, 468, 479, 515, 567, 591, 601, 610, 612, 626, 643, 723, 794, 799, 811, 826, 832, 833, 836, 855, 862, 873, 877, 891, 924, 929, 1042, 1046, 1060, 1166, 1196, 1319], "111": 11, "100": [11, 18, 28, 37, 111, 114, 120, 121, 122, 125, 129, 131, 134, 138, 250, 308, 605, 635, 650, 662, 663, 676, 695, 756, 811, 883, 924, 1162, 1190, 1197, 1198, 1200, 1216, 1231, 1243, 1244, 1257, 1276, 1319, 1328], "988": 11, "44": [11, 223, 308, 395, 811, 869, 924], "444": 11, "23": [11, 150, 171, 193, 240, 270, 308, 402, 406, 410, 427, 430, 446, 610, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 754, 757, 797, 798, 799, 811, 836, 850, 877, 888, 924, 929, 1014, 1022, 1328], "789": [11, 929], "fmt": [12, 213, 308, 478, 762, 811, 856, 924], "floatfmt": 12, "mix": [12, 213, 308, 888, 924, 1005, 1275, 1319], "how": [12, 36, 37, 54, 62, 123, 132, 139, 174, 212, 213, 231, 275, 276, 308, 341, 370, 394, 429, 430, 444, 479, 507, 508, 509, 590, 604, 623, 691, 694, 735, 754, 801, 811, 839, 858, 896, 924, 928, 953, 981, 1006, 1045, 1046, 1060, 1124, 1125, 1126, 1202, 1272, 1275, 1319], "full": [12, 54, 62, 69, 111, 114, 120, 121, 122, 124, 129, 134, 135, 136, 138, 140, 193, 194, 196, 197, 240, 308, 661, 662, 663, 691, 692, 693, 694, 698, 850, 851, 853, 854, 863, 864, 877, 924, 929, 1242, 1243, 1244, 1272, 1273, 1274, 1275, 1279, 1319, 1328], "scientif": 12, "notat": [12, 37, 308], "small": [12, 123, 214, 308, 430, 843, 924, 1328], "2304980958725870923": 12, "1e6": 12, "1e": [12, 143, 144, 145, 146], "230498": 12, "0000e": 12, "230498095872587": 12, "1000000": [12, 1058], "00000001": [12, 723, 811], "plai": [13, 738], "sam": 13, "As": [13, 53, 91, 92, 108, 110, 111, 112, 114, 125, 129, 130, 138, 270, 308, 541, 801, 924], "time": [13, 36, 47, 52, 59, 60, 61, 69, 71, 124, 132, 134, 135, 171, 179, 193, 194, 196, 197, 213, 240, 277, 308, 340, 366, 367, 399, 400, 402, 403, 404, 408, 409, 426, 429, 430, 433, 435, 436, 444, 447, 453, 505, 506, 541, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 638, 691, 694, 698, 713, 714, 715, 737, 738, 752, 753, 754, 755, 756, 757, 763, 798, 799, 811, 832, 833, 836, 850, 851, 853, 854, 859, 873, 877, 924, 929, 952, 977, 1011, 1012, 1014, 1015, 1020, 1021, 1042, 1045, 1046, 1049, 1051, 1052, 1060, 1063, 1070, 1075, 1122, 1123, 1124, 1194, 1220, 1272, 1275, 1279, 1302, 1303, 1319, 1328], "goe": 13, "By": [13, 15, 31, 54, 120, 121, 134, 193, 212, 213, 240, 242, 250, 256, 276, 277, 278, 308, 352, 426, 430, 444, 533, 536, 543, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 635, 647, 721, 739, 741, 752, 753, 755, 756, 757, 771, 792, 798, 799, 800, 811, 832, 850, 858, 859, 877, 883, 889, 897, 924, 964, 1042, 1046, 1060, 1150, 1216, 1228, 1308, 1319], "begin": [13, 37, 308, 452, 454, 455, 657, 692, 811, 1069, 1071, 1072, 1238, 1273, 1319], "beauti": 13, "friendship": 13, "len_byt": [13, 666, 667, 1247, 1248], "len": [13, 37, 150, 154, 211, 231, 284, 289, 294, 308, 379, 521, 553, 561, 563, 740, 767, 811, 903, 907, 912, 924, 1138, 1319], "u32": [13, 47, 122, 163, 165, 170, 228, 283, 284, 289, 293, 299, 301, 308, 317, 324, 331, 332, 333, 334, 335, 338, 339, 341, 350, 379, 380, 476, 499, 503, 504, 508, 520, 526, 572, 588, 601, 609, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 633, 652, 660, 665, 666, 713, 718, 724, 729, 733, 734, 740, 742, 767, 770, 782, 811, 826, 829, 835, 871, 902, 903, 907, 911, 917, 919, 924, 945, 946, 947, 950, 951, 953, 962, 978, 982, 1088, 1120, 1121, 1125, 1137, 1143, 1186, 1194, 1210, 1233, 1241, 1246, 1247, 1302, 1305, 1307, 1319], "go": [13, 120, 121, 134, 266, 308, 655, 1236], "37": 13, "bea": 13, "48": [13, 150, 240, 308, 610, 811, 877, 924], "fmt_str_length": [13, 753, 756], "50": [13, 28, 37, 171, 179, 191, 308, 373, 430, 444, 753, 811, 836, 924, 988, 1005, 1060, 1319], "element": [14, 15, 26, 149, 152, 154, 164, 170, 208, 231, 241, 254, 256, 271, 278, 308, 323, 325, 326, 327, 328, 329, 330, 341, 342, 366, 367, 371, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 396, 397, 457, 458, 462, 474, 485, 499, 507, 508, 510, 511, 512, 515, 520, 521, 529, 530, 531, 532, 536, 543, 545, 546, 553, 590, 591, 601, 604, 612, 613, 615, 617, 619, 621, 623, 624, 626, 628, 633, 639, 640, 641, 645, 646, 647, 682, 683, 695, 711, 712, 714, 715, 721, 733, 739, 741, 788, 789, 792, 800, 811, 827, 835, 887, 889, 893, 897, 924, 936, 937, 938, 939, 940, 941, 942, 953, 954, 977, 984, 987, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1008, 1009, 1073, 1074, 1079, 1087, 1100, 1114, 1116, 1117, 1124, 1125, 1127, 1128, 1129, 1132, 1137, 1138, 1146, 1147, 1148, 1149, 1162, 1163, 1166, 1180, 1186, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1210, 1221, 1222, 1223, 1227, 1228, 1263, 1264, 1276, 1290, 1293, 1294, 1298, 1303, 1304, 1308, 1319], "empti": [14, 32, 34, 43, 98, 111, 120, 121, 125, 131, 134, 166, 167, 193, 206, 222, 308, 771, 790, 830, 831, 850, 868, 924, 929, 987, 991, 1095, 1319], "alwai": [14, 34, 36, 43, 47, 70, 72, 120, 192, 195, 212, 216, 255, 294, 308, 561, 691, 752, 801, 858, 864, 888, 924, 1166, 1272, 1319, 1327, 1328], "neg": [14, 68, 69, 70, 71, 120, 121, 126, 128, 132, 141, 193, 194, 196, 197, 199, 215, 240, 250, 251, 253, 259, 284, 308, 352, 533, 534, 594, 610, 635, 636, 643, 661, 680, 692, 811, 850, 851, 853, 854, 877, 883, 884, 886, 902, 903, 924, 964, 1087, 1117, 1150, 1151, 1216, 1217, 1225, 1242, 1261, 1273, 1290, 1319], "result": [14, 34, 40, 41, 42, 43, 44, 45, 46, 54, 62, 112, 113, 114, 122, 123, 124, 125, 134, 137, 139, 140, 154, 179, 193, 196, 198, 212, 213, 227, 231, 240, 243, 250, 251, 266, 267, 270, 277, 284, 286, 293, 308, 398, 430, 433, 436, 444, 452, 453, 454, 455, 459, 466, 474, 480, 496, 540, 541, 551, 553, 564, 590, 598, 605, 606, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 634, 635, 636, 681, 682, 694, 716, 742, 743, 744, 747, 748, 752, 753, 754, 755, 756, 757, 771, 773, 784, 787, 788, 789, 802, 811, 828, 832, 836, 850, 851, 853, 854, 858, 863, 864, 873, 877, 881, 883, 884, 903, 904, 911, 924, 935, 1004, 1046, 1049, 1052, 1060, 1069, 1071, 1072, 1075, 1076, 1086, 1092, 1115, 1157, 1166, 1184, 1190, 1191, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1214, 1216, 1217, 1262, 1263, 1275, 1299, 1300, 1301, 1319, 1327, 1328], "being": [14, 38, 43, 44, 45, 46, 60, 61, 70, 72, 120, 121, 122, 132, 134, 139, 140, 165, 178, 255, 264, 275, 276, 308, 323, 390, 391, 430, 476, 553, 598, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 735, 758, 788, 789, 811, 829, 832, 833, 842, 843, 888, 896, 924, 983, 1003, 1004, 1046, 1088, 1184, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1296, 1319, 1328], "A": [14, 34, 37, 43, 47, 50, 60, 61, 66, 72, 115, 120, 121, 122, 123, 134, 136, 141, 156, 185, 193, 212, 213, 218, 220, 225, 231, 258, 262, 275, 276, 277, 281, 282, 308, 315, 396, 397, 402, 433, 436, 450, 451, 459, 471, 473, 482, 486, 489, 491, 498, 541, 548, 551, 562, 575, 584, 585, 607, 612, 613, 615, 617, 619, 621, 624, 626, 628, 649, 650, 651, 652, 657, 658, 659, 660, 661, 664, 666, 674, 675, 676, 680, 692, 701, 737, 757, 758, 762, 811, 850, 858, 859, 875, 896, 899, 900, 924, 929, 1008, 1009, 1014, 1049, 1052, 1076, 1196, 1197, 1198, 1200, 1203, 1204, 1205, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1241, 1242, 1245, 1247, 1255, 1256, 1257, 1261, 1273, 1282, 1319, 1327], "content": [14, 638, 811, 1220, 1319], "final": [14, 37, 54, 139, 213, 308, 452, 454, 455, 811, 836, 843, 924, 928, 1069, 1071, 1072, 1319], "item": [14, 62, 121, 191, 241, 244, 308, 340, 344, 345, 394, 458, 506, 509, 516, 518, 528, 632, 683, 811, 952, 956, 957, 1006, 1074, 1123, 1126, 1133, 1135, 1145, 1208, 1264, 1319], "num": [14, 37, 269, 308, 480, 811, 1092, 1319], "fmt_table_cell_list_len": 14, "10": [14, 17, 18, 28, 32, 34, 36, 37, 38, 39, 42, 46, 47, 54, 62, 115, 123, 134, 142, 167, 171, 179, 190, 191, 193, 199, 201, 203, 204, 209, 213, 226, 230, 231, 232, 236, 238, 240, 246, 255, 259, 281, 286, 290, 292, 295, 296, 297, 298, 299, 300, 301, 308, 318, 322, 331, 332, 333, 335, 373, 381, 384, 394, 398, 399, 401, 402, 404, 405, 408, 410, 414, 416, 417, 419, 422, 423, 424, 429, 430, 431, 434, 444, 447, 453, 474, 475, 479, 485, 495, 500, 509, 515, 517, 524, 534, 536, 538, 543, 545, 561, 563, 573, 588, 591, 594, 605, 610, 643, 696, 708, 723, 735, 736, 743, 752, 754, 755, 758, 761, 763, 765, 771, 773, 796, 799, 811, 832, 833, 836, 850, 855, 857, 862, 872, 873, 877, 879, 890, 891, 899, 904, 908, 910, 913, 914, 915, 916, 917, 918, 919, 924, 929, 988, 1006, 1010, 1011, 1013, 1014, 1020, 1031, 1045, 1060, 1063, 1066, 1070, 1087, 1100, 1117, 1126, 1134, 1141, 1151, 1153, 1155, 1160, 1162, 1166, 1180, 1190, 1209, 1212, 1277, 1290, 1300, 1319, 1328], "size": [15, 42, 46, 120, 121, 122, 147, 148, 149, 150, 154, 156, 177, 275, 308, 606, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 730, 767, 768, 788, 789, 811, 832, 924, 1068, 1191, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1319, 1328], "overwrit": [15, 35, 36, 108, 110, 111, 112, 114, 120, 121, 129, 130, 134, 138, 161, 276, 308, 318, 811, 843, 924], "chunk": [15, 46, 117, 120, 121, 132, 134, 137, 138, 139, 150, 154, 179, 211, 226, 308, 322, 602, 811, 924, 935, 986, 1075, 1084, 1172, 1187, 1295, 1319], "stream": [15, 38, 39, 43, 44, 45, 46, 60, 61, 128, 164, 192, 195, 212, 271, 273, 308, 551, 811, 827, 832, 833, 841, 843, 849, 852, 858, 863, 864, 868, 873, 885, 887, 893, 894, 924], "engin": [15, 35, 122, 123, 125, 156, 192, 195, 212, 216, 273, 294, 308, 551, 811, 849, 852, 858, 863, 864, 868, 894, 912, 924, 1166, 1319], "determin": [15, 34, 37, 43, 54, 62, 89, 120, 121, 122, 125, 131, 132, 134, 139, 141, 162, 185, 193, 196, 210, 211, 216, 231, 240, 272, 277, 308, 370, 412, 429, 430, 444, 476, 541, 552, 561, 598, 604, 605, 613, 615, 617, 619, 621, 624, 626, 628, 642, 650, 661, 691, 692, 694, 695, 754, 784, 787, 802, 811, 850, 853, 877, 924, 981, 1024, 1045, 1046, 1060, 1088, 1158, 1165, 1184, 1190, 1224, 1231, 1272, 1275, 1276, 1319], "thread": [15, 34, 43, 61, 117, 120, 121, 123, 156, 157, 254, 308, 323, 366, 367, 511, 553, 645, 714, 715, 733, 811, 827, 833, 887, 893, 924, 965, 1128, 1152, 1226, 1319], "pool": [15, 61, 156, 157, 833, 924], "For": [15, 36, 37, 122, 123, 124, 125, 135, 136, 174, 179, 212, 213, 240, 294, 308, 311, 452, 454, 455, 466, 541, 553, 562, 603, 642, 649, 657, 658, 659, 660, 661, 692, 743, 747, 757, 761, 762, 807, 811, 839, 859, 877, 912, 924, 928, 1069, 1071, 1072, 1075, 1102, 1166, 1188, 1224, 1230, 1238, 1239, 1240, 1241, 1242, 1273, 1319, 1323], "some": [15, 31, 37, 53, 92, 111, 120, 121, 122, 125, 134, 161, 174, 243, 308, 393, 807, 811, 837, 839, 924, 1100, 1319, 1328], "dataset": [15, 42, 72, 120, 121, 125, 131, 134, 140, 212, 270, 308, 496, 811, 823, 858, 863, 864, 924, 1115, 1319], "esp": 15, "have": [15, 31, 37, 53, 54, 69, 92, 109, 118, 120, 121, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 150, 154, 179, 210, 212, 213, 234, 240, 242, 243, 263, 270, 284, 308, 390, 393, 452, 454, 455, 553, 562, 601, 605, 610, 659, 811, 837, 858, 868, 877, 902, 903, 924, 928, 929, 1003, 1005, 1069, 1071, 1072, 1075, 1085, 1186, 1190, 1275, 1319, 1328], "too": [15, 843, 924], "optimist": 15, "lead": [15, 42, 115, 140, 193, 194, 196, 197, 220, 240, 250, 258, 308, 352, 453, 469, 472, 533, 551, 553, 610, 634, 635, 669, 685, 686, 688, 709, 739, 811, 850, 851, 853, 854, 863, 864, 877, 883, 906, 912, 924, 964, 1070, 1150, 1166, 1214, 1216, 1250, 1266, 1267, 1269, 1319], "memori": [15, 46, 60, 61, 62, 108, 109, 112, 113, 114, 120, 121, 122, 125, 126, 132, 134, 137, 138, 139, 161, 179, 216, 242, 243, 252, 266, 294, 308, 590, 602, 637, 811, 832, 833, 924, 1075, 1166, 1187, 1218, 1219, 1300, 1319], "error": [15, 36, 61, 100, 103, 110, 111, 114, 120, 121, 134, 165, 231, 241, 270, 308, 318, 344, 345, 362, 368, 398, 495, 514, 516, 518, 539, 573, 649, 653, 657, 659, 660, 662, 664, 691, 693, 694, 698, 811, 829, 833, 906, 912, 924, 956, 957, 973, 978, 1010, 1131, 1133, 1135, 1156, 1230, 1234, 1238, 1240, 1241, 1243, 1245, 1272, 1274, 1275, 1279, 1319], "row": [15, 21, 26, 34, 35, 37, 40, 42, 43, 46, 54, 55, 57, 62, 99, 102, 107, 111, 112, 113, 114, 115, 120, 121, 122, 125, 126, 128, 129, 131, 132, 134, 137, 138, 139, 140, 143, 144, 150, 162, 164, 166, 174, 179, 182, 185, 187, 191, 192, 193, 195, 198, 199, 205, 207, 208, 210, 211, 212, 213, 214, 215, 216, 222, 227, 243, 244, 253, 259, 260, 263, 265, 270, 271, 273, 275, 276, 283, 284, 289, 291, 293, 294, 302, 308, 333, 334, 342, 357, 367, 458, 466, 470, 475, 500, 512, 541, 590, 591, 606, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 643, 645, 656, 662, 663, 708, 710, 715, 730, 733, 738, 740, 742, 747, 748, 761, 765, 767, 768, 770, 786, 788, 789, 796, 801, 811, 827, 830, 832, 839, 843, 846, 847, 848, 850, 855, 858, 859, 860, 862, 864, 868, 886, 891, 892, 893, 894, 896, 902, 903, 907, 909, 911, 912, 920, 924, 945, 954, 1074, 1075, 1083, 1087, 1117, 1129, 1180, 1191, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1225, 1237, 1243, 1244, 1290, 1292, 1319, 1328], "per": [15, 34, 37, 43, 125, 148, 150, 164, 191, 227, 228, 247, 254, 271, 282, 297, 299, 300, 308, 323, 344, 367, 511, 514, 516, 539, 551, 553, 573, 574, 576, 578, 580, 581, 645, 715, 720, 733, 811, 827, 880, 887, 893, 900, 915, 917, 918, 924, 928, 956, 1128, 1131, 1133, 1156, 1307, 1319], "everi": [15, 34, 43, 120, 121, 134, 187, 193, 196, 260, 263, 277, 308, 336, 337, 338, 339, 342, 344, 350, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 430, 444, 458, 470, 503, 504, 509, 512, 515, 516, 517, 526, 529, 534, 538, 609, 656, 710, 743, 744, 747, 748, 811, 843, 848, 850, 853, 892, 924, 948, 949, 950, 951, 954, 956, 962, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1046, 1060, 1074, 1083, 1085, 1120, 1121, 1126, 1129, 1132, 1133, 1134, 1143, 1146, 1151, 1155, 1194, 1237, 1292, 1319], "process": [15, 34, 43, 44, 45, 46, 60, 61, 120, 121, 122, 134, 156, 242, 308, 832, 833, 924], "liter": [16, 17, 21, 36, 122, 153, 154, 155, 246, 247, 250, 276, 281, 282, 308, 318, 361, 373, 402, 450, 451, 459, 466, 471, 473, 480, 498, 548, 552, 569, 571, 584, 585, 595, 605, 649, 652, 660, 674, 675, 705, 716, 725, 727, 730, 736, 737, 738, 746, 750, 751, 754, 767, 771, 776, 778, 781, 790, 793, 795, 797, 811, 845, 879, 880, 883, 896, 899, 900, 924, 929, 972, 988, 1014, 1076, 1092, 1190, 1209, 1212, 1216, 1230, 1233, 1241, 1255, 1256, 1319], "left": [16, 17, 37, 49, 54, 143, 144, 145, 146, 193, 194, 196, 197, 212, 213, 240, 276, 308, 391, 452, 454, 455, 479, 480, 598, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 633, 668, 713, 736, 743, 744, 747, 748, 752, 753, 755, 756, 761, 786, 798, 799, 801, 811, 850, 851, 853, 854, 858, 859, 877, 896, 924, 1004, 1069, 1071, 1072, 1092, 1184, 1210, 1249, 1302, 1319], "center": [16, 17, 37, 308, 452, 454, 455, 611, 612, 613, 615, 617, 619, 621, 624, 626, 628, 811, 1069, 1071, 1072, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1319], "cell": [16, 17, 37, 308], "valueerror": [16, 21], "recognis": [16, 17, 21], "column_abc": 16, "column_xyz": 16, "keyerror": 17, "datetim": [17, 34, 37, 43, 54, 115, 124, 125, 135, 150, 152, 165, 171, 191, 193, 194, 196, 197, 211, 213, 240, 255, 277, 308, 311, 340, 398, 399, 400, 401, 402, 403, 404, 406, 408, 409, 410, 412, 413, 414, 416, 417, 419, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 453, 506, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 691, 694, 713, 735, 751, 752, 753, 755, 756, 757, 763, 771, 798, 799, 811, 829, 836, 850, 851, 853, 854, 859, 877, 924, 929, 952, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1028, 1029, 1031, 1032, 1034, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1070, 1111, 1123, 1124, 1175, 1176, 1213, 1272, 1275, 1302, 1319], "date": [17, 37, 54, 69, 120, 121, 123, 125, 131, 134, 140, 165, 171, 191, 193, 194, 196, 197, 211, 213, 240, 255, 308, 311, 340, 398, 400, 401, 402, 403, 406, 409, 412, 413, 416, 421, 422, 423, 426, 427, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 453, 506, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 691, 693, 713, 735, 752, 753, 755, 756, 763, 771, 797, 811, 829, 836, 850, 851, 853, 854, 859, 877, 924, 929, 952, 1010, 1012, 1013, 1014, 1015, 1018, 1021, 1022, 1024, 1025, 1026, 1028, 1029, 1031, 1034, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1064, 1070, 1111, 1123, 1124, 1175, 1176, 1213, 1272, 1274, 1302, 1319], "333": [17, 631, 811, 1207, 1319], "mno": [17, 21], "2023": [17, 37, 115, 142, 211, 308, 402, 757, 771, 929, 1014], "29": [17, 142, 399, 422, 1011, 1038], "2001": [17, 400, 401, 406, 409, 412, 416, 421, 426, 427, 428, 430, 435, 444, 445, 446, 447, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 691, 811, 929, 1012, 1013, 1018, 1021, 1022, 1024, 1026, 1027, 1028, 1029, 1031, 1032, 1034, 1035, 1037, 1040, 1042, 1043, 1044, 1046, 1051, 1060, 1061, 1062, 1063, 1064, 1272], "null": [17, 34, 36, 43, 49, 54, 62, 69, 110, 111, 114, 120, 121, 130, 134, 138, 140, 147, 150, 154, 161, 164, 166, 170, 171, 174, 176, 181, 185, 186, 204, 212, 219, 220, 221, 228, 231, 233, 250, 251, 254, 256, 257, 258, 262, 267, 271, 274, 276, 278, 281, 289, 308, 319, 321, 322, 323, 333, 336, 337, 344, 345, 352, 353, 360, 362, 366, 367, 373, 379, 380, 381, 384, 394, 396, 397, 426, 429, 437, 438, 439, 440, 441, 442, 443, 451, 452, 453, 454, 455, 456, 459, 460, 461, 467, 479, 489, 491, 492, 493, 499, 501, 502, 509, 510, 513, 514, 516, 518, 519, 520, 529, 530, 531, 532, 533, 535, 539, 541, 551, 553, 572, 585, 586, 587, 588, 591, 602, 608, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 635, 636, 637, 639, 644, 645, 648, 649, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 664, 665, 666, 671, 672, 673, 680, 682, 683, 684, 691, 692, 694, 696, 701, 702, 703, 704, 713, 714, 715, 724, 725, 726, 727, 733, 736, 737, 738, 740, 742, 746, 754, 759, 770, 771, 776, 778, 781, 788, 789, 793, 795, 801, 811, 827, 830, 835, 836, 839, 845, 857, 858, 871, 881, 883, 884, 887, 893, 895, 896, 899, 901, 907, 924, 933, 934, 936, 945, 948, 949, 956, 957, 964, 965, 973, 987, 988, 1006, 1008, 1009, 1045, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1067, 1069, 1070, 1071, 1072, 1076, 1078, 1085, 1091, 1107, 1108, 1116, 1118, 1119, 1122, 1126, 1127, 1130, 1131, 1133, 1135, 1136, 1137, 1147, 1149, 1150, 1152, 1156, 1158, 1166, 1179, 1180, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1211, 1216, 1217, 1221, 1226, 1229, 1230, 1232, 1233, 1234, 1235, 1236, 1238, 1239, 1240, 1241, 1242, 1243, 1245, 1246, 1247, 1252, 1253, 1254, 1261, 1263, 1264, 1265, 1272, 1273, 1275, 1277, 1282, 1285, 1298, 1300, 1301, 1302, 1309, 1319, 1327, 1328], "07": [17, 120, 150, 171, 308, 398, 401, 402, 416, 429, 430, 444, 691, 751, 752, 754, 755, 763, 836, 924, 929, 1010, 1014, 1045, 1272], "05": [17, 140, 143, 144, 145, 146, 150, 165, 171, 277, 308, 398, 401, 402, 403, 404, 405, 410, 414, 416, 417, 419, 422, 423, 424, 429, 431, 433, 434, 436, 437, 735, 751, 752, 754, 755, 829, 836, 859, 924, 929, 1014, 1015, 1016, 1017, 1045, 1046, 1049, 1050, 1052, 1053, 1060], "visibl": [18, 177, 308, 1068, 1319], "eg": [18, 26, 37, 62, 123, 159, 308, 430, 691, 694, 716, 811, 1085, 1272, 1275, 1319], "low": [18, 122, 598, 811, 1184, 1319], "rang": [18, 37, 122, 123, 171, 177, 193, 211, 308, 324, 392, 398, 406, 421, 427, 428, 430, 444, 445, 479, 730, 735, 737, 751, 752, 753, 754, 755, 756, 767, 768, 797, 798, 799, 811, 836, 850, 924, 1005, 1010, 1018, 1037, 1043, 1044, 1046, 1060, 1061, 1068, 1180, 1319], "98": [18, 203, 308, 366, 469, 472, 644, 695, 714, 811, 1276], "99": [18, 37, 180, 181, 203, 206, 276, 308, 317, 366, 459, 461, 469, 472, 644, 714, 801, 811, 844, 845, 896, 924, 1066, 1076, 1319], "tbl_col": 18, "95": [18, 317, 811], "96": [18, 171, 308, 317, 811, 836, 924, 1115, 1319], "97": [18, 203, 308, 317, 811, 1115, 1319], "move": [19, 243, 308, 398, 452, 453, 454, 455, 613, 615, 619, 626, 811, 1010, 1069, 1070, 1071, 1072, 1197, 1198, 1200, 1204, 1319], "inlin": [19, 243, 308, 649, 657, 658, 660, 674, 675, 1230, 1238, 1239, 1241, 1255, 1256], "parenthes": 19, "inform": [20, 24, 35, 59, 124, 132, 135, 136, 139, 143, 145, 169, 171, 270, 308, 311, 496, 642, 649, 657, 658, 660, 674, 675, 811, 836, 873, 924, 928, 982, 1115, 1224, 1230, 1238, 1239, 1241, 1255, 1256, 1319, 1323], "below": [20, 36, 124, 125, 135, 136, 174, 231, 308, 461, 661, 692, 752, 753, 755, 756, 798, 799, 801, 807, 811, 839, 924, 1242, 1273, 1327], "ascii_ful": 21, "ascii_full_condens": 21, "ascii_no_bord": 21, "ascii_borders_onli": 21, "ascii_borders_only_condens": 21, "ascii_horizontal_onli": 21, "ascii_markdown": 21, "utf8_ful": [21, 54, 115], "utf8_no_bord": 21, "utf8_borders_onli": 21, "utf8_horizontal_onli": 21, "noth": [21, 657, 664, 1238, 1245], "rounded_corn": 21, "border": 21, "includ": [21, 31, 34, 36, 37, 43, 59, 113, 122, 124, 135, 136, 150, 151, 164, 171, 177, 229, 243, 270, 271, 272, 275, 276, 308, 367, 391, 431, 466, 476, 480, 598, 612, 613, 615, 617, 619, 621, 623, 624, 626, 628, 681, 682, 686, 687, 715, 735, 743, 747, 788, 789, 811, 827, 836, 893, 896, 924, 929, 1004, 1005, 1047, 1068, 1088, 1092, 1184, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1262, 1263, 1267, 1309, 1319], "divid": [21, 391, 430, 444, 452, 454, 455, 466, 496, 598, 811, 1004, 1046, 1060, 1069, 1071, 1072, 1115, 1184, 1319], "same": [21, 36, 37, 51, 53, 54, 60, 61, 62, 91, 92, 126, 134, 143, 144, 145, 146, 148, 159, 182, 192, 212, 216, 231, 242, 243, 254, 273, 281, 282, 286, 294, 308, 315, 322, 356, 396, 397, 462, 466, 468, 469, 472, 540, 557, 560, 590, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 645, 665, 704, 811, 832, 833, 846, 849, 863, 864, 887, 894, 899, 900, 904, 924, 931, 936, 968, 1004, 1008, 1009, 1014, 1157, 1166, 1184, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1246, 1299, 1310, 1319], "dens": [21, 191, 308, 601, 811, 1186, 1319], "space": [21, 193, 308, 850, 924], "horizont": [21, 62, 185, 201, 217, 218, 219, 220, 224, 225, 257, 258, 275, 308, 725, 727, 737, 738, 743, 744, 746, 747, 748, 750, 758, 761, 776, 778, 781, 786, 795], "markdown": 21, "compat": [21, 37, 42, 46, 308, 649, 651, 652, 657, 658, 659, 660, 674, 675, 924, 929, 1230, 1232, 1233, 1238, 1239, 1240, 1241, 1255, 1256], "utf8": [21, 120, 121, 134, 661, 680, 692, 1242, 1261, 1273], "No": [21, 699, 1280], "round": [21, 37, 56, 115, 122, 308, 372, 378, 465, 631, 711, 811, 985, 1081, 1207, 1319], "corner": [21, 37, 115, 308], "op": [21, 125, 154, 270, 308, 604, 811, 924, 1275, 1319], "The": [21, 35, 36, 37, 42, 46, 47, 51, 53, 54, 59, 60, 63, 68, 69, 71, 72, 79, 83, 84, 92, 108, 110, 111, 112, 114, 120, 121, 122, 123, 125, 129, 130, 131, 132, 134, 138, 139, 140, 143, 144, 145, 146, 150, 151, 152, 154, 156, 171, 173, 174, 175, 178, 179, 182, 191, 192, 193, 196, 198, 204, 210, 213, 216, 223, 229, 240, 241, 242, 243, 246, 247, 255, 266, 274, 277, 281, 282, 284, 285, 286, 294, 308, 318, 360, 361, 362, 363, 391, 396, 397, 398, 406, 421, 426, 427, 430, 433, 444, 445, 456, 459, 462, 466, 467, 474, 510, 514, 539, 551, 552, 553, 564, 590, 598, 601, 604, 605, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 639, 642, 648, 653, 654, 657, 661, 662, 663, 669, 671, 672, 674, 675, 679, 685, 686, 687, 688, 689, 690, 691, 692, 735, 759, 763, 771, 774, 788, 789, 790, 793, 801, 803, 804, 806, 807, 811, 812, 813, 816, 818, 819, 820, 836, 839, 842, 846, 849, 850, 853, 855, 857, 859, 862, 864, 869, 873, 877, 879, 880, 881, 888, 895, 899, 900, 903, 904, 912, 924, 928, 932, 935, 972, 973, 974, 987, 1004, 1005, 1008, 1009, 1010, 1018, 1037, 1042, 1043, 1046, 1049, 1060, 1061, 1075, 1076, 1079, 1086, 1127, 1131, 1165, 1166, 1184, 1186, 1190, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1221, 1224, 1229, 1234, 1235, 1242, 1243, 1244, 1250, 1252, 1253, 1255, 1256, 1260, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1299, 1311, 1313, 1315, 1319, 1320, 1324, 1325, 1326, 1328], "one": [21, 34, 35, 37, 43, 52, 54, 99, 108, 110, 111, 112, 113, 114, 120, 121, 125, 129, 130, 131, 134, 153, 154, 155, 159, 165, 181, 182, 191, 192, 193, 194, 196, 197, 210, 222, 231, 240, 241, 242, 248, 250, 266, 269, 287, 308, 317, 352, 391, 461, 462, 466, 469, 472, 533, 541, 546, 573, 574, 576, 578, 580, 581, 609, 610, 635, 644, 657, 658, 659, 676, 774, 791, 801, 807, 811, 829, 845, 846, 849, 850, 851, 853, 854, 868, 877, 882, 883, 901, 905, 924, 935, 964, 969, 1004, 1078, 1111, 1150, 1158, 1163, 1184, 1194, 1216, 1238, 1239, 1240, 1257, 1283, 1300, 1319, 1323], "more": [21, 37, 40, 42, 46, 52, 54, 62, 91, 92, 107, 108, 109, 110, 111, 112, 113, 114, 122, 123, 124, 125, 129, 130, 131, 132, 135, 136, 143, 145, 150, 154, 159, 169, 171, 182, 209, 210, 214, 216, 222, 227, 241, 242, 244, 255, 266, 270, 273, 294, 308, 311, 320, 323, 358, 462, 466, 496, 528, 542, 546, 551, 553, 589, 632, 642, 658, 665, 691, 693, 694, 717, 729, 740, 760, 766, 769, 777, 779, 782, 783, 791, 801, 811, 836, 868, 888, 894, 924, 928, 929, 936, 970, 982, 1005, 1111, 1115, 1145, 1159, 1166, 1208, 1224, 1239, 1246, 1272, 1274, 1275, 1304, 1319, 1323, 1328], "semigraph": 21, "box": [21, 216, 308], "draw": [21, 26, 150, 154, 1328], "found": [21, 34, 37, 43, 49, 94, 104, 106, 111, 115, 175, 255, 308, 633, 660, 664, 689, 690, 691, 694, 811, 888, 924, 1210, 1241, 1245, 1270, 1271, 1272, 1275, 1319, 1327], "unicod": [21, 661, 666, 680, 692, 1242, 1247, 1261, 1273], "block": [21, 61, 192, 195, 273, 308, 801, 833, 849, 852, 875, 894, 902, 903, 912, 924, 1209, 1212, 1319], "http": [21, 37, 38, 39, 109, 122, 123, 126, 128, 161, 169, 308, 657, 659, 885, 924, 1238, 1240], "en": [21, 37, 308], "wikipedia": 21, "org": [21, 38, 39, 109, 122, 123, 126, 128, 161, 169, 308, 885, 924], "wiki": 21, "drawing_charact": 21, "box_draw": 21, "tbl_format": 21, "tbl_hide_column_data_typ": 21, "tbl_hide_dataframe_shap": 21, "hide": [22, 23, 24, 25, 37, 308], "etc": [22, 36, 37, 120, 124, 125, 126, 128, 135, 136, 137, 308, 811, 928, 929, 1209, 1212, 1319], "between": [25, 62, 147, 148, 150, 154, 169, 233, 242, 300, 308, 345, 368, 394, 395, 480, 509, 518, 529, 530, 531, 532, 591, 598, 599, 621, 622, 648, 731, 732, 735, 739, 741, 785, 788, 789, 811, 874, 918, 924, 957, 978, 982, 1006, 1007, 1092, 1126, 1135, 1146, 1147, 1148, 1149, 1180, 1184, 1185, 1201, 1229, 1319], "set_tbl_column_data_type_inlin": 25, "max": [26, 37, 42, 46, 47, 171, 181, 192, 218, 231, 240, 308, 374, 381, 386, 461, 541, 551, 590, 601, 605, 610, 613, 614, 634, 683, 776, 791, 811, 836, 845, 849, 877, 924, 989, 995, 999, 1005, 1078, 1158, 1186, 1197, 1214, 1264, 1319], "tbl_row": [26, 171, 308, 836, 924], "width": [27, 37, 63, 120, 121, 134, 308, 311, 540, 924, 1157], "id": [27, 37, 62, 120, 136, 272, 284, 294, 308, 609, 674, 675, 718, 811, 903, 912, 924, 1194, 1305, 1319, 1328], "seq1": 27, "seq2": 27, "seq": 27, "atgataaaggag": 27, "gcaacgcatata": 27, "12": [27, 37, 54, 115, 120, 142, 150, 171, 193, 209, 213, 240, 251, 255, 277, 308, 318, 374, 375, 383, 399, 401, 402, 406, 416, 421, 422, 423, 426, 427, 428, 430, 444, 445, 446, 453, 479, 495, 515, 550, 591, 596, 600, 610, 626, 636, 637, 652, 668, 678, 695, 706, 744, 751, 752, 753, 754, 755, 756, 773, 797, 798, 799, 811, 836, 850, 855, 859, 862, 877, 884, 885, 891, 924, 929, 989, 990, 1011, 1013, 1014, 1031, 1037, 1046, 1060, 1070, 1166, 1206, 1217, 1233, 1249, 1259, 1276, 1319, 1328], "atg": 27, "ata": 27, "aag": 27, "gag": 27, "gca": 27, "acg": 27, "cat": [27, 53, 91, 92, 391, 598, 649, 652, 697, 700, 713, 738, 806, 811, 929, 1004, 1088, 1184, 1230, 1233, 1278, 1281, 1315, 1319], "also": [28, 34, 37, 43, 52, 53, 111, 122, 125, 126, 131, 134, 149, 150, 153, 154, 159, 175, 192, 193, 194, 196, 197, 223, 227, 240, 242, 246, 254, 255, 276, 281, 284, 308, 381, 384, 398, 426, 429, 462, 480, 553, 601, 605, 613, 615, 617, 619, 621, 624, 626, 628, 645, 674, 675, 686, 687, 735, 743, 744, 747, 748, 751, 752, 754, 761, 763, 786, 801, 810, 811, 817, 849, 850, 851, 853, 854, 869, 877, 879, 887, 888, 896, 899, 901, 903, 924, 929, 1010, 1045, 1092, 1186, 1190, 1232, 1233, 1255, 1256, 1267, 1319, 1323], "char": [28, 658, 1239], "omit": [28, 111, 115, 148, 150, 154, 159, 227, 243, 270, 308, 430, 444, 767, 768, 783, 798, 799, 929, 1046, 1060], "set_decimal_separ": 28, "x": [28, 49, 50, 54, 62, 83, 109, 115, 120, 121, 123, 134, 147, 148, 150, 161, 177, 201, 205, 207, 212, 222, 231, 242, 243, 272, 275, 308, 311, 316, 318, 320, 340, 345, 380, 392, 450, 451, 466, 471, 473, 474, 498, 505, 518, 546, 548, 550, 551, 553, 569, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 584, 585, 589, 595, 596, 604, 605, 609, 639, 642, 682, 705, 706, 713, 716, 723, 725, 727, 731, 732, 743, 744, 746, 761, 771, 773, 776, 778, 781, 786, 795, 801, 811, 858, 864, 868, 886, 888, 924, 929, 957, 982, 1078, 1113, 1166, 1190, 1221, 1224, 1263, 1302, 1319, 1327], "1234567": 28, "987654": [28, 929], "10101": 28, "y": [28, 54, 62, 83, 109, 115, 147, 148, 150, 161, 177, 205, 207, 212, 222, 231, 242, 243, 272, 275, 308, 311, 316, 318, 320, 340, 345, 433, 436, 450, 451, 471, 473, 498, 505, 518, 548, 550, 553, 572, 574, 576, 578, 580, 581, 584, 585, 589, 596, 604, 605, 609, 691, 693, 694, 706, 716, 723, 725, 727, 731, 732, 746, 757, 771, 776, 778, 781, 795, 811, 858, 868, 886, 888, 924, 929, 957, 982, 1049, 1052, 1190, 1272, 1274, 1275, 1319], "1234": [28, 631, 811, 1207, 1319], "7654321": 28, "234": 28, "567": 28, "987": 28, "654": [28, 255, 308, 888, 924], "00": [28, 37, 69, 165, 193, 277, 308, 399, 400, 403, 408, 422, 423, 426, 429, 430, 433, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 691, 694, 698, 754, 755, 756, 757, 797, 798, 799, 811, 829, 850, 859, 924, 929, 1011, 1012, 1015, 1016, 1017, 1020, 1021, 1022, 1028, 1029, 1035, 1038, 1039, 1040, 1042, 1045, 1046, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1063, 1272, 1275, 1279], "321": [28, 1328], "strip": [29, 669, 679, 686, 687, 688, 689, 690, 1250, 1260, 1267, 1268, 1269], "trail": [29, 191, 308, 679, 685, 686, 687, 1260, 1266, 1267, 1268], "zero": [29, 37, 108, 109, 118, 120, 121, 126, 128, 132, 149, 152, 161, 181, 210, 241, 255, 261, 266, 267, 308, 461, 541, 546, 633, 642, 701, 716, 811, 830, 845, 924, 987, 1078, 1158, 1224, 1282, 1295, 1300, 1301, 1319], "enabl": [29, 30, 53, 91, 92, 143, 144, 145, 146, 158, 246, 267, 281, 308, 319, 321, 605, 634, 650, 676, 720, 807, 811, 832, 879, 899, 924, 933, 934, 1190, 1214, 1231, 1257, 1301, 1307, 1319], "d": [29, 32, 34, 36, 37, 38, 39, 42, 111, 140, 191, 193, 198, 199, 203, 212, 255, 259, 261, 270, 275, 279, 290, 292, 295, 296, 297, 298, 299, 300, 301, 308, 316, 318, 380, 409, 433, 436, 480, 594, 637, 652, 658, 674, 675, 682, 691, 693, 694, 736, 757, 763, 811, 850, 858, 888, 908, 910, 913, 914, 915, 916, 917, 918, 919, 924, 982, 1021, 1049, 1052, 1092, 1122, 1233, 1239, 1255, 1256, 1263, 1272, 1274, 1275, 1286, 1319], "01": [29, 54, 68, 69, 150, 165, 171, 191, 193, 213, 240, 277, 308, 398, 399, 400, 401, 402, 403, 404, 405, 409, 410, 412, 413, 414, 416, 417, 419, 421, 422, 423, 424, 426, 428, 429, 430, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 453, 610, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 691, 693, 694, 698, 735, 751, 752, 753, 754, 755, 756, 757, 811, 829, 836, 850, 877, 924, 929, 1010, 1012, 1014, 1015, 1016, 1017, 1021, 1022, 1028, 1029, 1035, 1038, 1039, 1040, 1042, 1045, 1046, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1063, 1272, 1274, 1275, 1279], "6789": 29, "scale": [29, 70, 177, 308, 553, 594, 695, 811, 1068, 1276, 1319], "trim_decimal_zero": 29, "01000": 29, "67890": 29, "addit": [30, 33, 35, 36, 37, 111, 119, 124, 125, 135, 136, 148, 150, 152, 154, 174, 178, 192, 195, 229, 246, 247, 248, 254, 267, 274, 281, 282, 286, 308, 316, 408, 456, 459, 590, 645, 649, 657, 658, 660, 674, 675, 733, 736, 737, 738, 759, 790, 793, 811, 842, 849, 852, 879, 880, 882, 887, 895, 899, 900, 904, 924, 1011, 1020, 1076, 1230, 1238, 1239, 1241, 1255, 1256, 1301, 1319, 1323], "verbos": [30, 143, 145, 159, 658, 1239], "debug": [30, 832, 843, 863, 864, 924, 1328], "log": [30, 56, 366, 367, 449, 546, 571, 595, 714, 715, 811, 977, 1066, 1303, 1319], "do_polars_oper": 30, "if_set": 31, "env_onli": 31, "dict": [31, 35, 36, 37, 42, 50, 55, 57, 59, 108, 110, 111, 112, 113, 114, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 150, 184, 210, 229, 235, 241, 242, 243, 245, 262, 263, 270, 272, 308, 552, 811, 875, 878, 924, 928, 1165, 1319], "show": [31, 37, 51, 171, 174, 191, 214, 228, 308, 476, 811, 836, 839, 873, 885, 924, 1088, 1319], "variabl": [31, 49, 79, 132, 139, 153, 156, 222, 255, 264, 308, 868, 888, 924, 1296, 1319, 1327], "chang": [31, 38, 43, 44, 45, 46, 54, 60, 61, 70, 72, 120, 121, 122, 132, 139, 140, 255, 275, 276, 277, 283, 308, 323, 390, 391, 394, 430, 476, 552, 553, 590, 591, 598, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 788, 789, 811, 832, 833, 888, 896, 902, 924, 928, 981, 982, 983, 1003, 1004, 1046, 1088, 1165, 1180, 1184, 1194, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1219, 1319], "restrict": [31, 683, 1264], "dictionari": [31, 37, 59, 83, 108, 110, 111, 112, 114, 120, 121, 122, 123, 127, 129, 130, 133, 134, 138, 210, 229, 241, 242, 243, 262, 263, 270, 308, 552, 811, 924, 1165, 1319], "those": [31, 37, 120, 243, 267, 276, 308, 466, 601, 657, 774, 811, 896, 924, 929, 1186, 1238, 1301, 1319], "been": [31, 37, 157, 161, 162, 183, 186, 194, 195, 196, 197, 202, 237, 260, 288, 289, 308, 323, 385, 386, 387, 388, 389, 468, 483, 487, 490, 495, 507, 521, 539, 549, 550, 552, 553, 567, 596, 601, 611, 613, 615, 617, 619, 621, 624, 626, 628, 651, 663, 667, 668, 669, 670, 673, 678, 679, 685, 706, 709, 710, 728, 747, 748, 749, 750, 772, 811, 851, 852, 853, 854, 863, 892, 906, 907, 924, 936, 999, 1000, 1001, 1002, 1097, 1103, 1124, 1138, 1156, 1165, 1186, 1195, 1211, 1213, 1232, 1244, 1248, 1249, 1250, 1251, 1254, 1259, 1260, 1266, 1291, 1292, 1319], "set_fmt_float": 31, "via": [31, 120, 121, 122, 132, 134, 137, 138, 139, 210, 242, 308, 323, 393, 553, 659, 811, 837, 924, 1240], "set_stat": 31, "all_stat": 31, "io": [32, 34, 37, 38, 39, 118, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 308, 393, 468, 564, 811, 837, 881, 924], "byte": [32, 34, 37, 38, 39, 42, 43, 46, 118, 119, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 177, 308, 661, 665, 666, 667, 680, 692, 924, 1068, 1242, 1246, 1247, 1248, 1261, 1273, 1319], "compress": [32, 38, 39, 42, 44, 46, 308, 608, 811, 924, 1193, 1319], "avrocompress": [32, 308], "uncompress": [32, 38, 39, 42, 46, 126, 137, 308, 924], "write": [32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 119, 121, 126, 159, 308, 373, 567, 811, 861, 885, 924, 988, 1319], "apach": [32, 38, 39, 42, 118, 122, 123, 126, 128, 136, 308], "avro": [32, 118, 308, 823], "writabl": [32, 34, 38, 39, 40, 41, 42, 266, 308, 1300, 1319], "like": [32, 34, 36, 38, 39, 40, 41, 42, 61, 109, 118, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 193, 205, 207, 212, 243, 266, 308, 393, 399, 468, 511, 566, 601, 657, 687, 688, 720, 807, 811, 828, 833, 837, 850, 924, 928, 1011, 1128, 1186, 1238, 1307, 1319], "object": [32, 34, 36, 37, 38, 39, 40, 41, 42, 52, 62, 83, 97, 109, 110, 115, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 148, 150, 151, 161, 192, 193, 195, 196, 213, 214, 240, 243, 255, 266, 267, 308, 393, 564, 752, 753, 755, 756, 771, 798, 799, 811, 823, 837, 850, 851, 853, 854, 859, 877, 888, 924, 929, 1295, 1319, 1327], "snappi": [32, 42, 46, 308, 924], "deflat": [32, 308], "pathlib": [32, 34, 38, 39, 42, 134, 308], "foo": [32, 34, 36, 38, 39, 40, 41, 42, 51, 129, 130, 165, 168, 169, 172, 173, 174, 175, 176, 179, 182, 185, 188, 189, 190, 198, 199, 200, 201, 203, 204, 206, 212, 216, 217, 218, 219, 220, 221, 224, 225, 228, 231, 233, 235, 236, 238, 241, 244, 245, 246, 249, 253, 256, 257, 258, 259, 261, 263, 264, 265, 266, 267, 268, 272, 273, 274, 278, 279, 280, 285, 308, 369, 391, 393, 426, 470, 475, 478, 500, 557, 560, 561, 562, 563, 564, 565, 566, 598, 606, 648, 652, 654, 656, 658, 659, 677, 681, 683, 686, 687, 688, 689, 690, 697, 700, 708, 729, 739, 740, 741, 760, 764, 765, 766, 769, 770, 775, 777, 779, 780, 782, 783, 785, 790, 792, 796, 800, 801, 807, 811, 829, 834, 838, 839, 840, 846, 856, 857, 858, 871, 875, 878, 879, 894, 895, 898, 901, 924, 929, 979, 1004, 1042, 1135, 1184, 1191, 1233, 1235, 1237, 1239, 1240, 1258, 1264, 1270, 1271, 1278, 1281, 1319], "bar": [32, 34, 36, 38, 39, 40, 41, 42, 51, 129, 130, 165, 168, 169, 172, 173, 174, 175, 176, 179, 182, 185, 188, 189, 190, 199, 201, 203, 204, 206, 212, 216, 217, 218, 219, 220, 221, 224, 225, 228, 231, 233, 235, 236, 238, 241, 244, 245, 246, 253, 256, 257, 258, 259, 261, 263, 264, 265, 266, 267, 268, 273, 274, 278, 279, 285, 308, 369, 393, 478, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 642, 652, 654, 656, 658, 659, 677, 681, 683, 689, 690, 729, 739, 740, 741, 760, 765, 766, 769, 770, 775, 777, 779, 780, 782, 783, 790, 792, 796, 800, 801, 807, 811, 829, 834, 838, 839, 840, 846, 856, 857, 858, 871, 875, 878, 879, 894, 895, 898, 924, 929, 979, 1135, 1224, 1233, 1235, 1237, 1239, 1240, 1258, 1264, 1270, 1271, 1319], "ham": [32, 34, 36, 38, 39, 42, 165, 168, 169, 172, 173, 174, 175, 176, 182, 189, 198, 199, 201, 212, 217, 219, 221, 224, 228, 233, 235, 238, 241, 244, 245, 246, 253, 256, 257, 259, 264, 265, 266, 267, 268, 273, 278, 279, 308, 369, 565, 829, 834, 838, 839, 840, 846, 858, 871, 875, 878, 879, 894, 901, 924, 979], "dirpath": [32, 34, 38, 39, 42, 134, 308], "new_fil": [32, 34, 38, 39, 42, 308], "t": [33, 34, 36, 43, 49, 50, 62, 119, 120, 125, 131, 134, 193, 213, 216, 230, 273, 275, 308, 323, 390, 399, 408, 429, 449, 452, 454, 455, 511, 553, 594, 657, 660, 674, 675, 688, 691, 694, 801, 811, 850, 872, 894, 924, 929, 1003, 1045, 1066, 1067, 1069, 1071, 1072, 1128, 1166, 1211, 1238, 1241, 1255, 1256, 1268, 1269, 1272, 1275, 1309, 1319], "kwarg": [33, 50, 53, 64, 65, 67, 68, 73, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 119, 122, 123, 150, 152, 154, 169, 182, 230, 267, 308, 594, 811, 846, 872, 924, 928, 1301, 1319, 1327], "copi": [33, 108, 109, 119, 161, 166, 167, 211, 261, 266, 267, 281, 308, 459, 811, 830, 831, 899, 924, 987, 991, 1076, 1295, 1299, 1300, 1301, 1319], "csv": [33, 34, 43, 44, 45, 46, 119, 120, 121, 125, 134, 308, 823, 924], "system": [33, 120, 121, 308, 403, 1015], "clipboard": [33, 119, 308, 823], "write_csv": [33, 121, 134, 308], "past": [33, 308, 863, 864, 924], "excel": [33, 37, 119, 125, 308, 823], "similar": [33, 42, 119, 156, 185, 213, 250, 308, 352, 433, 436, 533, 590, 635, 770, 801, 811, 843, 859, 883, 924, 964, 1049, 1052, 1150, 1216, 1319], "spreadsheet": [33, 119, 125, 131, 231, 308], "softwar": [33, 119, 308], "field": [33, 34, 36, 43, 83, 104, 106, 111, 274, 308, 357, 541, 575, 577, 579, 608, 658, 659, 662, 682, 683, 704, 743, 744, 747, 748, 773, 793, 811, 895, 924, 969, 1004, 1158, 1184, 1193, 1240, 1263, 1264, 1286, 1288, 1319], "symbol": [33, 34, 43, 308, 811, 924], "argument": [33, 36, 42, 92, 119, 120, 124, 132, 134, 135, 150, 152, 154, 169, 172, 178, 192, 193, 194, 195, 196, 197, 213, 217, 219, 224, 229, 230, 231, 240, 246, 247, 248, 254, 257, 267, 274, 277, 281, 282, 286, 308, 430, 444, 456, 462, 480, 590, 594, 610, 613, 615, 617, 619, 621, 624, 626, 628, 645, 686, 687, 688, 724, 731, 732, 733, 736, 737, 738, 740, 742, 759, 790, 793, 801, 811, 838, 842, 849, 850, 851, 852, 853, 854, 872, 877, 879, 880, 882, 887, 895, 899, 900, 904, 924, 928, 1046, 1060, 1092, 1267, 1268, 1269, 1301, 1319], "pass": [33, 35, 36, 37, 42, 50, 54, 110, 119, 122, 123, 125, 132, 134, 140, 143, 145, 148, 150, 152, 154, 164, 169, 172, 192, 193, 196, 199, 215, 229, 230, 240, 246, 250, 254, 259, 267, 270, 271, 277, 281, 285, 286, 308, 311, 323, 352, 367, 398, 409, 426, 429, 459, 478, 533, 552, 553, 590, 594, 605, 610, 613, 615, 617, 619, 621, 624, 626, 627, 628, 635, 645, 686, 687, 688, 715, 724, 733, 735, 742, 752, 763, 793, 801, 807, 811, 827, 838, 849, 850, 851, 853, 854, 856, 863, 864, 872, 877, 879, 883, 885, 887, 893, 899, 904, 912, 924, 928, 936, 964, 1010, 1021, 1045, 1076, 1087, 1117, 1150, 1165, 1166, 1190, 1216, 1267, 1268, 1269, 1290, 1301, 1319, 1323], "read_clipboard": [33, 308], "read": [33, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 179, 308, 393, 468, 551, 801, 811, 837, 843, 924, 1075, 1319], "comma": [33, 34, 120, 121, 134, 308], "include_bom": [34, 43, 308, 924], "include_head": [34, 37, 43, 121, 272, 308, 924], "line_termin": [34, 43, 308, 924], "quote_char": [34, 43, 120, 121, 134, 308, 924], "batch_siz": [34, 43, 120, 121, 122, 138, 140, 270, 308, 924], "1024": [34, 42, 43, 46, 120, 121, 122, 138, 308, 924], "datetime_format": [34, 43, 308, 924], "date_format": [34, 43, 308, 924], "time_format": [34, 43, 308, 924], "null_valu": [34, 43, 120, 121, 134, 308, 924], "quote_styl": [34, 43, 308, 924], "csvquotestyl": [34, 43, 308, 924], "If": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47, 53, 59, 60, 61, 62, 70, 108, 109, 110, 111, 112, 113, 114, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 134, 135, 137, 138, 139, 140, 143, 144, 145, 146, 151, 152, 153, 161, 162, 164, 174, 179, 191, 193, 194, 196, 197, 199, 208, 209, 210, 213, 215, 216, 220, 227, 229, 231, 240, 242, 243, 244, 250, 253, 258, 259, 263, 264, 266, 271, 272, 273, 275, 276, 285, 308, 319, 321, 323, 345, 352, 357, 367, 398, 402, 403, 422, 423, 433, 436, 462, 476, 480, 496, 518, 528, 533, 534, 541, 551, 553, 564, 565, 590, 598, 601, 603, 605, 606, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 635, 638, 642, 643, 648, 658, 659, 660, 661, 662, 663, 669, 679, 680, 681, 682, 683, 685, 686, 687, 688, 691, 692, 693, 694, 698, 701, 715, 720, 724, 726, 728, 730, 734, 735, 738, 739, 742, 743, 752, 753, 755, 756, 757, 760, 761, 767, 768, 769, 771, 774, 783, 784, 787, 788, 789, 793, 798, 799, 801, 802, 811, 827, 832, 833, 839, 841, 850, 851, 853, 854, 858, 859, 864, 868, 875, 877, 881, 883, 886, 893, 894, 896, 906, 912, 924, 928, 929, 933, 934, 936, 957, 964, 969, 988, 1004, 1010, 1014, 1015, 1038, 1039, 1049, 1052, 1075, 1085, 1087, 1088, 1092, 1114, 1115, 1117, 1135, 1145, 1150, 1151, 1158, 1166, 1184, 1186, 1188, 1190, 1191, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1208, 1210, 1214, 1216, 1220, 1224, 1225, 1229, 1239, 1240, 1241, 1242, 1243, 1244, 1250, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1269, 1272, 1273, 1274, 1275, 1279, 1282, 1290, 1295, 1300, 1307, 1309, 1319, 1327], "instead": [34, 36, 40, 41, 47, 51, 54, 61, 62, 110, 111, 114, 120, 121, 122, 125, 131, 132, 134, 140, 147, 148, 149, 150, 154, 163, 191, 193, 209, 210, 213, 216, 227, 229, 236, 241, 242, 243, 246, 247, 250, 251, 266, 267, 277, 281, 282, 283, 285, 308, 311, 333, 352, 367, 374, 375, 391, 405, 407, 411, 415, 418, 420, 425, 429, 430, 432, 444, 453, 456, 466, 533, 551, 564, 598, 613, 615, 617, 619, 621, 624, 626, 628, 635, 636, 665, 666, 669, 674, 675, 679, 685, 686, 687, 688, 689, 690, 691, 694, 701, 715, 722, 730, 734, 740, 752, 753, 754, 755, 756, 757, 767, 768, 784, 787, 793, 798, 799, 802, 811, 826, 833, 850, 879, 880, 881, 883, 884, 899, 900, 902, 924, 929, 945, 964, 973, 989, 990, 1004, 1017, 1019, 1023, 1030, 1033, 1036, 1041, 1045, 1046, 1048, 1060, 1070, 1093, 1099, 1102, 1109, 1111, 1113, 1150, 1184, 1209, 1212, 1216, 1217, 1226, 1246, 1247, 1250, 1255, 1256, 1260, 1266, 1267, 1268, 1269, 1272, 1275, 1282, 1300, 1301, 1319, 1323, 1327], "whether": [34, 43, 112, 114, 154, 158, 164, 176, 186, 193, 194, 196, 197, 209, 213, 240, 248, 254, 271, 308, 319, 321, 336, 337, 366, 367, 412, 431, 453, 501, 502, 610, 634, 645, 714, 715, 733, 811, 827, 850, 851, 853, 854, 863, 864, 877, 882, 887, 893, 924, 929, 933, 934, 948, 949, 980, 983, 1024, 1047, 1067, 1070, 1118, 1119, 1211, 1319, 1327], "utf": [34, 43, 82, 308, 924], "bom": [34, 43, 308, 924], "header": [34, 37, 42, 43, 46, 115, 120, 121, 125, 134, 175, 231, 272, 308, 924], "end": [34, 37, 43, 120, 121, 132, 134, 193, 308, 361, 364, 365, 399, 430, 456, 534, 649, 655, 658, 661, 671, 680, 684, 686, 687, 690, 730, 735, 751, 752, 753, 754, 755, 756, 759, 767, 768, 798, 799, 801, 811, 850, 855, 862, 873, 924, 929, 975, 1011, 1046, 1151, 1236, 1239, 1242, 1252, 1261, 1265, 1267, 1268, 1273], "each": [34, 37, 43, 54, 63, 70, 79, 121, 122, 125, 138, 143, 144, 145, 146, 148, 170, 182, 191, 192, 193, 194, 195, 196, 197, 211, 213, 216, 229, 240, 242, 244, 270, 274, 276, 277, 285, 286, 289, 291, 293, 294, 302, 308, 333, 367, 391, 430, 444, 462, 483, 484, 487, 488, 517, 520, 521, 528, 538, 546, 553, 590, 598, 601, 608, 609, 617, 621, 624, 628, 632, 638, 645, 658, 661, 665, 666, 667, 670, 680, 682, 683, 692, 715, 730, 733, 738, 767, 768, 793, 801, 811, 832, 835, 846, 850, 851, 853, 854, 859, 873, 877, 895, 896, 904, 906, 907, 909, 911, 912, 920, 924, 945, 986, 1004, 1046, 1060, 1097, 1098, 1103, 1104, 1134, 1137, 1138, 1145, 1155, 1184, 1186, 1193, 1194, 1208, 1220, 1239, 1242, 1246, 1247, 1248, 1251, 1261, 1263, 1264, 1273, 1288, 1319, 1328], "quot": [34, 35, 43, 120, 121, 123, 134, 308, 924], "specifi": [34, 36, 37, 43, 54, 94, 104, 106, 125, 131, 151, 164, 165, 177, 178, 181, 192, 193, 194, 195, 196, 197, 212, 229, 240, 241, 243, 246, 247, 248, 250, 254, 271, 274, 281, 282, 286, 308, 367, 373, 452, 454, 455, 456, 461, 590, 604, 605, 613, 615, 617, 619, 621, 624, 626, 628, 635, 645, 715, 733, 736, 737, 738, 752, 753, 755, 756, 757, 759, 790, 793, 798, 799, 811, 827, 829, 842, 845, 849, 850, 851, 852, 853, 854, 858, 877, 879, 880, 882, 883, 887, 893, 895, 899, 900, 904, 924, 988, 1068, 1069, 1071, 1072, 1078, 1190, 1216, 1319], "defin": [34, 37, 43, 69, 122, 129, 147, 148, 150, 162, 165, 174, 178, 193, 194, 196, 197, 216, 227, 230, 240, 276, 288, 294, 308, 323, 480, 514, 539, 553, 594, 598, 609, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 661, 666, 680, 692, 728, 752, 753, 755, 756, 774, 793, 798, 799, 811, 829, 839, 842, 850, 851, 853, 854, 872, 877, 896, 906, 912, 924, 929, 936, 1092, 1131, 1166, 1184, 1194, 1242, 1247, 1261, 1273, 1319], "chrono": [34, 43, 308, 433, 436, 691, 693, 694, 698, 924, 1049, 1052, 1272, 1274, 1275, 1279], "rust": [34, 42, 43, 101, 126, 128, 132, 216, 294, 308, 659, 924, 928, 1166, 1240, 1319], "crate": [34, 43, 308, 649, 651, 652, 657, 658, 659, 660, 674, 675, 691, 693, 694, 698, 924, 929, 1230, 1232, 1233, 1238, 1239, 1240, 1241, 1255, 1256, 1272, 1274, 1275, 1279], "fraction": [34, 43, 143, 144, 145, 146, 244, 308, 431, 528, 591, 632, 691, 694, 811, 924, 1047, 1145, 1180, 1208, 1272, 1275, 1319], "second": [34, 43, 143, 144, 145, 146, 193, 213, 240, 277, 308, 410, 414, 417, 419, 424, 426, 430, 443, 444, 453, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 674, 675, 691, 694, 752, 753, 754, 755, 756, 757, 797, 798, 799, 801, 811, 850, 859, 877, 924, 929, 1042, 1046, 1059, 1060, 1070, 1255, 1256, 1272, 1275, 1319, 1328], "infer": [34, 43, 70, 83, 108, 110, 111, 112, 113, 114, 120, 121, 122, 125, 129, 130, 131, 132, 134, 138, 139, 162, 216, 308, 430, 444, 551, 553, 606, 662, 663, 691, 693, 694, 695, 698, 757, 771, 787, 811, 924, 1046, 1060, 1166, 1191, 1243, 1244, 1272, 1274, 1275, 1276, 1279, 1319], "timeunit": [34, 43, 69, 71, 308, 400, 402, 435, 447, 694, 752, 753, 754, 755, 756, 757, 924, 929, 1012, 1014, 1051, 1063, 1275], "frame": [34, 35, 37, 43, 47, 48, 49, 50, 51, 52, 54, 61, 62, 111, 121, 125, 131, 143, 144, 165, 166, 171, 210, 211, 216, 223, 227, 230, 241, 242, 243, 255, 270, 275, 276, 308, 829, 830, 836, 869, 872, 888, 896, 924, 929, 987, 1319, 1327, 1328], "datatyp": [34, 40, 43, 108, 110, 111, 112, 114, 116, 125, 127, 129, 130, 133, 138, 151, 152, 154, 175, 185, 245, 308, 368, 456, 637, 713, 759, 771, 811, 823, 840, 878, 881, 924, 936, 978, 981, 1005, 1102, 1109, 1111, 1113, 1166, 1218, 1302, 1319], "repres": [34, 37, 43, 68, 69, 71, 80, 84, 89, 108, 110, 112, 113, 114, 122, 125, 255, 256, 278, 285, 308, 466, 489, 491, 536, 543, 551, 647, 661, 666, 680, 692, 721, 724, 739, 741, 757, 759, 771, 773, 774, 783, 788, 789, 792, 800, 807, 811, 888, 889, 897, 924, 1209, 1213, 1228, 1242, 1247, 1261, 1273, 1308, 1319], "necessari": [34, 35, 43, 53, 92, 125, 266, 308, 924], "non_numer": [34, 43, 308, 924], "never": [34, 43, 122, 212, 241, 308, 858, 924], "strategi": [34, 43, 54, 62, 120, 147, 148, 149, 150, 151, 152, 154, 181, 193, 196, 212, 213, 226, 276, 308, 323, 461, 541, 553, 811, 845, 850, 853, 858, 859, 896, 924, 1078, 1158, 1319], "put": [34, 43, 308, 924], "around": [34, 43, 308, 924], "thei": [34, 37, 43, 53, 61, 62, 91, 92, 111, 134, 159, 213, 214, 243, 308, 676, 687, 688, 811, 924, 928, 929], "record": [34, 39, 43, 128, 140, 266, 308, 859, 924], "termin": [34, 43, 308, 924], "indistinguish": [34, 43, 308, 924], "even": [34, 43, 120, 308, 453, 594, 598, 811, 924, 1070, 1184, 1319], "invalid": [34, 43, 120, 121, 134, 308, 662, 664, 696, 716, 811, 924, 973, 1243, 1245, 1277], "g": [34, 43, 120, 124, 126, 128, 135, 137, 140, 152, 161, 209, 236, 266, 275, 308, 316, 323, 393, 453, 456, 553, 637, 759, 811, 837, 875, 924, 1067, 1070, 1211, 1319, 1328], "pars": [34, 43, 47, 119, 120, 121, 123, 125, 130, 131, 134, 137, 138, 164, 192, 195, 246, 247, 250, 254, 271, 281, 282, 286, 308, 367, 373, 480, 552, 590, 605, 645, 662, 663, 673, 695, 696, 715, 725, 727, 733, 736, 737, 738, 746, 750, 763, 776, 778, 781, 790, 791, 793, 795, 801, 811, 827, 849, 852, 879, 880, 883, 887, 893, 899, 900, 904, 924, 988, 1092, 1190, 1216, 1243, 1244, 1254, 1275, 1276, 1277, 1319], "valid": [34, 37, 43, 47, 69, 122, 126, 128, 132, 154, 159, 177, 212, 308, 390, 649, 651, 652, 657, 658, 659, 660, 664, 674, 675, 801, 811, 858, 924, 929, 1003, 1068, 1085, 1230, 1232, 1233, 1238, 1239, 1240, 1241, 1245, 1255, 1256, 1319], "integ": [34, 37, 43, 68, 69, 71, 75, 76, 77, 78, 84, 85, 86, 87, 88, 141, 148, 150, 153, 155, 174, 193, 240, 264, 308, 320, 372, 431, 465, 466, 589, 598, 603, 609, 610, 611, 612, 613, 615, 617, 619, 621, 623, 624, 626, 628, 661, 673, 692, 696, 723, 730, 763, 767, 768, 787, 811, 839, 850, 877, 924, 929, 985, 1047, 1081, 1102, 1184, 1188, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1209, 1213, 1242, 1254, 1273, 1277, 1319, 1327, 1328], "aren": [34, 43, 308, 924], "strictli": [34, 43, 53, 92, 308, 843, 924], "table_nam": [35, 37, 255, 308, 888, 924], "connect": [35, 120, 122, 123, 126, 128, 132, 137, 139, 140, 308, 824], "connectionorcursor": [35, 122, 308], "if_table_exist": [35, 308], "dbwritemod": [35, 308], "fail": [35, 36, 109, 124, 126, 130, 132, 135, 137, 138, 139, 143, 144, 161, 266, 273, 308, 334, 434, 541, 691, 693, 694, 698, 811, 894, 924, 1166, 1272, 1274, 1275, 1279, 1300, 1319], "dbwriteengin": [35, 308], "engine_opt": [35, 125, 308], "databas": [35, 122, 123, 308, 823], "qualifi": [35, 308], "creat": [35, 37, 53, 92, 108, 112, 114, 120, 121, 122, 123, 126, 128, 132, 135, 136, 148, 149, 150, 151, 152, 153, 154, 155, 166, 167, 193, 194, 197, 228, 231, 240, 266, 277, 281, 284, 308, 402, 430, 444, 453, 541, 602, 610, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 737, 751, 752, 753, 754, 755, 756, 757, 797, 798, 799, 807, 811, 830, 831, 836, 841, 850, 851, 854, 877, 899, 903, 924, 987, 991, 1004, 1014, 1046, 1060, 1070, 1177, 1184, 1187, 1300, 1319, 1327, 1328], "append": [35, 36, 150, 179, 212, 213, 308, 602, 801, 811, 858, 859, 924, 1075, 1319], "your": [35, 37, 53, 54, 92, 120, 121, 122, 123, 125, 140, 210, 216, 242, 243, 246, 263, 281, 286, 294, 308, 323, 403, 453, 468, 553, 659, 691, 693, 694, 701, 774, 811, 855, 862, 864, 879, 899, 904, 912, 924, 1015, 1070, 1166, 1240, 1272, 1274, 1275, 1282, 1319, 1328], "special": [35, 120, 121, 123, 134, 270, 284, 308, 612, 658, 674, 675, 811, 903, 924, 936, 1166, 1196, 1239, 1255, 1256, 1319], "sqlalchemi": [35, 122, 142, 308], "adbc": [35, 122, 123, 308], "against": [35, 47, 97, 120, 122, 255, 308, 511, 660, 888, 924, 1128, 1241, 1327, 1328], "uri": [35, 36, 122, 123, 124, 135, 136, 308], "instanti": [35, 37, 122, 152, 246, 281, 308, 879, 899, 924], "postgresql": [35, 122, 123, 308, 590, 811], "user": [35, 122, 123, 162, 216, 230, 288, 294, 308, 323, 551, 553, 594, 634, 728, 774, 811, 872, 906, 912, 924, 928, 936, 1166, 1214, 1319], "server": [35, 122, 123, 308], "port": [35, 120, 122, 123, 126, 128, 137, 308], "sqlite": [35, 122, 308], "db": [35, 122, 123, 308], "replac": [35, 36, 120, 121, 134, 180, 181, 237, 238, 272, 281, 282, 308, 402, 429, 460, 551, 552, 675, 676, 811, 844, 899, 900, 924, 1014, 1045, 1077, 1165, 1209, 1212, 1213, 1256, 1257, 1319], "insert": [35, 120, 121, 126, 128, 132, 134, 137, 138, 139, 202, 203, 236, 272, 274, 308, 633, 648, 701, 811, 895, 924, 1210, 1229, 1282, 1319], "mode": [35, 36, 43, 44, 45, 46, 47, 60, 61, 143, 145, 231, 255, 308, 658, 784, 787, 802, 811, 832, 833, 924, 1239, 1319, 1327], "new": [35, 36, 37, 125, 134, 159, 187, 201, 202, 203, 216, 227, 228, 235, 236, 255, 260, 270, 272, 274, 275, 276, 281, 282, 308, 318, 402, 458, 468, 470, 479, 550, 574, 575, 590, 605, 609, 674, 675, 682, 683, 702, 704, 710, 807, 811, 823, 848, 875, 888, 892, 895, 896, 899, 900, 906, 912, 924, 932, 1014, 1074, 1083, 1177, 1189, 1190, 1194, 1255, 1256, 1263, 1264, 1283, 1286, 1292, 1297, 1319, 1327], "alreadi": [35, 36, 308, 390, 511, 720, 811, 885, 924, 1003, 1128, 1307, 1319], "suppli": [35, 37, 108, 110, 111, 112, 114, 122, 129, 130, 138, 182, 241, 308, 462, 594, 811, 846, 924], "unset": [35, 47, 149, 293, 308, 429, 541, 911, 1045], "associ": [35, 37, 48, 50, 54, 123, 125, 149, 152, 243, 308], "panda": [35, 109, 113, 142, 193, 267, 308, 422, 423, 713, 811, 850, 924, 1038, 1039, 1301, 1302, 1319], "to_sql": [35, 308], "though": [35, 122, 193, 308, 807, 850, 924], "eventu": [35, 308], "phase": [35, 275, 308], "favour": [35, 308], "solut": [35, 308], "cursor": [35, 122, 308], "adbc_ingest": [35, 308], "affect": [35, 143, 144, 145, 146, 308], "driver": [35, 122, 123, 308], "provid": [35, 37, 50, 120, 121, 123, 124, 125, 132, 134, 135, 136, 139, 150, 154, 182, 208, 255, 308, 362, 363, 456, 476, 541, 551, 553, 653, 654, 657, 662, 664, 687, 688, 689, 690, 763, 793, 811, 823, 846, 888, 924, 973, 974, 1088, 1114, 1166, 1234, 1235, 1238, 1243, 1245, 1319, 1327, 1328], "otherwis": [35, 122, 125, 149, 152, 156, 216, 223, 243, 246, 270, 294, 308, 357, 362, 373, 391, 452, 453, 454, 455, 541, 553, 561, 590, 594, 598, 603, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 649, 653, 660, 661, 666, 680, 692, 724, 757, 760, 769, 774, 783, 801, 811, 869, 879, 912, 924, 969, 973, 988, 1004, 1069, 1070, 1071, 1072, 1158, 1166, 1184, 1188, 1209, 1212, 1230, 1234, 1241, 1242, 1247, 1261, 1273, 1319], "target_t": [35, 308], "pyodbc": [35, 308], "wa": [35, 59, 143, 229, 266, 285, 308, 605, 676, 757, 811, 1190, 1257, 1300, 1319], "fast_executemani": [35, 308], "improv": [35, 46, 126, 137, 308, 551, 811, 924], "perform": [35, 42, 44, 46, 54, 95, 98, 105, 109, 120, 121, 122, 126, 132, 134, 137, 138, 139, 161, 164, 192, 193, 194, 195, 196, 197, 213, 216, 217, 219, 224, 234, 240, 242, 243, 257, 266, 271, 294, 308, 323, 466, 541, 551, 553, 590, 610, 650, 665, 666, 676, 691, 693, 694, 811, 827, 850, 851, 853, 854, 859, 877, 887, 893, 902, 903, 924, 1166, 1231, 1246, 1247, 1257, 1272, 1274, 1275, 1299, 1300, 1319], "pyodbc_uri": [35, 308], "mssql": [35, 308], "1433": [35, 308], "odbc": [35, 122, 308], "18": [35, 115, 171, 223, 240, 308, 384, 430, 444, 447, 479, 495, 573, 610, 811, 836, 869, 873, 877, 924, 929, 1063, 1275], "create_engin": [35, 308], "deltalak": [36, 124, 135, 142, 308], "deltat": [36, 308], "ignor": [36, 122, 149, 150, 154, 219, 220, 257, 258, 276, 308, 319, 321, 345, 394, 429, 452, 454, 455, 509, 518, 582, 583, 648, 724, 726, 738, 811, 933, 934, 957, 1006, 1045, 1069, 1071, 1072, 1126, 1135, 1175, 1176, 1229, 1319], "merg": [36, 212, 223, 308, 858, 869, 924], "overwrite_schema": [36, 308], "storage_opt": [36, 120, 124, 126, 128, 132, 135, 136, 137, 139, 308], "delta_write_opt": [36, 308], "delta_merge_opt": [36, 308], "tablemerg": [36, 308], "delta": [36, 124, 135, 256, 278, 308, 536, 543, 624, 625, 628, 629, 647, 721, 739, 741, 788, 789, 792, 800, 811, 823, 889, 897, 924, 1203, 1205, 1228, 1308, 1319], "handl": [36, 60, 61, 62, 115, 120, 121, 134, 140, 308, 394, 509, 701, 811, 832, 833, 924, 928, 1006, 1126, 1282, 1319], "throw": [36, 110, 111, 114, 165, 308, 368, 662, 664, 811, 829, 924, 978, 1243, 1245, 1319], "add": [36, 37, 121, 179, 193, 196, 216, 281, 282, 283, 284, 308, 391, 576, 577, 578, 579, 596, 598, 706, 757, 761, 801, 811, 850, 853, 858, 899, 900, 901, 902, 903, 924, 1075, 1319], "anyth": [36, 241, 308], "updat": [36, 171, 308, 836, 924], "deprec": [36, 92, 93, 147, 148, 149, 150, 154, 157, 162, 163, 183, 186, 193, 194, 195, 196, 197, 202, 217, 219, 224, 236, 237, 251, 257, 260, 277, 283, 288, 289, 308, 323, 374, 375, 385, 386, 387, 388, 389, 405, 407, 411, 415, 418, 420, 425, 429, 430, 432, 444, 447, 468, 483, 487, 490, 495, 507, 521, 539, 549, 550, 552, 567, 596, 611, 613, 615, 617, 619, 621, 624, 626, 628, 636, 651, 663, 667, 668, 669, 670, 673, 678, 679, 685, 691, 694, 706, 709, 710, 722, 728, 740, 747, 748, 749, 750, 752, 754, 772, 811, 826, 850, 851, 852, 853, 854, 863, 884, 892, 902, 906, 907, 924, 936, 981, 989, 990, 999, 1000, 1001, 1002, 1004, 1017, 1019, 1023, 1030, 1033, 1036, 1041, 1045, 1046, 1048, 1060, 1063, 1093, 1097, 1099, 1102, 1103, 1109, 1111, 1113, 1124, 1138, 1156, 1165, 1184, 1195, 1211, 1213, 1217, 1232, 1244, 1248, 1249, 1250, 1251, 1254, 1259, 1260, 1266, 1272, 1275, 1291, 1292, 1299, 1300, 1309, 1319], "sinc": [36, 68, 69, 84, 92, 122, 124, 135, 147, 148, 149, 150, 154, 157, 162, 163, 164, 183, 186, 193, 194, 195, 196, 197, 202, 217, 219, 224, 236, 237, 251, 257, 260, 271, 277, 283, 288, 289, 308, 323, 374, 375, 385, 386, 387, 388, 389, 405, 407, 409, 411, 415, 418, 420, 425, 429, 430, 432, 444, 447, 468, 483, 487, 490, 495, 507, 521, 539, 549, 550, 552, 567, 596, 611, 613, 615, 617, 619, 621, 624, 626, 628, 636, 651, 663, 667, 668, 669, 670, 673, 678, 679, 685, 691, 694, 706, 709, 710, 722, 728, 747, 748, 749, 750, 752, 754, 763, 772, 811, 826, 827, 850, 851, 852, 853, 854, 863, 884, 887, 892, 893, 902, 906, 907, 924, 936, 981, 989, 990, 999, 1000, 1001, 1002, 1004, 1017, 1019, 1021, 1023, 1030, 1033, 1036, 1041, 1045, 1046, 1048, 1060, 1063, 1093, 1097, 1099, 1102, 1103, 1109, 1111, 1113, 1124, 1138, 1156, 1165, 1184, 1195, 1211, 1213, 1217, 1232, 1244, 1248, 1249, 1250, 1251, 1254, 1259, 1260, 1266, 1272, 1275, 1291, 1292, 1299, 1300, 1309, 1319], "version": [36, 59, 92, 124, 125, 135, 142, 147, 148, 149, 150, 154, 157, 161, 162, 163, 183, 186, 193, 194, 195, 196, 197, 198, 202, 217, 219, 224, 236, 237, 251, 255, 257, 260, 270, 277, 283, 288, 289, 308, 323, 374, 375, 385, 386, 387, 388, 389, 405, 407, 411, 415, 418, 420, 422, 423, 425, 429, 430, 432, 444, 447, 468, 474, 483, 487, 490, 495, 507, 521, 539, 549, 550, 552, 567, 596, 611, 613, 615, 617, 619, 621, 624, 626, 628, 636, 650, 651, 663, 667, 668, 669, 670, 673, 678, 679, 685, 691, 694, 706, 709, 710, 722, 728, 747, 748, 749, 750, 752, 754, 772, 786, 811, 826, 850, 851, 852, 853, 854, 863, 884, 888, 892, 902, 906, 907, 924, 936, 981, 989, 990, 999, 1000, 1001, 1002, 1004, 1017, 1019, 1023, 1030, 1033, 1036, 1038, 1039, 1041, 1045, 1046, 1048, 1060, 1063, 1086, 1093, 1097, 1099, 1102, 1103, 1109, 1111, 1113, 1124, 1138, 1156, 1165, 1184, 1195, 1211, 1213, 1217, 1231, 1232, 1244, 1248, 1249, 1250, 1251, 1254, 1259, 1260, 1266, 1272, 1275, 1291, 1292, 1299, 1300, 1309, 1319], "20": [36, 37, 120, 125, 142, 147, 148, 149, 150, 154, 157, 163, 171, 179, 201, 203, 223, 230, 232, 236, 238, 255, 270, 277, 283, 289, 308, 331, 332, 333, 394, 401, 404, 405, 410, 414, 416, 417, 419, 424, 430, 431, 434, 444, 447, 468, 474, 479, 567, 594, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 722, 754, 763, 771, 798, 811, 826, 836, 869, 872, 888, 902, 907, 924, 929, 1006, 1013, 1017, 1031, 1046, 1060, 1063, 1073, 1300, 1319], "14": [36, 142, 171, 183, 202, 216, 217, 219, 224, 237, 257, 260, 290, 292, 295, 296, 297, 298, 299, 300, 301, 308, 385, 386, 387, 388, 389, 399, 404, 405, 410, 414, 417, 419, 424, 431, 434, 479, 539, 601, 673, 709, 710, 747, 748, 749, 750, 754, 797, 798, 811, 836, 908, 910, 913, 914, 915, 916, 917, 918, 919, 924, 929, 999, 1000, 1001, 1002, 1011, 1046, 1093, 1113, 1156, 1213, 1254, 1291, 1292, 1309, 1319], "schema_mod": [36, 308], "extra": [36, 120, 121, 124, 126, 128, 134, 135, 136, 137, 179, 193, 308, 811, 850, 924, 928, 1075, 1319], "storag": [36, 120, 124, 126, 128, 132, 135, 136, 137, 308], "backend": [36, 122, 123, 124, 135, 136, 308], "cloud": [36, 122, 124, 132, 135, 136, 137, 139, 140, 308], "configur": [36, 124, 135, 136, 159, 308], "authent": [36, 124, 135, 136, 308], "see": [36, 37, 38, 39, 60, 61, 69, 122, 123, 124, 125, 126, 128, 132, 135, 136, 139, 143, 144, 145, 146, 150, 154, 169, 193, 212, 230, 231, 308, 311, 373, 461, 496, 551, 642, 649, 657, 658, 660, 661, 674, 675, 692, 752, 753, 755, 756, 786, 798, 799, 807, 811, 832, 833, 850, 924, 928, 929, 982, 988, 1115, 1224, 1230, 1238, 1239, 1241, 1242, 1255, 1256, 1273, 1319, 1323, 1328], "here": [36, 37, 42, 108, 110, 111, 112, 114, 122, 123, 124, 129, 130, 132, 135, 136, 138, 139, 148, 150, 154, 308, 398, 553, 659, 664, 735, 811, 885, 924, 1010, 1245], "gc": [36, 124, 135, 136, 308], "azur": [36, 124, 132, 135, 136, 139, 308], "keyword": [36, 50, 124, 132, 135, 150, 154, 169, 192, 230, 241, 246, 247, 267, 281, 282, 286, 308, 462, 594, 790, 793, 801, 811, 849, 872, 879, 880, 899, 900, 904, 924, 1301, 1319], "while": [36, 61, 121, 124, 125, 135, 150, 154, 159, 210, 222, 272, 276, 308, 666, 833, 868, 896, 924, 1085, 1247, 1319], "lake": [36, 124, 135, 308, 823], "typeerror": [36, 308], "unsupport": [36, 308], "arrowinvaliderror": [36, 308], "could": [36, 89, 95, 165, 308, 368, 743, 747, 757, 761, 811, 829, 836, 839, 924, 978, 1085, 1319], "primit": [36, 308, 485, 811], "tablenotfounderror": [36, 308], "doesn": [36, 120, 134, 193, 213, 308, 449, 811, 850, 924, 1066, 1309, 1319], "action": [36, 308], "trigger": [36, 267, 308, 811, 928, 1301, 1319], "categor": [36, 53, 72, 91, 92, 143, 144, 145, 146, 212, 264, 308, 369, 370, 391, 598, 605, 713, 811, 929, 979, 980, 981, 982, 983, 1004, 1184, 1190, 1302, 1319], "protocol": [36, 109, 123, 161, 308], "nullabl": [36, 308], "To": [36, 61, 180, 217, 219, 224, 257, 308, 373, 396, 397, 460, 461, 649, 657, 658, 660, 674, 675, 687, 688, 689, 690, 699, 811, 844, 924, 988, 1008, 1009, 1077, 1085, 1230, 1238, 1239, 1241, 1255, 1256, 1280, 1300, 1319], "pyarrow": [36, 42, 108, 113, 120, 123, 124, 126, 128, 132, 135, 140, 142, 261, 266, 267, 308, 823, 1295, 1299, 1300, 1301, 1319], "ha": [36, 37, 54, 61, 113, 122, 134, 157, 161, 162, 183, 186, 193, 194, 195, 196, 197, 202, 237, 240, 260, 277, 283, 288, 289, 308, 323, 366, 367, 385, 386, 387, 388, 389, 390, 468, 483, 487, 490, 495, 507, 521, 539, 549, 550, 551, 552, 562, 567, 596, 611, 613, 615, 617, 619, 621, 624, 626, 628, 651, 661, 663, 667, 668, 669, 670, 673, 678, 679, 685, 692, 706, 709, 710, 714, 715, 728, 747, 748, 749, 750, 760, 769, 772, 783, 807, 811, 833, 850, 851, 852, 853, 854, 863, 877, 892, 902, 906, 907, 912, 924, 936, 977, 987, 999, 1000, 1001, 1002, 1003, 1005, 1085, 1097, 1099, 1103, 1124, 1138, 1156, 1165, 1195, 1211, 1213, 1232, 1242, 1244, 1248, 1249, 1250, 1251, 1254, 1259, 1260, 1266, 1273, 1291, 1292, 1303, 1319], "last": [36, 143, 144, 145, 146, 164, 199, 213, 215, 231, 243, 254, 259, 271, 273, 302, 308, 333, 344, 353, 366, 367, 390, 406, 422, 427, 445, 487, 488, 495, 516, 535, 538, 541, 573, 574, 576, 578, 580, 581, 596, 644, 645, 661, 683, 692, 706, 708, 714, 715, 733, 796, 811, 827, 859, 887, 891, 893, 894, 920, 924, 929, 945, 956, 965, 1003, 1018, 1038, 1043, 1061, 1087, 1103, 1104, 1117, 1133, 1152, 1155, 1226, 1242, 1264, 1273, 1290, 1319], "filesystem": [36, 124, 135, 136, 308], "table_path": [36, 124, 135, 136, 308], "match": [36, 37, 62, 69, 102, 108, 110, 111, 112, 114, 122, 129, 130, 138, 143, 144, 145, 146, 165, 181, 212, 213, 241, 276, 308, 559, 605, 623, 649, 650, 651, 652, 655, 657, 658, 660, 662, 664, 674, 675, 676, 684, 691, 693, 694, 801, 811, 829, 845, 858, 859, 896, 924, 929, 1102, 1111, 1190, 1202, 1230, 1231, 1232, 1233, 1236, 1238, 1239, 1241, 1243, 1245, 1255, 1256, 1257, 1265, 1272, 1274, 1275, 1319], "old": [36, 235, 308, 605, 811, 875, 924, 1190, 1319], "existing_table_path": [36, 308], "store": [36, 120, 132, 136, 179, 210, 242, 308, 369, 608, 811, 979, 1075, 1193, 1319], "bucket": [36, 124, 135, 136, 139, 308, 430, 444, 476, 811, 1046, 1060, 1088, 1319], "prefix": [36, 120, 121, 134, 159, 308, 318, 365, 550, 574, 577, 578, 580, 581, 684, 688, 689, 701, 706, 811, 929, 976, 1265, 1270, 1282], "aws_region": [36, 135, 139, 308], "the_aws_region": [36, 308], "aws_access_key_id": [36, 124, 135, 139, 308], "the_aws_access_key_id": [36, 124, 135, 136, 308], "aws_secret_access_kei": [36, 124, 135, 139, 308], "the_aws_secret_access_kei": [36, 124, 135, 136, 308], "pa": [36, 108, 140, 308], "check": [36, 69, 120, 121, 134, 143, 144, 145, 146, 158, 176, 186, 193, 194, 196, 197, 206, 208, 212, 240, 308, 340, 361, 364, 365, 453, 480, 485, 506, 610, 649, 655, 660, 684, 811, 850, 851, 853, 854, 858, 863, 864, 877, 924, 952, 972, 975, 976, 1067, 1070, 1093, 1095, 1099, 1100, 1102, 1109, 1110, 1111, 1113, 1114, 1123, 1211, 1230, 1236, 1241, 1265, 1319], "doc": [36, 38, 39, 123, 126, 128, 143, 145, 169, 308], "predic": [36, 43, 44, 45, 46, 60, 61, 134, 137, 138, 139, 140, 182, 208, 241, 308, 462, 722, 761, 801, 811, 832, 833, 841, 843, 846, 863, 864, 873, 875, 885, 902, 903, 924, 1079, 1209, 1212, 1319], "source_alia": [36, 308], "target_alia": [36, 308], "when_matched_update_al": [36, 308], "when_not_matched_insert_al": [36, 308], "execut": [36, 48, 49, 51, 53, 62, 122, 123, 214, 255, 308, 393, 511, 720, 811, 828, 837, 863, 864, 873, 888, 924, 928, 1128, 1307, 1319, 1327], "workbook": [37, 125, 131, 308], "worksheet": [37, 125, 131, 308], "posit": [37, 172, 178, 192, 195, 229, 246, 247, 248, 250, 254, 274, 281, 282, 286, 308, 352, 452, 454, 455, 456, 533, 590, 598, 635, 645, 659, 660, 673, 674, 675, 696, 731, 732, 733, 736, 737, 738, 759, 790, 793, 811, 838, 842, 849, 852, 879, 880, 882, 883, 887, 895, 899, 900, 904, 924, 964, 1069, 1071, 1072, 1150, 1184, 1216, 1240, 1254, 1277, 1319], "tupl": [37, 123, 125, 131, 162, 210, 216, 229, 241, 242, 243, 249, 270, 285, 308, 606, 811, 873, 885, 924, 929, 1191, 1319], "a1": [37, 55, 57, 308], "table_styl": [37, 308], "column_format": [37, 308], "columnformatdict": [37, 308], "dtype_format": [37, 308], "oneormoredatatyp": [37, 148, 308, 1111, 1319], "conditional_format": [37, 308], "conditionalformatdict": [37, 308], "header_format": [37, 308], "column_tot": [37, 308], "columntotalsdefinit": [37, 308], "column_width": [37, 308], "columnwidthsdefinit": [37, 308], "row_tot": [37, 308], "rowtotalsdefinit": [37, 308], "row_height": [37, 308], "sparklin": [37, 308], "sequenc": [37, 54, 83, 108, 110, 111, 112, 114, 120, 121, 122, 125, 129, 130, 131, 134, 138, 148, 149, 150, 151, 152, 164, 171, 178, 179, 212, 213, 222, 227, 229, 230, 231, 243, 254, 264, 270, 271, 275, 276, 277, 308, 357, 367, 391, 469, 485, 541, 549, 551, 594, 598, 605, 645, 689, 690, 704, 715, 728, 733, 743, 744, 747, 748, 761, 763, 772, 773, 774, 783, 786, 791, 811, 827, 836, 842, 858, 859, 868, 872, 887, 893, 896, 924, 969, 1004, 1005, 1075, 1158, 1184, 1190, 1213, 1286, 1319], "formula": [37, 308, 449, 811, 1066, 1319], "autofilt": [37, 308], "autofit": [37, 308], "hidden_column": [37, 308], "selectortyp": [37, 308, 929], "hide_gridlin": [37, 308], "sheet_zoom": [37, 308], "freeze_pan": [37, 308], "bytesio": [37, 38, 39, 42, 118, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 308, 393, 811, 837, 924], "open": [37, 118, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 308, 393, 811, 837, 924], "xlsxwriter": [37, 142, 308], "close": [37, 122, 193, 194, 196, 197, 240, 255, 308, 391, 480, 546, 598, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 642, 752, 753, 755, 756, 798, 799, 811, 850, 851, 853, 854, 877, 888, 924, 1004, 1092, 1184, 1224, 1319], "xlsx": [37, 125, 308], "work": [37, 70, 72, 121, 140, 236, 247, 282, 308, 319, 321, 323, 358, 372, 373, 456, 465, 511, 542, 551, 553, 573, 574, 576, 578, 580, 581, 590, 661, 665, 666, 680, 692, 717, 811, 880, 900, 924, 929, 933, 934, 970, 985, 988, 1081, 1128, 1159, 1242, 1246, 1247, 1261, 1273, 1304, 1319], "directori": [37, 42, 132, 308, 928], "sheet1": [37, 308], "medium": [37, 308], "kei": [37, 54, 59, 62, 132, 136, 139, 193, 210, 212, 213, 223, 229, 231, 235, 239, 242, 243, 276, 285, 308, 462, 553, 605, 793, 811, 843, 850, 858, 859, 869, 875, 876, 896, 924, 1190, 1319], "follow": [37, 42, 59, 120, 121, 122, 124, 134, 135, 136, 143, 193, 213, 216, 230, 240, 277, 308, 426, 430, 444, 453, 551, 594, 601, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 704, 716, 752, 753, 755, 756, 774, 798, 799, 801, 803, 804, 806, 811, 812, 813, 816, 818, 819, 820, 850, 859, 872, 877, 924, 1042, 1046, 1060, 1070, 1186, 1209, 1212, 1311, 1313, 1315, 1319, 1320, 1324, 1325, 1326, 1328], "first_column": [37, 308], "last_column": [37, 308], "banded_column": [37, 308], "banded_row": [37, 308], "sheet": [37, 125, 131, 308], "chart": [37, 308, 873, 924], "subsequ": [37, 52, 234, 267, 308, 541, 801, 841, 888, 924, 1301, 1319], "colnam": [37, 134, 175, 308, 840, 924], "given": [37, 47, 48, 54, 97, 108, 110, 111, 112, 114, 120, 121, 122, 123, 125, 126, 128, 129, 130, 131, 132, 134, 138, 139, 145, 146, 147, 148, 150, 152, 153, 154, 155, 162, 164, 177, 178, 180, 193, 194, 196, 197, 208, 216, 229, 230, 240, 241, 242, 243, 250, 251, 254, 270, 271, 276, 308, 340, 352, 357, 367, 373, 399, 403, 433, 435, 436, 449, 453, 476, 480, 506, 533, 541, 544, 553, 590, 594, 601, 604, 606, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 633, 635, 636, 658, 659, 671, 672, 691, 694, 701, 704, 715, 728, 759, 760, 769, 772, 773, 774, 783, 787, 788, 789, 811, 827, 842, 850, 851, 853, 854, 863, 864, 872, 877, 883, 884, 887, 893, 896, 906, 912, 924, 929, 936, 952, 964, 969, 988, 1011, 1015, 1049, 1051, 1052, 1066, 1068, 1070, 1088, 1092, 1114, 1123, 1150, 1158, 1161, 1164, 1166, 1177, 1186, 1191, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1210, 1216, 1217, 1239, 1240, 1252, 1253, 1272, 1275, 1282, 1306, 1310, 1319, 1327, 1328], "dd": [37, 308], "mm": [37, 308], "yyyi": [37, 308], "overridden": [37, 108, 110, 112, 114, 129, 130, 156, 308, 924], "basi": [37, 125, 150, 308], "param": [37, 108, 110, 111, 112, 114, 120, 121, 129, 130, 134, 149, 150, 154, 241, 308, 924], "It": [37, 38, 43, 44, 45, 46, 53, 60, 61, 70, 72, 92, 132, 139, 140, 171, 223, 230, 255, 275, 276, 284, 294, 308, 390, 391, 430, 476, 553, 561, 598, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 788, 789, 807, 811, 828, 832, 833, 836, 863, 864, 869, 888, 896, 903, 912, 924, 983, 1003, 1004, 1046, 1088, 1184, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1209, 1212, 1319], "float_dtyp": [37, 308], "simplifi": [37, 43, 44, 45, 46, 60, 61, 308, 832, 833, 841, 843, 873, 885, 924], "uniform": [37, 308, 598, 811, 1184, 1319], "condit": [37, 174, 182, 241, 308, 462, 480, 655, 684, 734, 761, 801, 811, 839, 846, 924, 1092, 1319], "typenam": [37, 308], "3_color_scal": [37, 308], "data_bar": [37, 308], "make": [37, 62, 83, 108, 113, 120, 121, 125, 126, 128, 132, 137, 223, 227, 234, 277, 308, 454, 455, 476, 580, 581, 590, 604, 682, 811, 869, 924, 928, 1071, 1072, 1088, 1263, 1319, 1327], "icon": [37, 308], "multipl": [37, 50, 60, 61, 62, 120, 121, 125, 131, 134, 137, 138, 139, 148, 154, 164, 172, 177, 179, 182, 192, 193, 201, 211, 229, 231, 243, 246, 248, 254, 271, 276, 281, 286, 308, 366, 367, 514, 539, 558, 562, 570, 571, 590, 605, 606, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 645, 714, 715, 733, 740, 747, 748, 761, 772, 773, 775, 780, 786, 791, 794, 801, 807, 811, 827, 832, 833, 838, 846, 849, 850, 879, 882, 887, 893, 896, 899, 904, 912, 924, 935, 965, 1068, 1075, 1131, 1152, 1156, 1171, 1190, 1191, 1226, 1319], "singl": [37, 48, 54, 60, 61, 62, 119, 120, 121, 122, 123, 125, 132, 134, 139, 148, 165, 172, 173, 174, 179, 188, 198, 208, 216, 229, 241, 243, 254, 285, 308, 323, 341, 373, 398, 426, 469, 472, 474, 507, 508, 514, 539, 551, 553, 602, 605, 606, 608, 645, 648, 661, 666, 680, 692, 722, 728, 733, 737, 738, 768, 773, 774, 791, 799, 811, 829, 832, 833, 838, 839, 887, 924, 953, 988, 1010, 1042, 1075, 1086, 1124, 1125, 1131, 1187, 1190, 1191, 1193, 1229, 1242, 1247, 1261, 1273, 1295, 1319], "across": [37, 54, 123, 198, 218, 220, 225, 258, 308, 474, 725, 727, 743, 744, 746, 750, 776, 778, 781, 795, 811, 1086, 1319], "effect": [37, 185, 193, 196, 266, 308, 408, 466, 553, 575, 577, 579, 752, 753, 811, 850, 853, 902, 903, 924, 1011, 1020], "heatmap": [37, 308], "min": [37, 42, 46, 171, 181, 225, 231, 240, 308, 375, 382, 387, 461, 590, 601, 610, 619, 620, 781, 790, 811, 836, 845, 877, 924, 928, 990, 996, 1000, 1005, 1078, 1186, 1200, 1319, 1328], "entir": [37, 60, 61, 125, 131, 255, 308, 832, 833, 924], "made": [37, 122, 308], "abov": [37, 143, 213, 231, 308, 801], "than": [37, 43, 44, 45, 46, 60, 61, 107, 112, 114, 120, 121, 122, 125, 131, 134, 140, 150, 154, 166, 192, 195, 210, 213, 216, 229, 241, 242, 244, 270, 275, 294, 308, 466, 468, 471, 473, 480, 498, 528, 548, 551, 553, 565, 598, 609, 632, 642, 661, 665, 671, 672, 683, 692, 701, 739, 752, 774, 811, 832, 833, 849, 852, 859, 912, 924, 1092, 1145, 1166, 1184, 1194, 1208, 1224, 1242, 1246, 1252, 1253, 1264, 1273, 1282, 1319, 1328], "bold": [37, 308], "font_color": [37, 308], "702963": [37, 308], "total": [37, 177, 289, 308, 407, 411, 415, 418, 420, 425, 432, 437, 438, 439, 440, 441, 442, 443, 499, 520, 811, 907, 1019, 1023, 1030, 1033, 1036, 1041, 1048, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1068, 1116, 1137, 1319], "export": [37, 210, 211, 242, 243, 263, 266, 308, 807], "sum": [37, 47, 177, 185, 192, 193, 208, 231, 240, 258, 286, 308, 383, 384, 389, 393, 449, 462, 541, 553, 561, 563, 564, 565, 566, 605, 610, 626, 627, 722, 724, 743, 745, 746, 747, 749, 750, 761, 774, 786, 795, 811, 832, 833, 837, 841, 843, 849, 850, 871, 873, 877, 881, 885, 904, 924, 928, 929, 997, 998, 1002, 1066, 1068, 1204, 1319], "must": [37, 72, 109, 110, 124, 135, 136, 140, 171, 178, 193, 194, 196, 197, 213, 223, 240, 241, 308, 391, 541, 551, 598, 605, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 801, 811, 836, 842, 850, 851, 853, 854, 859, 863, 864, 869, 877, 885, 924, 928, 1004, 1005, 1184, 1190, 1319], "funcnam": [37, 308], "averag": [37, 308, 452, 453, 454, 455, 601, 811, 1069, 1070, 1071, 1072, 1186, 1319], "count_num": [37, 308], "count": [37, 47, 140, 163, 171, 193, 227, 228, 240, 272, 277, 283, 299, 308, 324, 341, 350, 380, 385, 398, 453, 476, 499, 507, 508, 520, 526, 553, 572, 588, 610, 613, 615, 617, 619, 621, 624, 626, 628, 651, 652, 718, 720, 729, 735, 742, 770, 782, 811, 826, 836, 850, 871, 877, 902, 917, 924, 953, 962, 1005, 1010, 1070, 1088, 1116, 1124, 1125, 1137, 1143, 1173, 1179, 1232, 1233, 1305, 1307, 1319], "std_dev": [37, 308], "var": [37, 155, 308, 628, 629, 811, 924, 1319], "pixel": [37, 308], "unit": [37, 69, 71, 143, 144, 145, 146, 150, 154, 177, 308, 400, 402, 409, 435, 447, 453, 459, 547, 562, 691, 694, 719, 752, 753, 754, 755, 756, 757, 763, 811, 873, 924, 928, 929, 1012, 1014, 1021, 1051, 1063, 1068, 1070, 1076, 1164, 1272, 1275, 1306, 1319, 1328], "hand": [37, 120, 121, 134, 308, 529, 530, 531, 532, 1146, 1147, 1148, 1149], "side": [37, 193, 194, 196, 197, 240, 308, 480, 529, 530, 531, 532, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 633, 752, 753, 755, 756, 798, 799, 811, 850, 851, 853, 854, 877, 924, 928, 1092, 1146, 1147, 1148, 1149, 1210, 1319], "call": [37, 51, 53, 92, 113, 121, 122, 125, 143, 144, 145, 146, 150, 154, 159, 192, 193, 196, 214, 216, 240, 255, 307, 308, 323, 381, 384, 398, 495, 553, 573, 574, 576, 578, 580, 581, 596, 638, 706, 735, 740, 807, 811, 849, 850, 851, 853, 854, 877, 888, 923, 924, 928, 929, 936, 1010, 1166, 1220, 1299, 1300, 1319], "ad": [37, 111, 125, 193, 196, 272, 276, 281, 282, 308, 322, 459, 743, 744, 747, 748, 811, 850, 853, 896, 899, 900, 924, 1004, 1076, 1184, 1319], "wise": [37, 54, 122, 185, 308, 325, 326, 327, 328, 329, 330, 376, 377, 378, 457, 545, 639, 640, 641, 711, 712, 747, 748, 761, 786, 811, 937, 938, 939, 940, 941, 942, 992, 993, 994, 1073, 1162, 1163, 1221, 1222, 1223, 1293, 1294, 1319], "particip": [37, 308], "distinct": [37, 154, 229, 285, 308, 358, 483, 484, 487, 488, 542, 601, 609, 757, 811, 970, 1097, 1098, 1103, 1104, 1159, 1186, 1194, 1319, 1328], "referenc": [37, 308, 704], "differ": [37, 120, 125, 140, 143, 145, 179, 193, 198, 210, 240, 242, 243, 263, 272, 308, 394, 406, 426, 427, 429, 445, 451, 466, 474, 509, 529, 531, 541, 553, 582, 583, 585, 605, 691, 718, 760, 763, 769, 783, 811, 841, 850, 877, 924, 929, 982, 1006, 1018, 1042, 1043, 1045, 1061, 1067, 1075, 1086, 1126, 1146, 1148, 1166, 1175, 1176, 1190, 1211, 1272, 1319], "row_index": [37, 308], "height": [37, 150, 174, 308], "intersect": [37, 308, 530, 929, 1147], "bodi": [37, 308], "start": [37, 118, 120, 121, 123, 126, 128, 131, 132, 134, 137, 138, 139, 156, 187, 192, 193, 195, 196, 214, 253, 260, 277, 283, 284, 308, 361, 364, 365, 398, 406, 421, 427, 430, 444, 445, 456, 470, 515, 534, 609, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 643, 649, 655, 658, 672, 680, 684, 686, 688, 689, 692, 701, 710, 730, 735, 743, 747, 751, 752, 753, 754, 755, 756, 759, 761, 767, 768, 798, 799, 801, 811, 848, 849, 850, 852, 853, 873, 886, 892, 902, 903, 924, 929, 976, 1010, 1012, 1015, 1018, 1021, 1022, 1029, 1032, 1035, 1037, 1040, 1043, 1046, 1051, 1060, 1061, 1083, 1132, 1151, 1194, 1225, 1236, 1239, 1253, 1261, 1265, 1267, 1269, 1273, 1282, 1292, 1319, 1328], "unless": [37, 54, 110, 270, 308, 686, 687, 787, 924, 1267, 1309, 1319], "marker": [37, 308], "compliant": [37, 308], "case": [37, 53, 54, 61, 108, 110, 111, 112, 114, 122, 129, 130, 138, 139, 156, 162, 179, 193, 194, 196, 197, 210, 216, 240, 242, 243, 263, 308, 399, 453, 550, 551, 561, 562, 574, 610, 613, 615, 617, 619, 621, 624, 626, 628, 649, 650, 658, 660, 674, 675, 676, 811, 833, 850, 851, 853, 854, 877, 924, 928, 929, 1011, 1070, 1075, 1230, 1231, 1239, 1241, 1255, 1256, 1257, 1319], "three": [37, 240, 269, 308, 391, 598, 610, 633, 661, 692, 811, 877, 924, 969, 1004, 1158, 1184, 1242, 1273, 1319], "avail": [37, 38, 117, 122, 123, 124, 135, 136, 148, 159, 231, 255, 307, 308, 601, 803, 804, 806, 810, 811, 812, 813, 816, 817, 818, 819, 820, 823, 843, 888, 923, 924, 928, 929, 1005, 1186, 1311, 1313, 1315, 1319, 1320, 1324, 1325, 1326, 1327], "insert_befor": [37, 308], "insert_aft": [37, 308], "respect": [37, 308, 650, 676, 929, 1231, 1257], "direct": [37, 123, 132, 136, 139, 143, 250, 275, 308, 352, 533, 635, 811, 883, 924, 964, 1150, 1216, 1319], "far": [37, 308], "strongli": [37, 156, 216, 241, 294, 308, 553, 811, 1166, 1319], "advis": [37, 53, 92, 214, 308], "structur": [37, 38, 97, 98, 105, 179, 230, 243, 266, 308, 594, 811, 872, 924, 1075, 1319], "wherev": [37, 216, 294, 308, 553, 811, 1166, 1319], "possibl": [37, 97, 110, 111, 114, 120, 125, 147, 150, 154, 164, 192, 195, 210, 216, 242, 271, 273, 294, 308, 547, 553, 561, 612, 683, 719, 811, 827, 849, 852, 887, 893, 894, 924, 1166, 1196, 1264, 1319], "simpl": [37, 227, 308], "colx": [37, 52, 308, 580, 581, 929, 1328], "coli": [37, 308, 580, 581, 929, 1328], "after": [37, 52, 62, 111, 118, 120, 121, 126, 128, 132, 134, 137, 138, 139, 179, 274, 307, 308, 456, 552, 590, 601, 701, 811, 895, 924, 1075, 1165, 1186, 1282, 1319], "befor": [37, 68, 69, 120, 122, 125, 134, 140, 143, 144, 145, 146, 156, 159, 179, 193, 196, 213, 255, 270, 274, 308, 383, 384, 390, 551, 552, 590, 591, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 701, 707, 788, 789, 811, 850, 853, 856, 859, 895, 924, 928, 997, 998, 1003, 1075, 1165, 1180, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1282, 1289, 1319], "most": [37, 49, 108, 120, 121, 123, 134, 143, 144, 145, 146, 308, 562, 570, 591, 683, 811, 1171, 1180, 1264, 1319, 1327], "mandatori": [37, 308], "return_dtyp": [37, 162, 216, 308, 323, 549, 551, 552, 553, 605, 723, 728, 772, 773, 774, 811, 936, 1165, 1166, 1190, 1319], "latter": [37, 179, 308, 1075, 1319], "appropri": [37, 140, 266, 308, 601, 811, 1186, 1319], "pure": [37, 308, 1300, 1319], "actual": [37, 111, 150, 154, 243, 308, 1219, 1319], "indic": [37, 68, 69, 71, 84, 118, 120, 121, 122, 126, 128, 132, 134, 139, 147, 148, 154, 193, 194, 196, 197, 240, 243, 248, 250, 264, 308, 334, 352, 469, 476, 481, 482, 483, 484, 486, 487, 488, 489, 491, 492, 493, 514, 533, 539, 557, 558, 559, 560, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 633, 635, 639, 709, 733, 734, 783, 811, 850, 851, 853, 854, 877, 882, 883, 924, 928, 929, 964, 1082, 1088, 1096, 1097, 1098, 1101, 1103, 1104, 1105, 1106, 1107, 1108, 1131, 1150, 1156, 1209, 1210, 1213, 1216, 1221, 1291, 1296, 1319, 1328], "calcul": [37, 54, 171, 193, 256, 278, 308, 394, 452, 453, 454, 455, 496, 509, 529, 536, 543, 547, 623, 642, 647, 719, 721, 739, 741, 788, 789, 792, 800, 811, 836, 850, 889, 897, 924, 1005, 1006, 1069, 1070, 1071, 1072, 1115, 1126, 1146, 1202, 1224, 1228, 1308, 1319], "individu": [37, 46, 150, 159, 240, 266, 270, 308, 553, 658, 811, 832, 877, 924, 986, 1239, 1319], "gridlin": [37, 308], "zoom": [37, 308], "freez": [37, 308], "pane": [37, 308], "top": [37, 271, 308, 715, 811, 893, 924], "index": [37, 109, 113, 116, 120, 121, 126, 128, 132, 134, 137, 138, 139, 142, 161, 183, 187, 189, 193, 194, 196, 197, 202, 203, 208, 210, 231, 237, 238, 240, 241, 242, 250, 253, 260, 266, 268, 276, 277, 283, 284, 308, 317, 331, 332, 333, 335, 338, 339, 344, 352, 357, 453, 469, 470, 472, 503, 504, 514, 515, 516, 533, 534, 539, 541, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 633, 635, 643, 649, 657, 660, 661, 680, 692, 709, 710, 733, 767, 770, 811, 848, 850, 851, 853, 854, 877, 883, 886, 892, 896, 902, 903, 924, 943, 944, 945, 946, 947, 950, 951, 956, 964, 969, 1070, 1082, 1083, 1114, 1120, 1121, 1131, 1132, 1133, 1150, 1151, 1156, 1158, 1177, 1209, 1210, 1213, 1216, 1225, 1238, 1241, 1242, 1261, 1273, 1291, 1292, 1319], "thu": [37, 179, 308, 739, 1075, 1319], "altern": [37, 308, 807], "a2": [37, 55, 57, 308], "occur": [37, 60, 61, 308, 341, 507, 508, 570, 601, 811, 832, 833, 841, 843, 873, 885, 924, 953, 1124, 1125, 1171, 1186, 1300, 1319], "equival": [37, 108, 110, 111, 112, 114, 124, 129, 130, 138, 193, 208, 227, 308, 316, 320, 450, 451, 453, 466, 471, 473, 498, 548, 569, 571, 584, 585, 586, 589, 595, 666, 705, 716, 723, 811, 850, 924, 1070, 1114, 1247, 1278, 1280, 1281, 1319], "top_row": [37, 308], "top_col": [37, 308], "base": [37, 67, 100, 152, 174, 182, 193, 194, 196, 197, 240, 308, 399, 408, 449, 452, 453, 454, 455, 462, 476, 544, 545, 551, 553, 598, 605, 610, 614, 616, 618, 620, 622, 625, 627, 629, 673, 696, 811, 839, 846, 850, 851, 853, 854, 877, 924, 929, 1011, 1020, 1066, 1069, 1070, 1071, 1072, 1088, 1161, 1162, 1166, 1184, 1190, 1254, 1277, 1310, 1319, 1328], "scroll": [37, 308], "region": [37, 136, 308], "initi": [37, 83, 159, 308, 743, 747, 761, 801, 1327], "5th": [37, 308], "properti": [37, 161, 168, 175, 184, 200, 245, 249, 280, 284, 308, 834, 840, 878, 898, 903, 924, 929, 1319, 1328], "readthedoc": [37, 308], "html": [37, 38, 39, 109, 122, 126, 128, 161, 169, 308], "definit": [37, 308, 496, 811, 1115, 1319], "take": [37, 125, 131, 150, 151, 159, 185, 187, 193, 196, 220, 223, 230, 231, 235, 260, 266, 308, 333, 398, 426, 462, 469, 470, 514, 515, 575, 577, 579, 645, 710, 733, 735, 752, 753, 758, 760, 769, 783, 811, 848, 850, 853, 869, 875, 892, 924, 945, 1010, 1042, 1082, 1083, 1131, 1132, 1292, 1310, 1319], "care": [37, 308, 323, 553, 634, 811, 1214, 1319], "rel": [37, 123, 124, 135, 136, 143, 144, 145, 146, 308, 426, 452, 454, 455, 617, 621, 624, 628, 811, 1042, 1069, 1071, 1072, 1319], "working_with_conditional_format": [37, 308], "similarli": [37, 111, 193, 213, 240, 277, 308, 426, 430, 444, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 752, 753, 755, 756, 798, 799, 811, 850, 859, 877, 924, 1042, 1046, 1060], "well": [37, 120, 121, 122, 134, 231, 308, 480, 811, 1092, 1319], "adjac": [37, 308], "two": [37, 52, 53, 91, 92, 110, 112, 114, 123, 185, 213, 222, 223, 231, 242, 255, 269, 287, 294, 308, 317, 395, 402, 466, 469, 472, 541, 598, 644, 731, 732, 739, 741, 788, 789, 811, 868, 869, 888, 905, 912, 924, 969, 1007, 1014, 1158, 1184, 1319], "help": [37, 143, 144, 145, 146, 308, 311, 843, 924, 1319, 1323], "where": [37, 47, 54, 122, 123, 125, 174, 179, 193, 210, 222, 242, 255, 256, 270, 276, 278, 308, 334, 446, 449, 451, 453, 536, 543, 585, 604, 633, 642, 645, 647, 676, 721, 734, 739, 741, 788, 789, 792, 800, 801, 811, 839, 850, 868, 888, 889, 896, 897, 924, 946, 1062, 1066, 1070, 1075, 1210, 1224, 1228, 1257, 1308, 1310, 1319, 1327], "appear": [37, 66, 111, 308, 718, 811, 1305, 1319], "working_with_sparklin": [37, 308], "inject": [37, 54, 308], "locat": [37, 179, 237, 238, 268, 274, 308, 633, 811, 895, 924, 1075, 1082, 1209, 1210, 1213, 1291, 1319], "syntax": [37, 182, 216, 227, 308, 649, 657, 658, 660, 674, 675, 767, 768, 807, 846, 885, 924, 1230, 1238, 1239, 1241, 1255, 1256, 1319], "correctli": [37, 125, 308, 551, 811], "microsoft": [37, 308], "com": [37, 123, 308, 452, 454, 455, 657, 658, 659, 811, 1069, 1071, 1072, 1238, 1239, 1240, 1319], "u": [37, 50, 69, 71, 139, 152, 213, 308, 400, 402, 409, 435, 447, 691, 694, 725, 727, 752, 753, 754, 755, 756, 757, 763, 929, 1012, 1014, 1021, 1051, 1063, 1272, 1275], "offic": [37, 308], "f5ed2452": [37, 308], "2337": [37, 308], "4f71": [37, 308], "bed3": [37, 308], "c8ae6d2b276": [37, 308], "basic": [37, 308, 1328], "random": [37, 38, 126, 141, 148, 154, 198, 244, 308, 474, 528, 601, 632, 638, 720, 811, 823, 1086, 1145, 1186, 1208, 1220, 1307, 1319], "dtm": [37, 308, 402, 929, 1014], "500": [37, 276, 308, 404, 405, 410, 414, 417, 419, 424, 431, 434, 843, 896, 924, 1029, 1032, 1040, 1197, 1198, 1200, 1319], "val": [37, 239, 308, 553, 594, 713, 801, 811, 876, 924], "10_000": [37, 308], "20_000": [37, 308], "30_000": [37, 308], "increas": [37, 54, 120, 131, 132, 139, 308, 390, 609, 811, 1003, 1194, 1319], "b4": [37, 308], "light": [37, 308], "twice": [37, 308], "titl": [37, 47, 308], "explicit": [37, 122, 134, 148, 255, 276, 308, 786, 888, 896, 924], "integr": [37, 270, 308, 1328], "multi_fram": [37, 308], "wb": [37, 308], "coordin": [37, 308], "advanc": [37, 125, 231, 308, 357, 541, 573, 576, 578, 580, 581, 969, 1158, 1328], "min_color": [37, 308], "76933c": [37, 308], "mid_color": [37, 308], "c4d79b": [37, 308], "max_color": [37, 308], "ebf1d": [37, 308], "data_bar_2010": [37, 308], "bar_color": [37, 308], "9bbb59": [37, 308], "bar_negative_color_sam": [37, 308], "bar_negative_border_color_sam": [37, 308], "white": [37, 308], "w": [37, 49, 50, 122, 193, 196, 243, 308, 652, 657, 659, 725, 727, 850, 853, 924, 929, 1233, 1238, 1240, 1268], "get_worksheet_by_nam": [37, 308], "fmt_titl": [37, 308], "add_format": [37, 308], "4f6228": [37, 308], "font_siz": [37, 308], "ital": [37, 308], "customis": [37, 308], "trend": [37, 308], "win_loss": [37, 308], "subtl": [37, 308], "tone": [37, 308], "hidden": [37, 308], "q1": [37, 308], "55": [37, 56, 308], "35": [37, 308, 394, 754, 811, 1006, 1319], "q2": [37, 308], "30": [37, 171, 179, 193, 201, 230, 236, 238, 262, 281, 308, 331, 332, 333, 394, 402, 404, 405, 410, 414, 417, 419, 421, 422, 424, 428, 429, 430, 431, 434, 437, 444, 445, 474, 637, 754, 771, 797, 798, 811, 836, 850, 872, 899, 924, 929, 1006, 1014, 1038, 1045, 1046, 1053, 1060, 1319, 1328], "60": [37, 179, 308, 410, 417, 419, 431, 443, 466, 626, 627, 691, 811, 1043, 1047, 1059, 1188, 1272, 1319], "q3": [37, 308], "40": [37, 171, 179, 213, 230, 308, 430, 444, 474, 543, 695, 811, 836, 872, 924, 1025, 1060, 1160, 1276], "80": [37, 308], "q4": [37, 308], "75": [37, 171, 308, 320, 589, 598, 613, 615, 617, 619, 624, 626, 628, 774, 811, 836, 924, 1005, 1088, 1115, 1184, 1319, 1328], "account": [37, 115, 123, 136, 308, 426, 452, 454, 455, 811, 1042, 1069, 1071, 1072, 1319], "flavour": [37, 122, 308], "integer_dtyp": [37, 246, 308, 879, 924, 929], "0_": [37, 308], "just": [37, 113, 122, 134, 222, 308, 868, 924], "unifi": [37, 270, 308, 929], "2_color_scal": [37, 308], "95b3d7": [37, 308], "ffffff": [37, 308], "standardis": [37, 308], "z": [37, 49, 62, 83, 115, 148, 177, 205, 207, 212, 222, 242, 243, 272, 275, 308, 316, 318, 320, 474, 505, 550, 553, 574, 576, 578, 580, 581, 589, 596, 604, 605, 650, 658, 676, 691, 694, 706, 725, 727, 746, 776, 778, 781, 787, 795, 811, 858, 868, 886, 888, 924, 929, 1078, 1190, 1231, 1239, 1257, 1272, 1275, 1319, 1327], "score": [37, 308], "conjunct": [37, 91, 122, 125, 131, 148, 308, 767, 770], "a123": [37, 308], "b345": [37, 308], "c567": [37, 308], "d789": [37, 308], "e101": [37, 308], "45": [37, 171, 240, 308, 402, 430, 444, 610, 626, 627, 652, 658, 703, 731, 732, 754, 771, 797, 798, 811, 836, 877, 924, 929, 1014, 1046, 1060, 1233, 1239, 1285, 1328], "85": [37, 308, 1115, 1319, 1328], "font": [37, 308], "consola": [37, 308], "stdev": [37, 308], "ipccompress": [38, 39, 308], "futur": [38, 61, 125, 161, 171, 217, 219, 224, 257, 308, 752, 833, 836, 924, 1309, 1319], "arrow": [38, 39, 44, 108, 122, 123, 126, 128, 137, 210, 242, 243, 261, 263, 266, 308, 924, 1295, 1300, 1319], "ipc": [38, 39, 44, 126, 127, 128, 137, 140, 308, 823, 924], "binari": [38, 122, 125, 308, 361, 362, 363, 364, 365, 653, 929, 972, 973, 975, 976, 1234], "feather": [38, 126, 137, 308, 823], "access": [38, 55, 56, 57, 58, 126, 132, 136, 137, 139, 161, 210, 241, 242, 308, 659, 901, 924, 1240, 1328], "lz4": [38, 39, 42, 44, 46, 308, 924], "zstd": [38, 39, 42, 44, 46, 308, 924], "intern": [38, 122, 141, 210, 308, 466, 811, 1327], "might": [38, 120, 121, 134, 156, 164, 266, 271, 308, 323, 553, 718, 811, 827, 887, 893, 924], "implement": [38, 42, 109, 122, 161, 198, 216, 294, 308, 311, 474, 495, 553, 573, 574, 576, 578, 580, 581, 596, 706, 774, 811, 912, 1086, 1166, 1209, 1212, 1319, 1323], "unstabl": [38, 43, 44, 45, 46, 60, 61, 70, 72, 122, 132, 139, 140, 255, 275, 276, 308, 390, 391, 430, 476, 553, 598, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 788, 789, 811, 832, 833, 888, 896, 924, 983, 1003, 1004, 1046, 1088, 1184, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1319], "break": [38, 43, 44, 45, 46, 60, 61, 70, 72, 132, 139, 140, 255, 275, 276, 277, 308, 323, 390, 391, 430, 444, 476, 553, 598, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 788, 789, 811, 832, 833, 888, 896, 924, 981, 983, 1003, 1004, 1046, 1060, 1088, 1184, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1319], "batch": [39, 60, 61, 117, 121, 122, 128, 138, 140, 242, 270, 308, 832, 833, 863, 864, 924], "iobas": [40, 41, 129, 130, 308, 393, 564, 567, 811, 837, 881, 924], "pretti": [40, 308], "row_ori": [40, 308], "serial": [40, 41, 308, 393, 567, 811, 837, 924], "orient": [40, 55, 57, 112, 114, 308, 924], "slower": [40, 112, 114, 125, 192, 195, 216, 229, 277, 294, 308, 553, 774, 811, 849, 852, 912, 924, 1166, 1319], "common": [40, 54, 60, 61, 62, 120, 121, 134, 276, 308, 550, 574, 811, 817, 832, 833, 841, 843, 873, 885, 896, 924], "write_ndjson": [40, 308], "bit_set": [40, 308, 881, 924], "newlin": [41, 130, 138, 308], "delimit": [41, 43, 130, 138, 231, 264, 308, 648, 924, 1229, 1296, 1319], "parquetcompress": [42, 308], "compression_level": [42, 46, 308, 924], "statist": [42, 46, 120, 121, 132, 139, 171, 308, 454, 455, 496, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 642, 811, 836, 924, 1005, 1071, 1072, 1115, 1202, 1224, 1319], "row_group_s": [42, 46, 308, 924], "data_page_s": [42, 308], "use_pyarrow": [42, 120, 126, 128, 132, 266, 308, 1299, 1300, 1319], "pyarrow_opt": [42, 124, 132, 135, 308], "parquet": [42, 46, 132, 133, 139, 308, 823, 924], "gzip": [42, 46, 308, 924], "lzo": [42, 46, 308, 924], "brotli": [42, 46, 308, 924], "choos": [42, 44, 46, 193, 231, 308, 850, 924], "good": [42, 44, 46, 210, 308, 924], "fast": [42, 44, 46, 153, 155, 308, 459, 634, 811, 924, 928, 1076, 1214, 1319, 1328], "decompress": [42, 44, 46, 308, 924], "backward": [42, 46, 181, 213, 308, 360, 398, 423, 461, 811, 845, 859, 924, 1010, 1039, 1078, 1319], "guarante": [42, 46, 120, 121, 171, 198, 273, 308, 474, 811, 836, 843, 894, 924, 1085, 1086, 1319], "deal": [42, 46, 210, 308, 319, 321, 429, 430, 444, 601, 691, 694, 724, 725, 726, 727, 754, 811, 924, 933, 934, 1045, 1046, 1060, 1186, 1272, 1275, 1319], "older": [42, 46, 308, 924], "reader": [42, 46, 117, 120, 121, 125, 126, 128, 132, 308, 924], "higher": [42, 46, 171, 233, 300, 308, 599, 621, 622, 785, 811, 836, 874, 918, 924, 1005, 1185, 1201, 1319], "mean": [42, 46, 120, 121, 126, 132, 134, 171, 181, 192, 193, 213, 220, 231, 240, 277, 286, 308, 426, 430, 444, 458, 461, 466, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 642, 648, 657, 752, 753, 755, 756, 757, 778, 798, 799, 801, 811, 836, 845, 849, 850, 859, 863, 864, 877, 904, 924, 1005, 1042, 1046, 1060, 1074, 1078, 1085, 1198, 1224, 1229, 1238, 1319], "smaller": [42, 46, 177, 308, 843, 924, 1068, 1319], "disk": [42, 43, 44, 45, 46, 126, 308, 885, 924], "22": [42, 46, 142, 150, 308, 406, 427, 430, 444, 446, 447, 612, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 691, 754, 811, 924, 929, 1046, 1060, 1063, 1196, 1272, 1319, 1328], "behavior": [42, 46, 174, 212, 308, 344, 468, 514, 516, 539, 552, 760, 769, 783, 811, 839, 858, 924, 956, 1004, 1131, 1133, 1156, 1165, 1184, 1319], "512": [42, 122, 210, 308, 595, 811, 1180, 1319], "page": [42, 46, 126, 132, 137, 139, 308, 811, 823, 924, 1319], "At": [42, 308], "moment": [42, 169, 308, 496, 642, 811, 1115, 1224, 1319], "write_t": [42, 308], "partition_col": [42, 123, 308], "write_to_dataset": [42, 308], "spark": [42, 308], "partit": [42, 123, 124, 132, 135, 139, 140, 211, 229, 308], "we": [42, 118, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 171, 193, 213, 240, 277, 308, 393, 426, 430, 444, 476, 511, 541, 551, 553, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 659, 673, 696, 751, 752, 753, 754, 755, 756, 771, 798, 799, 801, 811, 836, 837, 850, 859, 863, 864, 877, 924, 936, 1042, 1046, 1060, 1088, 1128, 1166, 1240, 1254, 1277, 1319], "use_pyarrow_write_to_dataset": [42, 308], "first": [42, 54, 120, 121, 125, 126, 128, 132, 134, 143, 144, 145, 146, 162, 191, 193, 196, 199, 213, 215, 216, 226, 230, 231, 240, 259, 264, 265, 272, 273, 277, 284, 291, 308, 333, 335, 344, 390, 394, 423, 426, 430, 447, 466, 475, 483, 484, 500, 509, 511, 516, 517, 541, 551, 552, 553, 562, 594, 610, 633, 645, 649, 657, 660, 661, 662, 664, 674, 675, 692, 736, 743, 761, 765, 801, 811, 832, 850, 853, 855, 859, 862, 872, 877, 894, 901, 903, 909, 924, 929, 945, 956, 1003, 1005, 1006, 1039, 1042, 1046, 1063, 1087, 1097, 1098, 1117, 1126, 1128, 1133, 1134, 1158, 1165, 1166, 1210, 1226, 1238, 1240, 1241, 1242, 1243, 1245, 1255, 1256, 1273, 1290, 1296, 1298, 1300, 1319, 1328], "watermark": [42, 308], "partitioned_object": [42, 308], "maintain_ord": [43, 44, 45, 46, 164, 192, 195, 229, 231, 254, 271, 273, 277, 287, 290, 292, 295, 296, 297, 298, 299, 300, 301, 308, 317, 358, 366, 367, 469, 472, 542, 553, 645, 714, 715, 717, 733, 811, 827, 833, 841, 843, 849, 852, 873, 885, 887, 893, 894, 905, 908, 910, 913, 914, 915, 916, 917, 918, 919, 924, 970, 1159, 1304, 1319], "type_coercion": [43, 44, 45, 46, 60, 61, 832, 833, 841, 843, 873, 885, 924], "predicate_pushdown": [43, 44, 45, 46, 60, 61, 832, 833, 841, 843, 863, 864, 873, 885, 924], "projection_pushdown": [43, 44, 45, 46, 60, 61, 832, 833, 841, 843, 863, 864, 873, 885, 924], "simplify_express": [43, 44, 45, 46, 60, 61, 832, 833, 841, 843, 873, 885, 924], "slice_pushdown": [43, 44, 45, 46, 60, 61, 832, 833, 841, 843, 863, 864, 873, 885, 924], "no_optim": [43, 44, 45, 46, 60, 61, 832, 833, 843, 863, 864, 873, 924], "evalu": [43, 44, 45, 46, 180, 182, 213, 308, 320, 334, 336, 337, 390, 462, 478, 501, 502, 541, 589, 724, 726, 730, 734, 752, 753, 755, 756, 758, 767, 768, 784, 787, 793, 798, 799, 801, 802, 811, 832, 846, 856, 858, 859, 924, 946, 948, 949, 1003, 1118, 1119, 1310, 1319], "queri": [43, 44, 45, 46, 47, 49, 60, 61, 122, 123, 126, 134, 137, 138, 139, 179, 214, 230, 255, 308, 551, 553, 664, 811, 832, 833, 841, 843, 855, 862, 873, 885, 888, 902, 903, 906, 912, 924, 1075, 1166, 1245, 1319, 1327], "ram": [43, 44, 45, 46, 924], "maintain": [43, 44, 45, 46, 164, 254, 271, 308, 358, 366, 367, 542, 633, 645, 714, 715, 717, 733, 811, 827, 836, 887, 893, 924, 970, 1159, 1210, 1304, 1319], "slightli": [43, 44, 45, 46, 466, 811, 924], "faster": [43, 44, 45, 46, 122, 125, 179, 266, 275, 308, 323, 553, 718, 811, 924, 936, 1075, 1166, 1319], "coercion": [43, 44, 45, 46, 60, 61, 604, 811, 832, 833, 841, 843, 873, 885, 924], "optim": [43, 44, 45, 46, 60, 61, 132, 134, 137, 138, 139, 210, 214, 230, 234, 242, 273, 308, 828, 832, 833, 841, 843, 863, 864, 873, 885, 894, 902, 903, 912, 924, 984, 1209, 1319], "pushdown": [43, 44, 45, 46, 60, 61, 832, 833, 841, 843, 863, 864, 873, 875, 885, 902, 903, 924, 1209, 1212, 1319], "project": [43, 44, 45, 46, 60, 61, 134, 136, 137, 138, 139, 323, 644, 645, 811, 832, 833, 841, 843, 863, 864, 873, 875, 881, 885, 924], "run": [43, 44, 45, 46, 60, 61, 69, 122, 150, 153, 154, 155, 192, 195, 214, 216, 231, 247, 273, 282, 294, 308, 323, 390, 511, 551, 553, 608, 609, 666, 790, 811, 832, 833, 841, 843, 849, 852, 863, 864, 868, 873, 880, 885, 894, 900, 924, 929, 1003, 1128, 1166, 1193, 1194, 1247, 1319, 1327, 1328], "slice": [43, 44, 45, 46, 55, 60, 61, 177, 199, 211, 259, 308, 517, 538, 553, 561, 563, 611, 613, 615, 617, 619, 621, 624, 626, 628, 661, 692, 811, 832, 833, 841, 843, 863, 864, 873, 885, 924, 928, 1068, 1087, 1134, 1155, 1195, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1242, 1273, 1290, 1319], "off": [43, 44, 45, 46, 60, 61, 120, 121, 134, 398, 735, 832, 833, 841, 843, 863, 864, 873, 924, 1010], "certain": [43, 44, 45, 46, 61, 124, 135, 202, 203, 277, 308, 687, 688, 832, 833, 873, 924, 1319], "lf": [43, 44, 45, 46, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 855, 856, 857, 858, 860, 861, 862, 864, 865, 866, 867, 868, 870, 871, 872, 873, 874, 875, 876, 878, 879, 881, 883, 885, 886, 887, 889, 890, 891, 893, 894, 896, 897, 898, 899, 901, 902, 903, 907, 911, 924, 1327, 1328], "scan_csv": [43, 44, 45, 46, 120, 121, 924], "my_larger_than_ram_fil": [43, 44, 45, 46, 924], "ndjson": [45, 924], "data_pagesize_limit": [46, 924], "reduc": [46, 120, 121, 132, 134, 137, 138, 139, 242, 295, 296, 298, 301, 308, 637, 744, 761, 811, 913, 914, 916, 919, 924, 1168, 1183, 1218, 1289, 1319], "pressur": [46, 120, 121, 132, 134, 138, 139, 637, 811, 924, 1218, 1319], "speed": [46, 323, 553, 811, 924, 1328], "eager": [47, 48, 49, 50, 51, 52, 193, 213, 231, 275, 308, 400, 403, 406, 409, 422, 423, 426, 427, 429, 430, 435, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 730, 734, 752, 753, 755, 756, 763, 767, 768, 784, 787, 793, 798, 799, 802, 810, 811, 850, 864, 924, 1011, 1012, 1015, 1018, 1020, 1021, 1022, 1028, 1029, 1032, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1327], "eagerli": [47, 541], "init": [47, 159], "eager_execut": [47, 1327], "itself": [47, 148, 308, 311, 553, 612, 613, 615, 617, 619, 621, 623, 624, 626, 628, 788, 789, 811, 861, 924, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1319, 1323, 1327], "impact": [47, 193, 196, 308, 850, 853, 924, 1327], "declar": [47, 108, 110, 111, 112, 114, 122, 129, 130, 138, 308, 924], "godfath": 47, "1972": 47, "6_000_000": 47, "134_821_952": 47, "dark": 47, "knight": 47, "2008": 47, "185_000_000": 47, "533_316_061": 47, "schindler": 47, "1993": 47, "22_000_000": 47, "96_067_179": 47, "pulp": 47, "fiction": 47, "1994": 47, "8_000_000": 47, "107_930_000": 47, "shawshank": 47, "redempt": 47, "25_000_000": 47, "28_341_469": 47, "release_year": 47, "budget": 47, "gross": 47, "imdb_scor": 47, "ctx": [47, 48, 49, 50, 51, 52], "film": 47, "1990": [47, 120], "BY": [47, 49, 888, 924], "desc": [47, 49], "AS": [47, 255, 308, 791, 888, 924, 1327], "decad": 47, "total_gross": 47, "n_film": 47, "2000": [47, 401, 412, 416, 422, 423, 426, 929, 1013, 1024, 1031, 1038, 1039, 1042, 1047], "533316061": 47, "232338648": 47, "1970": [47, 68, 69, 140], "134821952": 47, "register_glob": [48, 50, 52, 1327], "register_mani": [48, 49, 52], "unregist": [48, 49, 50, 1327], "frame_data": [48, 51], "collect": [48, 49, 52, 57, 60, 61, 134, 135, 136, 140, 150, 151, 154, 174, 214, 231, 255, 261, 273, 274, 308, 456, 485, 553, 737, 759, 763, 793, 811, 826, 827, 829, 830, 833, 835, 836, 837, 838, 839, 842, 843, 844, 845, 846, 847, 848, 849, 850, 855, 857, 858, 859, 860, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 879, 881, 883, 886, 887, 888, 889, 890, 891, 893, 894, 895, 896, 897, 899, 901, 902, 903, 904, 905, 907, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 924, 929, 1100, 1319, 1327, 1328], "global": [49, 53, 91, 92, 125, 141, 150, 158, 255, 266, 308, 605, 811, 888, 924, 980, 982, 1190, 1319, 1327], "scope": [49, 52, 159, 822, 929, 1327], "map": [49, 50, 83, 110, 111, 120, 121, 122, 123, 126, 127, 132, 133, 134, 137, 150, 165, 175, 184, 210, 216, 235, 241, 242, 243, 262, 308, 318, 430, 444, 550, 551, 552, 553, 573, 575, 576, 578, 580, 581, 605, 720, 773, 811, 829, 840, 875, 924, 929, 1005, 1046, 1060, 1165, 1166, 1190, 1307, 1319, 1327], "recent": [49, 143, 144, 145, 146, 591, 811, 1180, 1319, 1327], "df1": [49, 51, 52, 54, 62, 143, 144, 176, 179, 223, 255, 279, 308, 869, 924], "df2": [49, 51, 52, 54, 62, 143, 144, 176, 179, 255, 279, 308], "join": [49, 53, 54, 60, 61, 62, 92, 182, 213, 255, 276, 308, 462, 479, 590, 811, 832, 833, 841, 843, 846, 859, 873, 885, 888, 896, 901, 924], "named_fram": [50, 1327], "lf1": [50, 52, 888, 924], "m": [50, 69, 71, 212, 308, 399, 400, 402, 408, 409, 433, 435, 436, 447, 657, 691, 693, 694, 698, 752, 753, 754, 755, 756, 757, 763, 858, 924, 929, 1011, 1012, 1014, 1020, 1021, 1049, 1051, 1052, 1063, 1238, 1272, 1274, 1275, 1279], "o": [50, 126, 137, 366, 367, 390, 656, 714, 715, 811, 977, 1003, 1237, 1267, 1303, 1319], "lf2": [50, 52, 888, 924], "p": [50, 56, 230, 308, 594, 793, 811, 872, 924, 1241, 1242], "q": [50, 243, 308, 793], "r": [50, 120, 121, 134, 308, 594, 652, 656, 657, 658, 659, 674, 675, 811, 929, 1233, 1237, 1238, 1239, 1240, 1255, 1256, 1273], "lf3": [50, 924], "lf4": [50, 924], "either": [50, 83, 150, 208, 212, 213, 214, 217, 219, 224, 229, 240, 241, 257, 266, 308, 453, 598, 605, 610, 691, 724, 733, 793, 811, 858, 859, 861, 877, 924, 928, 929, 1070, 1184, 1190, 1272, 1319, 1328], "tbl1": [50, 52], "tbl2": [50, 52], "arg": [50, 53, 64, 65, 67, 68, 73, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 182, 230, 308, 333, 594, 733, 762, 811, 846, 872, 924, 928, 1166, 1319], "tbl3": 50, "tbl4": 50, "statement": [51, 801], "hello_world": 51, "baz": [51, 203, 204, 231, 274, 308, 659, 681, 683, 760, 769, 783, 807, 857, 895, 924, 929, 1240, 1264], "hello_data": 51, "foo_bar": [51, 557, 560, 681, 771], "registr": [52, 255, 308, 823, 888, 924], "lifetim": [52, 159, 822], "context": [52, 53, 91, 92, 156, 227, 255, 308, 317, 323, 462, 511, 551, 553, 561, 644, 645, 720, 728, 740, 742, 760, 763, 769, 770, 774, 783, 787, 790, 810, 811, 822, 823, 888, 901, 924, 1128, 1307, 1319, 1327], "manag": [52, 53, 91, 92, 822, 823, 1327], "often": [52, 123, 159, 193, 194, 196, 197, 240, 308, 341, 507, 508, 604, 610, 811, 850, 851, 853, 854, 877, 924, 953, 1124, 1125], "want": [52, 61, 111, 113, 125, 179, 216, 227, 308, 398, 462, 551, 553, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 650, 665, 676, 735, 743, 752, 761, 784, 787, 802, 811, 833, 855, 862, 924, 929, 1010, 1075, 1166, 1231, 1246, 1257, 1319], "df0": [52, 223, 308, 869, 924], "exit": [52, 53, 91, 159, 1327], "construct": [52, 53, 91, 92, 108, 110, 111, 112, 113, 114, 115, 122, 308, 468, 784, 787, 802, 807, 811, 837, 924, 980, 1319], "persist": 52, "through": [52, 109, 122, 807, 929, 1319, 1327], "tbl0": 52, "remain": [52, 120, 121, 134, 174, 177, 182, 231, 308, 396, 397, 462, 510, 605, 682, 683, 811, 839, 846, 863, 864, 924, 1008, 1009, 1068, 1079, 1127, 1190, 1263, 1264, 1319], "text": [52, 119, 122, 453, 661, 665, 666, 674, 675, 677, 680, 692, 791, 811, 1070, 1242, 1246, 1247, 1258, 1261, 1273, 1319, 1328], "misc": 52, "testing1234": 52, "test1": 52, "test2": 52, "test3": 52, "disabl": [53, 91, 92, 151, 210, 308, 832, 924], "cach": [53, 60, 61, 91, 92, 126, 134, 137, 139, 143, 144, 145, 146, 158, 605, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 691, 693, 694, 698, 811, 822, 832, 833, 841, 843, 873, 885, 924, 980, 1190, 1272, 1274, 1275, 1279, 1319], "under": [53, 55, 56, 57, 58, 91, 92, 255, 308, 393, 803, 804, 806, 807, 811, 812, 813, 816, 818, 819, 820, 837, 888, 924, 1311, 1313, 1315, 1320, 1324, 1325, 1326], "physic": [53, 66, 92, 120, 121, 213, 308, 370, 713, 811, 828, 858, 859, 924, 981, 982, 1302, 1319], "equal": [53, 92, 120, 121, 122, 134, 143, 144, 145, 146, 164, 186, 193, 196, 213, 223, 254, 271, 308, 366, 367, 391, 444, 450, 451, 453, 471, 498, 541, 585, 598, 604, 611, 612, 613, 615, 617, 619, 621, 624, 626, 628, 645, 671, 672, 701, 714, 715, 733, 788, 789, 801, 807, 811, 827, 850, 853, 859, 869, 887, 893, 924, 1004, 1046, 1070, 1158, 1184, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1211, 1252, 1253, 1282, 1319, 1328], "concaten": [53, 62, 91, 92, 185, 230, 308, 594, 648, 737, 738, 811, 872, 924, 986, 1172, 1229, 1319], "introduc": [53, 92, 691, 693, 694, 1272, 1274, 1275], "overhead": [53, 92, 134, 137, 138, 139], "amount": [53, 71, 92, 323, 553, 757, 811], "depend": [53, 59, 92, 122, 142, 338, 339, 503, 504, 553, 561, 598, 601, 757, 760, 763, 769, 783, 811, 950, 951, 1120, 1121, 1184, 1186, 1319, 1328], "categori": [53, 72, 92, 264, 308, 369, 370, 391, 476, 598, 811, 979, 981, 1004, 1088, 1184, 1296, 1319], "nest": [53, 115, 151, 152, 177, 308, 823, 1068, 1319, 1327, 1328], "clear": [53, 91, 167, 308, 831, 924, 991, 1319], "outermost": 53, "s1": [53, 91, 92, 145, 146, 185, 308, 969, 1067, 1084, 1114, 1122, 1158, 1187, 1310, 1319], "color": [53, 91, 92, 294, 361, 362, 363, 364, 365, 653, 720, 811, 912, 972, 973, 974, 975, 976, 1234, 1307, 1319], "red": [53, 91, 92, 294, 720, 811, 912, 1307, 1319], "green": [53, 91, 92, 294, 720, 811, 912, 1307, 1319], "blue": [53, 91, 92, 361, 362, 363, 364, 365, 720, 811, 1307, 1319], "concat": [53, 91, 92, 121, 213, 308, 986, 1084, 1172, 1187, 1319], "decor": [53, 55, 56, 57, 58, 150, 154, 216, 308, 553, 811, 822, 823, 1166, 1319], "dure": [53, 120, 121, 134, 159, 179, 308, 1075, 1319], "afterward": [53, 801], "construct_categor": 53, "frametyp": [54, 1327], "joinstrategi": [54, 212, 308, 858, 924], "outer": [54, 62, 212, 276, 308, 858, 896, 924], "descend": [54, 164, 248, 254, 271, 308, 333, 353, 367, 535, 601, 634, 644, 645, 715, 720, 733, 811, 827, 882, 887, 893, 924, 945, 965, 1110, 1152, 1186, 1214, 1226, 1307, 1319], "fill": [54, 62, 166, 180, 181, 250, 251, 275, 308, 360, 381, 384, 460, 461, 467, 479, 613, 615, 619, 626, 635, 636, 668, 678, 762, 784, 787, 802, 811, 844, 845, 883, 884, 901, 924, 1077, 1078, 1091, 1177, 1197, 1198, 1200, 1203, 1204, 1205, 1216, 1217, 1249, 1259, 1319], "sort": [54, 55, 143, 144, 164, 193, 194, 196, 197, 213, 223, 230, 231, 240, 248, 271, 277, 291, 302, 308, 333, 366, 367, 370, 453, 462, 553, 590, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 634, 645, 714, 715, 720, 722, 733, 774, 811, 827, 841, 850, 851, 853, 854, 859, 869, 872, 873, 877, 882, 885, 893, 909, 920, 924, 929, 945, 981, 1070, 1110, 1214, 1304, 1307, 1319, 1328], "origin": [54, 120, 121, 134, 174, 182, 273, 308, 396, 397, 429, 430, 444, 462, 495, 510, 552, 573, 590, 603, 604, 605, 606, 608, 651, 652, 657, 664, 731, 732, 811, 839, 846, 894, 924, 1004, 1008, 1009, 1045, 1046, 1060, 1079, 1127, 1165, 1184, 1190, 1191, 1193, 1232, 1233, 1238, 1245, 1319], "In": [54, 61, 122, 124, 135, 136, 139, 150, 154, 159, 177, 179, 193, 194, 196, 197, 213, 216, 227, 240, 266, 308, 551, 553, 610, 752, 811, 833, 850, 851, 853, 854, 877, 924, 1068, 1075, 1187, 1319], "duplic": [54, 96, 205, 212, 213, 273, 276, 308, 318, 481, 495, 573, 598, 811, 858, 859, 894, 896, 924, 1094, 1184, 1319], "suitabl": [54, 62, 122, 148, 216, 308, 553, 633, 811, 1166, 1210, 1319], "get": [54, 61, 127, 133, 140, 164, 168, 175, 184, 188, 190, 193, 194, 196, 197, 199, 200, 205, 207, 208, 215, 218, 225, 226, 231, 240, 241, 245, 249, 253, 259, 267, 271, 280, 291, 302, 308, 317, 331, 332, 333, 335, 343, 346, 358, 367, 369, 381, 382, 383, 384, 385, 386, 387, 388, 389, 398, 409, 463, 469, 475, 494, 497, 500, 513, 519, 542, 554, 555, 556, 561, 563, 568, 582, 583, 592, 593, 599, 609, 610, 643, 647, 707, 708, 714, 715, 717, 721, 733, 735, 760, 765, 769, 774, 775, 776, 777, 779, 780, 781, 783, 792, 796, 800, 811, 827, 832, 833, 834, 840, 847, 850, 851, 853, 854, 855, 860, 862, 877, 878, 886, 891, 893, 898, 909, 920, 924, 928, 943, 944, 945, 946, 947, 955, 958, 970, 979, 986, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1010, 1021, 1065, 1080, 1084, 1087, 1092, 1094, 1112, 1117, 1130, 1136, 1159, 1167, 1169, 1170, 1172, 1174, 1175, 1176, 1181, 1182, 1185, 1194, 1225, 1228, 1290, 1296, 1301, 1304, 1308, 1309, 1319], "speedup": [54, 210, 216, 308, 553, 811, 1166, 1319], "receiv": [54, 122, 134, 216, 230, 294, 308, 553, 594, 811, 872, 924, 1328], "now": [54, 125, 240, 308, 430, 444, 877, 924, 1046, 1060, 1275], "One": [54, 171, 227, 231, 270, 308, 320, 589, 729, 740, 760, 766, 769, 777, 779, 782, 783, 791, 811, 836, 924, 929, 1005, 1319], "whose": [54, 213, 231, 308, 456, 759, 811, 859, 924, 929], "uniqu": [54, 147, 148, 149, 152, 154, 163, 207, 212, 227, 231, 243, 299, 308, 324, 335, 350, 391, 494, 526, 572, 598, 691, 693, 694, 698, 718, 720, 729, 782, 811, 826, 858, 917, 924, 928, 947, 962, 1004, 1112, 1143, 1173, 1184, 1272, 1274, 1275, 1279, 1305, 1307, 1319], "post": 54, "constrain": [54, 174, 308, 839, 924], "newli": 54, "boolean": [54, 150, 164, 182, 185, 254, 271, 308, 319, 320, 321, 336, 337, 340, 361, 364, 365, 367, 412, 462, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 501, 502, 506, 587, 589, 592, 593, 645, 662, 715, 722, 723, 733, 734, 793, 801, 811, 827, 846, 887, 893, 924, 929, 933, 934, 946, 948, 949, 952, 972, 1024, 1079, 1092, 1093, 1094, 1096, 1097, 1098, 1100, 1101, 1103, 1104, 1105, 1106, 1107, 1108, 1112, 1118, 1119, 1123, 1178, 1181, 1182, 1212, 1230, 1300, 1310, 1319], "know": [54, 122, 231, 308, 541, 551, 811, 1309, 1319], "2022": [54, 165, 171, 191, 308, 402, 430, 444, 691, 752, 753, 755, 756, 757, 763, 829, 836, 924, 929, 1014, 1025, 1046, 1060, 1272], "df3": [54, 308], "set_tbl_format": 54, "09": [54, 120, 171, 240, 308, 398, 402, 422, 423, 610, 695, 751, 752, 754, 799, 811, 836, 877, 924, 929, 1010, 1276], "02": [54, 165, 171, 191, 193, 240, 277, 308, 398, 400, 402, 409, 422, 423, 426, 429, 435, 438, 441, 443, 447, 610, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 630, 691, 693, 694, 698, 735, 751, 752, 753, 754, 755, 756, 757, 811, 829, 836, 850, 877, 924, 929, 969, 1012, 1014, 1016, 1017, 1021, 1022, 1028, 1029, 1035, 1038, 1039, 1040, 1045, 1046, 1050, 1051, 1054, 1057, 1059, 1060, 1158, 1272, 1274, 1275, 1279], "03": [54, 115, 120, 165, 193, 213, 240, 277, 308, 400, 402, 403, 409, 422, 423, 426, 429, 430, 433, 435, 436, 437, 438, 441, 443, 444, 447, 453, 466, 610, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 693, 698, 751, 752, 753, 754, 755, 756, 757, 811, 829, 850, 877, 924, 1012, 1014, 1015, 1021, 1022, 1028, 1029, 1038, 1039, 1040, 1045, 1046, 1049, 1051, 1052, 1053, 1054, 1057, 1059, 1274, 1279], "af1": 54, "af2": 54, "af3": 54, "keep": [54, 120, 121, 134, 273, 276, 277, 308, 468, 495, 552, 566, 574, 605, 736, 811, 894, 896, 924, 1165, 1190, 1319], "easili": [54, 246, 270, 281, 286, 308, 793, 879, 899, 904, 924], "dot": [54, 811, 885, 924, 1319], "product": [54, 169, 212, 308, 383, 388, 395, 811, 843, 858, 924, 997, 1001, 1007, 1319], "fill_nul": [54, 180, 308, 460, 811, 844, 901, 924, 1077, 1319], "sum_horizont": [54, 257, 308, 794], "167": 54, "47": [54, 171, 308, 626, 627, 811, 836, 924], "callabl": [55, 56, 57, 58, 134, 162, 185, 216, 230, 235, 288, 294, 308, 323, 357, 541, 549, 550, 551, 553, 574, 575, 594, 611, 612, 728, 743, 744, 747, 748, 761, 772, 773, 774, 786, 811, 863, 864, 872, 875, 906, 912, 924, 936, 969, 1158, 1166, 1195, 1196, 1319], "by_first_letter_of_column_nam": 55, "f": [55, 121, 122, 191, 211, 261, 272, 275, 308, 316, 357, 541, 637, 656, 691, 694, 728, 737, 772, 811, 969, 1158, 1237, 1272, 1275], "fromkei": [55, 57], "by_first_letter_of_column_valu": 55, "starts_with": [55, 361, 364, 649, 655, 888, 924, 929, 1236], "to_seri": [55, 188, 308, 691, 734, 787, 1272], "xy": [55, 57], "yz": [55, 57], "b1": [55, 57], "b2": [55, 57], "pow_n": 56, "powersofn": 56, "next": [56, 193, 213, 240, 277, 308, 360, 398, 426, 430, 444, 601, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 752, 753, 755, 756, 798, 799, 811, 850, 859, 877, 924, 981, 1010, 1042, 1046, 1060, 1186, 1319], "ceil": [56, 811, 1319], "previou": [56, 159, 398, 573, 574, 576, 578, 580, 581, 591, 596, 704, 706, 811, 1010, 1180, 1319], "floor": [56, 466, 811, 1319], "nearest": [56, 171, 213, 233, 300, 308, 372, 465, 479, 599, 621, 622, 785, 811, 836, 859, 874, 918, 924, 985, 1005, 1081, 1091, 1185, 1201, 1319], "24": [56, 142, 193, 213, 216, 240, 255, 277, 308, 383, 390, 406, 426, 427, 430, 438, 444, 446, 571, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 752, 753, 755, 756, 757, 798, 799, 811, 850, 859, 877, 924, 1003, 1042, 1046, 1054, 1060, 1114, 1319], "001": [56, 701, 757, 1055, 1056, 1058, 1282], "next_pow2": 56, "prev_pow2": 56, "nearest_pow2": 56, "32": [56, 68, 73, 76, 86, 208, 213, 240, 308, 571, 610, 637, 811, 877, 924, 1007, 1043, 1180, 1201, 1319], "128": [56, 70, 1180, 1319], "split_by_column_dtyp": 57, "collect_al": [57, 61, 832, 833, 924], "31": [58, 171, 255, 308, 401, 402, 406, 416, 422, 426, 437, 691, 751, 754, 763, 771, 836, 924, 929, 1011, 1013, 1014, 1018, 1031, 1038, 1053, 1272, 1328], "42": [58, 171, 198, 223, 240, 308, 610, 811, 836, 869, 877, 924, 1086, 1319], "961": 58, "1764": 58, "4160": 58, "detail": [59, 109, 122, 123, 143, 145, 161, 193, 308, 850, 924, 1327, 1328], "build": [59, 109, 929, 1328], "info": [59, 124, 135, 136, 142, 308, 311, 1319, 1323], "host": [59, 120, 126, 128, 137, 139], "git": 59, "compil": [59, 338, 339, 503, 504, 950, 951, 1120, 1121], "flag": [59, 147, 308, 634, 649, 657, 658, 660, 674, 675, 811, 841, 863, 864, 924, 1214, 1230, 1238, 1239, 1241, 1255, 1256, 1319], "pyo3": 59, "built": 59, "lazy_fram": [60, 61], "iter": [60, 61, 62, 72, 108, 122, 153, 155, 164, 172, 182, 192, 193, 194, 195, 196, 197, 209, 210, 211, 240, 241, 242, 243, 246, 247, 248, 254, 271, 272, 281, 282, 285, 286, 308, 367, 390, 398, 462, 590, 645, 715, 725, 727, 733, 735, 736, 737, 738, 746, 750, 776, 778, 781, 790, 793, 795, 801, 807, 811, 827, 838, 846, 849, 850, 851, 852, 853, 854, 877, 879, 880, 882, 887, 893, 899, 900, 904, 924, 928, 1003, 1010, 1209, 1319, 1328], "comm_subplan_elim": [60, 61, 832, 833, 841, 843, 873, 885, 924], "comm_subexpr_elim": [60, 61, 832, 833, 841, 843, 873, 885, 924], "comput": [60, 62, 95, 177, 192, 213, 267, 273, 286, 300, 308, 315, 325, 326, 327, 328, 329, 330, 347, 348, 349, 354, 355, 359, 371, 376, 377, 378, 381, 382, 383, 384, 385, 386, 387, 388, 389, 395, 449, 457, 496, 522, 523, 524, 525, 529, 530, 531, 532, 536, 543, 544, 545, 546, 570, 590, 591, 597, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 639, 640, 641, 642, 646, 711, 712, 720, 725, 727, 731, 732, 733, 739, 741, 758, 778, 788, 789, 801, 811, 832, 849, 856, 858, 859, 894, 901, 904, 918, 924, 931, 937, 938, 939, 940, 941, 942, 959, 960, 961, 966, 967, 971, 984, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1007, 1066, 1068, 1073, 1115, 1139, 1140, 1141, 1142, 1146, 1147, 1148, 1149, 1153, 1160, 1161, 1162, 1163, 1171, 1180, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1221, 1222, 1223, 1224, 1227, 1293, 1294, 1301, 1307, 1319], "graph": [60, 122, 214, 308, 832, 856, 901, 924], "parallel": [60, 62, 117, 123, 132, 139, 193, 196, 213, 214, 230, 247, 282, 308, 390, 511, 720, 801, 811, 823, 850, 853, 858, 859, 880, 900, 912, 924, 1003, 1128, 1307, 1319], "threadpool": 60, "Will": [60, 61, 832, 833, 841, 843, 873, 885, 924, 1319], "try": [60, 61, 105, 120, 121, 126, 132, 134, 137, 139, 832, 833, 841, 843, 873, 885, 924], "branch": [60, 61, 832, 833, 841, 843, 873, 885, 924], "subplan": [60, 61, 832, 833, 841, 843, 873, 885, 924], "union": [60, 61, 62, 532, 832, 833, 841, 843, 873, 885, 924, 929, 1149], "subexpress": [60, 61, 832, 833, 841, 843, 873, 885, 924], "reus": [60, 61, 832, 833, 841, 843, 873, 885, 924], "explain": [60, 61, 832, 833, 924], "gevent": [61, 142, 833, 924], "await": [61, 122, 833, 924], "_geventdataframeresult": [61, 833, 924], "asynchron": [61, 122, 833, 924], "them": [61, 108, 110, 111, 112, 114, 122, 123, 129, 130, 131, 132, 134, 138, 139, 178, 179, 193, 213, 223, 240, 270, 277, 308, 345, 453, 480, 518, 582, 583, 590, 610, 737, 752, 753, 755, 756, 798, 799, 811, 833, 842, 850, 859, 869, 877, 924, 929, 957, 1070, 1075, 1135, 1175, 1176, 1319], "schedul": [61, 833, 924], "insid": [61, 833, 924], "almost": [61, 216, 294, 308, 691, 693, 694, 833, 924, 1166, 1272, 1274, 1275, 1319], "instantli": [61, 833, 924], "asyncio": [61, 122, 833, 924], "releas": [61, 125, 277, 308, 323, 430, 444, 553, 811, 833, 924, 1046, 1060, 1319, 1328], "greenlet": [61, 833, 924], "task": [61, 833, 924], "wrapper": [61, 833, 924], "event": [61, 833, 924], "asyncresult": [61, 833, 924], "timeout": [61, 833, 924], "collect_async": [61, 924], "set_except": [61, 833, 924], "rerais": [61, 833, 924], "polarstyp": 62, "concatmethod": 62, "vertic": [62, 179, 217, 219, 224, 257, 275, 279, 308, 648, 1229], "rechunk": [62, 108, 113, 120, 121, 126, 128, 132, 134, 137, 138, 139, 179, 308, 811, 986, 1075, 1084, 1172, 1319], "combin": [62, 182, 193, 198, 213, 240, 277, 308, 320, 334, 444, 453, 466, 589, 605, 610, 669, 679, 685, 686, 687, 688, 752, 753, 755, 756, 798, 799, 801, 811, 850, 859, 877, 885, 924, 1046, 1060, 1070, 1190, 1250, 1260, 1266, 1267, 1268, 1269, 1319], "vertical_relax": 62, "diagon": [62, 272, 308], "diagonal_relax": 62, "vstack": [62, 179, 308], "addition": [62, 241, 308], "coerc": [62, 604, 811], "supertyp": [62, 181, 270, 308, 322, 811, 845, 924, 928, 1319], "mismatch": [62, 103, 130, 138, 143, 145], "find": [62, 183, 189, 308, 633, 649, 650, 811, 1210, 1231, 1319], "miss": [62, 120, 121, 134, 180, 308, 360, 452, 454, 455, 460, 467, 489, 491, 541, 811, 844, 924, 1069, 1071, 1072, 1077, 1309, 1319], "stack": [62, 201, 279, 308], "length": [62, 63, 79, 131, 134, 148, 152, 191, 193, 194, 196, 197, 240, 253, 308, 311, 390, 430, 444, 534, 541, 562, 605, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 643, 661, 665, 666, 668, 670, 671, 672, 678, 680, 692, 701, 784, 787, 788, 789, 802, 811, 850, 851, 853, 854, 873, 877, 886, 924, 928, 986, 1003, 1014, 1046, 1060, 1151, 1158, 1177, 1190, 1193, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1225, 1242, 1246, 1247, 1249, 1251, 1252, 1253, 1259, 1261, 1273, 1282, 1319], "don": [62, 193, 213, 216, 273, 275, 308, 323, 390, 511, 553, 811, 850, 894, 924, 929, 1003, 1067, 1128, 1166, 1211, 1309, 1319], "auto": [62, 108, 110, 111, 112, 114, 129, 130, 132, 138, 139, 272, 308, 924, 1328], "logic": [62, 216, 294, 308, 311, 319, 321, 393, 553, 713, 724, 725, 726, 727, 774, 811, 837, 858, 881, 912, 924, 933, 934, 1166, 1300, 1302, 1319, 1323], "align_fram": 62, "pattern": [62, 120, 121, 134, 137, 138, 139, 210, 308, 559, 649, 650, 651, 652, 657, 658, 659, 660, 674, 675, 676, 912, 929, 1209, 1212, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1241, 1255, 1256, 1257, 1319], "collis": 62, "need": [62, 115, 120, 121, 123, 193, 194, 196, 197, 240, 243, 252, 308, 541, 610, 637, 695, 757, 784, 787, 802, 811, 850, 851, 853, 854, 877, 924, 1218, 1276, 1319, 1328], "sure": [62, 108, 113, 120, 121, 126, 128, 132, 193, 194, 196, 197, 234, 240, 308, 610, 811, 850, 851, 853, 854, 877, 924, 928], "contigu": [62, 108, 113, 120, 121, 126, 128, 132, 134, 137, 138, 139, 234, 308], "relev": 62, "df_h1": 62, "l1": 62, "l2": 62, "df_h2": 62, "r1": 62, "r2": 62, "r3": 62, "df_d1": 62, "df_d2": 62, "df_a1": 62, "df_a2": 62, "df_a3": 62, "inner": [63, 79, 149, 212, 255, 276, 308, 345, 356, 395, 518, 540, 553, 604, 713, 811, 858, 881, 888, 896, 924, 957, 968, 1007, 1135, 1157, 1166, 1302, 1319], "polarsdatatyp": [63, 79, 120, 121, 134, 147, 148, 149, 150, 151, 154, 162, 165, 216, 270, 308, 323, 368, 456, 549, 551, 552, 553, 605, 662, 663, 728, 759, 771, 772, 773, 774, 784, 787, 802, 807, 811, 829, 924, 929, 936, 978, 1165, 1166, 1190, 1243, 1244, 1319], "pythondatatyp": [63, 79], "within": [63, 79, 143, 144, 145, 146, 192, 193, 194, 195, 196, 197, 198, 213, 240, 277, 308, 474, 601, 645, 811, 850, 851, 853, 854, 859, 877, 924, 1086, 1319, 1327], "attribut": [63, 66, 69, 70, 71, 72, 79, 83, 147, 308, 803, 804, 806, 807, 812, 813, 816, 818, 819, 820, 924, 1311, 1313, 1315, 1319, 1320, 1324, 1325, 1326], "categoricalord": [66, 370, 981], "encod": [66, 72, 82, 120, 121, 134, 264, 308, 362, 468, 608, 653, 703, 811, 973, 1193, 1234, 1296, 1319], "lexic": [66, 370, 929, 981, 983], "calendar": [68, 69, 193, 213, 240, 277, 308, 401, 413, 416, 426, 430, 444, 448, 453, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 752, 753, 755, 756, 757, 798, 799, 811, 850, 859, 877, 924, 1013, 1025, 1031, 1042, 1046, 1060, 1064, 1070, 1319], "bit": [68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 84, 85, 86, 87, 88, 603, 649, 811, 1188, 1230, 1319], "sign": [68, 69, 71, 75, 76, 77, 78, 84, 426, 603, 674, 675, 701, 811, 929, 1042, 1102, 1188, 1255, 1256, 1282, 1319], "dai": [68, 69, 84, 193, 196, 211, 213, 240, 277, 308, 398, 422, 423, 426, 427, 430, 433, 436, 437, 444, 446, 453, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 735, 751, 752, 753, 754, 755, 756, 757, 798, 799, 811, 850, 853, 859, 877, 924, 929, 1010, 1038, 1039, 1042, 1043, 1046, 1049, 1052, 1053, 1060, 1062, 1070, 1319], "unix": [68, 69, 409, 763, 1021], "epoch": [68, 69, 763], "time_unit": [69, 71, 400, 402, 409, 435, 447, 694, 752, 753, 754, 755, 756, 757, 763, 929, 1012, 1014, 1021, 1051, 1063, 1275], "time_zon": [69, 403, 405, 429, 694, 752, 753, 754, 755, 756, 929, 1011, 1015, 1020, 1045, 1275], "timezon": [69, 124, 135, 405, 929], "microsecond": [69, 71, 193, 210, 213, 240, 242, 243, 263, 277, 308, 426, 430, 439, 444, 453, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 752, 753, 754, 755, 756, 757, 797, 798, 799, 811, 850, 859, 873, 877, 924, 929, 1042, 1046, 1055, 1060, 1070, 1319], "zone": [69, 399, 403, 429, 453, 694, 752, 753, 754, 755, 756, 811, 929, 1011, 1015, 1045, 1070, 1275, 1319], "zoneinfo": [69, 929], "available_timezon": [69, 929], "progress": [70, 72], "expect": [70, 72, 99, 102, 107, 120, 122, 134, 541, 553, 771, 811, 861, 863, 864, 924], "digit": [70, 594, 630, 631, 658, 811, 1206, 1207, 1233, 1239, 1319, 1328], "offset": [71, 120, 121, 125, 126, 128, 132, 134, 137, 138, 139, 187, 193, 194, 196, 197, 240, 253, 260, 277, 283, 284, 308, 398, 399, 408, 422, 423, 426, 430, 444, 470, 515, 534, 610, 643, 680, 710, 811, 848, 850, 851, 853, 854, 877, 886, 892, 902, 903, 924, 1010, 1011, 1020, 1038, 1039, 1042, 1046, 1060, 1083, 1132, 1151, 1225, 1261, 1275, 1292, 1319], "integer_list": 79, "float_list": 79, "wrap": [81, 115, 480, 811], "arbitrari": [81, 393, 811, 837, 924, 929], "schemadict": [83, 108, 110, 111, 112, 113, 114, 120, 122, 123, 125, 131, 132, 134, 139, 308, 793, 863, 864, 906, 912, 924], "composit": [83, 1328], "nanosecond": [84, 193, 213, 240, 277, 308, 426, 430, 431, 442, 444, 453, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 752, 753, 755, 756, 757, 798, 799, 811, 850, 859, 877, 924, 1042, 1046, 1047, 1058, 1060, 1070, 1319], "midnight": 84, "unsign": [85, 86, 87, 88, 603, 811, 929, 1102, 1188, 1319], "static": [89, 906, 912], "enable_string_cach": 91, "stringcach": [91, 92, 212, 308, 823, 980, 982], "reliabl": [91, 92], "wai": [91, 92, 108, 110, 111, 112, 114, 129, 130, 138, 192, 211, 230, 254, 286, 308, 590, 594, 645, 657, 740, 807, 811, 849, 872, 887, 904, 912, 924, 1238], "until": [91, 193, 196, 214, 308, 671, 672, 701, 850, 853, 924, 1252, 1253, 1282], "19": [92, 125, 150, 162, 183, 186, 193, 194, 195, 196, 197, 202, 213, 217, 219, 224, 236, 237, 240, 251, 257, 260, 277, 288, 308, 323, 374, 375, 385, 386, 387, 388, 389, 401, 407, 411, 415, 418, 420, 425, 429, 430, 432, 444, 483, 487, 490, 495, 507, 521, 539, 549, 550, 552, 596, 610, 611, 615, 616, 618, 619, 620, 622, 636, 651, 663, 667, 668, 669, 670, 673, 678, 679, 685, 691, 694, 695, 706, 709, 710, 728, 747, 748, 749, 750, 752, 754, 772, 811, 850, 851, 852, 853, 854, 859, 863, 877, 884, 892, 906, 924, 936, 981, 989, 990, 999, 1000, 1001, 1002, 1004, 1013, 1019, 1023, 1030, 1033, 1036, 1041, 1045, 1046, 1048, 1060, 1093, 1097, 1099, 1102, 1103, 1109, 1111, 1113, 1124, 1138, 1156, 1165, 1184, 1195, 1211, 1213, 1217, 1232, 1244, 1248, 1249, 1250, 1251, 1254, 1259, 1260, 1266, 1272, 1275, 1276, 1291, 1292, 1299, 1309, 1319], "longer": [92, 120, 121, 134], "accept": [92, 118, 120, 121, 124, 126, 128, 132, 150, 164, 172, 192, 195, 246, 247, 250, 254, 271, 281, 282, 286, 308, 316, 367, 373, 456, 480, 552, 590, 605, 645, 715, 723, 725, 727, 733, 736, 737, 738, 746, 750, 759, 776, 778, 781, 790, 793, 795, 801, 811, 827, 838, 849, 852, 879, 880, 883, 887, 893, 899, 900, 904, 924, 928, 988, 1092, 1190, 1216, 1319], "disable_string_cach": 92, "least": [99, 591, 657, 659, 811, 1180, 1238, 1240, 1319], "unexpect": [101, 103, 122, 551, 553, 811, 1166, 1319], "caus": [101, 103, 109, 120, 121, 134, 143, 161, 179, 266, 308, 551, 811, 1075, 1300, 1319], "panic": 101, "incompat": 105, "arrai": [108, 112, 120, 121, 132, 177, 178, 261, 266, 267, 308, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 374, 375, 381, 382, 383, 384, 385, 386, 387, 388, 389, 505, 522, 523, 524, 525, 527, 536, 537, 540, 543, 545, 551, 613, 615, 619, 626, 634, 758, 811, 842, 924, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 989, 990, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1007, 1068, 1122, 1139, 1140, 1141, 1142, 1144, 1152, 1153, 1154, 1157, 1160, 1162, 1163, 1197, 1198, 1200, 1203, 1204, 1205, 1214, 1219, 1295, 1300, 1301, 1309, 1319], "chunkedarrai": [108, 226, 308], "recordbatch": [108, 211, 308], "schemadefinit": [108, 110, 111, 112, 114, 129, 130, 138, 308, 924], "schema_overrid": [108, 110, 111, 112, 113, 114, 122, 123, 125, 129, 130, 131, 211, 266, 308, 924, 929], "part": [108, 125, 270, 308, 590, 658, 682, 683, 811, 841, 843, 873, 885, 901, 924, 1239, 1263, 1264], "closest": [108, 213, 308], "pair": [108, 110, 111, 112, 114, 129, 130, 138, 235, 308, 875, 924, 1328], "sever": [108, 110, 111, 112, 114, 129, 130, 138, 308, 924, 1328], "form": [108, 110, 111, 112, 114, 129, 130, 138, 210, 242, 275, 308, 591, 811, 924, 1180, 1319], "dimens": [108, 110, 112, 114, 129, 130, 138, 308, 606, 811, 924, 1191, 1319], "supportsinterchang": 109, "allow_copi": [109, 161, 266, 308, 1300, 1319], "interchang": [109, 161], "__dataframe__": 109, "convers": [109, 125, 161, 210, 211, 242, 243, 263, 266, 267, 308, 403, 691, 693, 694, 698, 823, 1015, 1085, 1272, 1274, 1275, 1279, 1299, 1300, 1301, 1319], "latest": [109, 124, 135, 161, 429, 430, 444, 467, 562, 691, 694, 754, 811, 1045, 1046, 1060, 1272, 1275], "from_panda": 109, "from_arrow": 109, "effici": [109, 122, 125, 209, 211, 308, 551, 811], "convert": [109, 113, 124, 125, 131, 135, 161, 262, 263, 264, 265, 266, 267, 269, 270, 308, 356, 357, 392, 403, 433, 436, 540, 541, 550, 551, 574, 600, 659, 673, 691, 693, 694, 695, 696, 698, 703, 811, 924, 928, 968, 969, 982, 1015, 1049, 1052, 1157, 1158, 1240, 1254, 1272, 1274, 1275, 1276, 1277, 1279, 1285, 1288, 1298, 1299, 1300, 1301, 1309, 1319], "pd": [109, 113, 713, 811, 1301, 1302, 1319], "df_pd": 109, "dfi": [109, 161], "strict": [110, 111, 114, 165, 308, 362, 368, 649, 653, 660, 673, 691, 693, 694, 696, 698, 811, 829, 924, 973, 978, 1067, 1211, 1230, 1234, 1241, 1254, 1272, 1274, 1275, 1277, 1279, 1319], "clone": [110, 111, 112, 113, 114, 166, 266, 308, 830, 924, 987, 1300, 1309, 1319], "dimension": [110, 112, 114, 266, 308, 924, 1319], "exactli": [110, 111, 114, 143, 144, 145, 146, 149, 150, 154, 308, 682, 683, 689, 690, 757, 924, 1219, 1263, 1264, 1270, 1271, 1319], "infer_schema_length": [111, 114, 120, 121, 122, 125, 129, 131, 134, 138, 308, 662, 663, 924, 1243, 1244], "NOT": [111, 209, 308, 541, 560, 1327], "typic": [111, 122, 125, 139, 216, 308, 408, 929, 1020, 1166, 1319], "clearer": 111, "partial": [111, 120, 134, 308, 924], "scan": [111, 114, 120, 121, 122, 125, 129, 131, 134, 135, 136, 137, 138, 139, 140, 193, 194, 196, 197, 240, 308, 662, 663, 843, 850, 851, 853, 854, 855, 862, 877, 924, 1243, 1244], "slow": [111, 114, 120, 121, 122, 125, 129, 131, 134, 138, 308, 323, 390, 553, 612, 662, 663, 811, 912, 924, 1003, 1196, 1243, 1244, 1319], "present": [111, 150, 485, 552, 687, 688, 811, 843, 885, 924, 1165, 1309, 1319], "np": [112, 182, 266, 308, 469, 633, 709, 811, 846, 924, 1082, 1096, 1101, 1105, 1106, 1209, 1210, 1291, 1319], "ndarrai": [112, 182, 266, 308, 469, 633, 709, 811, 846, 924, 1082, 1209, 1210, 1213, 1291, 1300, 1319], "numpi": [112, 142, 169, 210, 242, 243, 263, 266, 267, 308, 551, 582, 583, 612, 811, 924, 1096, 1101, 1105, 1106, 1175, 1176, 1196, 1300, 1301, 1309, 1319], "columnar": [112, 114, 210, 242, 308], "interpret": [112, 114, 120, 121, 134, 308, 924], "yield": [112, 114, 120, 121, 122, 134, 177, 179, 209, 272, 308, 466, 551, 590, 811, 924, 1068, 1075, 1319], "conclus": [112, 114, 308, 924], "datetimeindex": 113, "nan_to_nul": [113, 308, 924, 1319], "include_index": 113, "instal": [113, 120, 121, 123, 126, 128, 169, 267, 308, 398, 735, 885, 924, 1010, 1301, 1319], "nan": [113, 150, 161, 180, 267, 308, 396, 397, 450, 451, 460, 471, 473, 479, 489, 491, 492, 493, 498, 548, 554, 568, 582, 583, 584, 585, 612, 716, 739, 811, 844, 924, 938, 942, 1008, 1009, 1077, 1105, 1106, 1175, 1176, 1196, 1300, 1301, 1319, 1328], "nameless": 113, "enumer": [113, 120, 121, 134, 211, 308], "regardless": [113, 192, 195, 213, 308, 403, 664, 801, 1015, 1245], "pleas": [113, 122, 123, 193, 308, 311, 453, 613, 615, 617, 619, 621, 624, 626, 628, 740, 752, 757, 811, 850, 924, 1070, 1319, 1323], "reset_index": [113, 193, 308, 850, 924], "prior": 113, "pd_df": 113, "pd_seri": 113, "its": [115, 142, 177, 308, 402, 430, 444, 453, 608, 645, 801, 811, 982, 1014, 1046, 1060, 1068, 1070, 1193, 1319], "repr": 115, "trim": 115, "whitespac": [115, 669, 679, 685, 686, 687, 688, 1250, 1260, 1266, 1267, 1268, 1269], "prompt": 115, "extract": [115, 255, 308, 401, 404, 406, 407, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 427, 428, 431, 432, 434, 437, 438, 439, 440, 441, 442, 443, 445, 446, 448, 594, 658, 659, 662, 663, 664, 680, 682, 811, 1013, 1016, 1017, 1018, 1019, 1022, 1023, 1025, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1040, 1041, 1043, 1044, 1047, 1048, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1061, 1062, 1064, 1239, 1240, 1243, 1244, 1245, 1261], "to_init_repr": [115, 308, 1319], "truncat": [115, 120, 121, 134, 191, 193, 196, 210, 242, 243, 263, 308, 850, 853, 873, 924], "identifi": [115, 122, 222, 229, 273, 285, 308, 868, 894, 924], "compound": [115, 243, 308, 929], "neither": [115, 125, 131, 244, 308, 357, 541, 969, 1158], "source_ac": 115, "source_cha": 115, "ident": [115, 166, 167, 308, 433, 608, 609, 811, 830, 831, 924, 987, 991, 1049, 1193, 1194, 1319], "timestamp": [115, 124, 135, 193, 196, 308, 429, 430, 444, 763, 850, 853, 924, 1045, 1046, 1060], "tor_id": 115, "nnel_id": 115, "\u03bc": [115, 165, 193, 210, 240, 242, 243, 263, 277, 308, 399, 400, 402, 403, 404, 405, 408, 410, 414, 417, 419, 422, 423, 424, 426, 429, 430, 431, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 610, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 691, 694, 754, 755, 756, 757, 763, 811, 829, 850, 859, 877, 924, 929, 1011, 1012, 1014, 1015, 1016, 1017, 1020, 1021, 1022, 1028, 1029, 1035, 1038, 1039, 1040, 1042, 1045, 1046, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1063, 1272, 1275], "asia": [115, 929, 1016, 1017, 1050], "tokyo": [115, 929], "123456780": 115, "9876543210": 115, "56": [115, 711, 811], "59": [115, 171, 308, 402, 419, 431, 466, 754, 797, 798, 799, 811, 836, 924, 929, 1014, 1035, 1047], "663053": 115, "jst": [115, 929], "803065983": 115, "2055938745": 115, "38": [115, 147, 150], "050545": 115, "source_actor_id": 115, "source_channel_id": 115, "to_list": [115, 240, 308, 1230, 1241, 1319], "uint32": [116, 142, 165, 177, 240, 284, 308, 333, 338, 339, 379, 453, 469, 472, 499, 503, 504, 520, 604, 609, 610, 651, 652, 665, 666, 709, 713, 740, 767, 770, 811, 829, 877, 903, 924, 929, 946, 950, 951, 978, 1067, 1068, 1070, 1102, 1120, 1121, 1137, 1194, 1211, 1232, 1233, 1246, 1247, 1302, 1319], "regular": [116, 210, 241, 242, 277, 284, 308, 456, 649, 651, 652, 657, 658, 659, 660, 674, 675, 735, 759, 811, 903, 924, 929, 1230, 1232, 1233, 1238, 1239, 1240, 1241, 1255, 1256], "uint64": [116, 198, 240, 284, 308, 338, 339, 453, 474, 503, 504, 603, 610, 811, 877, 903, 924, 950, 951, 1070, 1086, 1120, 1121, 1188, 1319], "bigidx": 116, "over": [117, 120, 121, 122, 124, 125, 134, 150, 151, 162, 179, 209, 210, 211, 216, 241, 242, 243, 255, 272, 285, 288, 294, 308, 323, 390, 393, 453, 461, 550, 551, 553, 561, 563, 564, 565, 566, 574, 575, 601, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 728, 743, 744, 747, 748, 761, 772, 773, 774, 786, 811, 888, 906, 912, 924, 929, 936, 1003, 1070, 1075, 1166, 1197, 1198, 1200, 1204, 1319], "fetch": [117, 134, 214, 308, 832, 855, 862, 924], "ideal": 117, "read_csv_batch": 117, "tpch": [117, 121], "tables_scale_100": [117, 121], "lineitem": [117, 121, 123], "tbl": [117, 121], "try_parse_d": [117, 120, 121, 134], "n_row": [118, 120, 121, 126, 128, 132, 134, 137, 138, 139, 211, 308, 843, 924], "handler": [118, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 393, 811, 837, 924], "builtin": [118, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 393, 811, 837, 924], "instanc": [118, 120, 121, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 139, 150, 154, 159, 165, 179, 185, 308, 368, 562, 613, 615, 617, 619, 621, 624, 626, 628, 743, 747, 761, 807, 811, 829, 864, 902, 903, 924, 978, 1075, 1319], "stop": [118, 120, 121, 126, 128, 132, 134, 137, 138, 139, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 811, 1012, 1015, 1021, 1022, 1029, 1032, 1035, 1040, 1046, 1051], "read_csv": [119, 125, 134], "write_clipboard": [119, 308], "has_head": [120, 121, 125, 134], "new_column": [120, 121, 125, 134, 236, 237, 308], "comment_prefix": [120, 121, 134], "skip_row": [120, 121, 134], "missing_utf8_is_empty_str": [120, 121, 134], "ignore_error": [120, 121, 130, 134, 138], "n_thread": [120, 121], "8192": 120, "csvencod": [120, 121, 134], "low_memori": [120, 121, 132, 134, 138, 139], "skip_rows_after_head": [120, 121, 134], "row_index_nam": [120, 121, 126, 128, 132, 134, 137, 138, 139], "row_index_offset": [120, 121, 126, 128, 132, 134, 137, 138, 139], "sample_s": [120, 121], "eol_char": [120, 121, 134], "raise_if_empti": [120, 121, 125, 131, 134], "truncate_ragged_lin": [120, 121, 134], "decimal_comma": [120, 121, 134], "glob": [120, 121, 132, 134, 137, 138, 139], "fsspec": [120, 121, 126, 128, 132, 135, 136, 137, 142], "remot": [120, 121, 126, 128], "autogener": [120, 121, 134], "column_x": [120, 121, 134], "shorter": [120, 121, 134, 541, 767, 768], "comment": [120, 121, 134], "skip": [120, 121, 125, 132, 134, 139, 213, 275, 308, 936, 1166, 1319], "escap": [120, 121, 123, 134], "complet": [120, 122, 134, 1300, 1319], "wherea": [120, 134, 240, 308, 430, 444, 582, 583, 610, 811, 855, 862, 877, 924, 1046, 1060, 1175, 1176, 1319], "would": [120, 121, 134, 270, 308, 333, 344, 398, 516, 551, 553, 561, 590, 601, 733, 735, 811, 945, 956, 1010, 1133, 1186, 1300, 1319], "prefer": [120, 121, 124, 125, 134, 155, 179, 210, 216, 241, 242, 294, 308, 456, 553, 811, 924, 1075, 1166, 1319, 1328], "treat": [120, 121, 134, 453, 649, 652, 660, 674, 675, 801, 811, 1070, 1230, 1233, 1241, 1255, 1256, 1319], "10000": [120, 211, 308], "issu": [120, 121, 122, 125, 134, 308, 383, 384, 707, 811, 997, 998, 1289, 1319], "iso8601": [120, 121, 134], "succe": [120, 121, 134], "cpu": [120, 121], "buffer": [120, 121, 122, 177, 210, 308, 1068, 1319], "modifi": [120, 121, 134, 156, 159, 179, 201, 209, 210, 279, 308, 334, 429, 447, 649, 657, 658, 660, 674, 675, 811, 935, 1045, 1063, 1075, 1230, 1238, 1239, 1241, 1255, 1256, 1278, 1280, 1281, 1319], "upper": [120, 121, 122, 177, 193, 196, 308, 373, 374, 476, 480, 541, 575, 719, 730, 752, 753, 755, 756, 798, 799, 811, 850, 853, 924, 988, 989, 1068, 1088, 1092, 1164, 1306, 1319], "bound": [120, 121, 177, 193, 196, 308, 344, 373, 374, 375, 480, 514, 516, 539, 541, 547, 719, 730, 752, 753, 755, 756, 798, 799, 811, 850, 853, 924, 956, 988, 989, 990, 1068, 1092, 1131, 1133, 1156, 1164, 1306, 1319], "lossi": [120, 121, 134], "decod": [120, 121, 662], "expens": [120, 121, 132, 134, 138, 139, 153, 155, 193, 194, 196, 197, 210, 216, 240, 241, 242, 243, 272, 273, 308, 323, 553, 811, 836, 850, 851, 853, 854, 877, 894, 924, 1075, 1166, 1319, 1328], "aggreg": [120, 121, 132, 185, 192, 193, 195, 196, 217, 219, 221, 224, 227, 231, 232, 233, 240, 256, 257, 275, 278, 286, 287, 290, 292, 308, 317, 462, 477, 549, 551, 553, 590, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 724, 725, 726, 727, 743, 744, 745, 746, 747, 748, 749, 750, 761, 766, 775, 776, 778, 780, 781, 786, 794, 795, 811, 850, 851, 853, 854, 864, 865, 866, 867, 870, 871, 874, 877, 889, 890, 897, 904, 905, 908, 910, 924, 928, 1089, 1195, 1196, 1197, 1198, 1200, 1203, 1204, 1205, 1319], "parser": 120, "regard": [120, 739], "sens": [120, 126, 128, 137, 223, 277, 308, 590, 811, 869, 924], "particular": [120, 126, 128, 137, 177, 308, 1068, 1319], "usernam": [120, 123, 126, 128, 137], "password": [120, 123, 126, 128, 137], "sampl": [120, 121, 294, 308, 642, 811, 912, 1224, 1319], "estim": [120, 121, 163, 177, 308, 324, 454, 455, 496, 729, 811, 826, 924, 1068, 1071, 1072, 1115, 1319], "alloc": [120, 121, 177, 234, 308, 811, 928, 1068, 1319], "encount": [120, 121, 134, 193, 196, 308, 582, 583, 662, 664, 739, 743, 761, 811, 850, 853, 924, 1175, 1176, 1243, 1245, 1319], "window": [120, 121, 134, 193, 194, 196, 197, 240, 308, 390, 430, 444, 452, 454, 455, 551, 553, 564, 590, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 737, 788, 789, 811, 850, 851, 853, 854, 877, 924, 1003, 1046, 1060, 1069, 1071, 1072, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1319], "rn": [120, 121, 134], "nodataerror": [120, 121, 125, 131, 134], "period": [120, 121, 134, 193, 194, 196, 197, 240, 308, 430, 444, 452, 454, 455, 591, 610, 752, 753, 755, 756, 798, 799, 811, 850, 851, 853, 854, 877, 924, 1046, 1060, 1069, 1071, 1072, 1180, 1319], "expand": [120, 132, 134, 139, 458, 558, 559, 604, 811, 928, 929, 1074, 1319], "rule": [120, 132, 134, 139, 185, 308, 650, 676, 1231, 1257], "lazili": [120, 121, 134, 135, 136, 137, 138, 139, 833, 924], "incorrectli": [120, 193, 194, 196, 197, 240, 308, 453, 541, 610, 811, 850, 851, 853, 854, 877, 924, 1070, 1319], "continu": [120, 132, 391, 598, 642, 811, 1004, 1184, 1224, 1319], "benchmark": [120, 132], "demonstr": [120, 466, 811], "birthdai": 120, "alic": 120, "1995": 120, "bob": [120, 223, 308, 869, 924], "charli": 120, "2002": [120, 412, 426, 1024, 1042, 1064], "08": [120, 143, 144, 145, 146, 171, 213, 240, 255, 308, 398, 402, 422, 423, 430, 610, 691, 755, 757, 811, 836, 877, 924, 929, 1010, 1046, 1060, 1272], "50000": 121, "batchedcsvread": 121, "upon": 121, "creation": 121, "gather": [121, 187, 260, 308, 333, 470, 515, 539, 709, 710, 733, 811, 848, 892, 924, 945, 1083, 1132, 1156, 1291, 1292, 1319], "done": [121, 140, 159, 163, 165, 213, 308, 322, 324, 368, 590, 811, 826, 829, 859, 924, 978, 1319], "next_batch": 121, "big": 121, "interest": [121, 433, 436, 1049, 1052], "seen_group": 121, "big_fil": 121, "df_current_batch": 121, "partition_df": 121, "partition_bi": [121, 211, 308, 564], "as_dict": [121, 229, 308], "fh": 121, "els": [121, 801], "iter_batch": 122, "execute_opt": [122, 123], "client": 122, "packag": [122, 398, 735, 928, 1010], "establish": 122, "async": [122, 833, 924], "aris": 122, "happen": [122, 403, 598, 811, 1015, 1184, 1319], "report": 122, "resultset": 122, "manner": 122, "veri": [122, 210, 272, 308, 553, 811, 912], "poor": 122, "mani": [122, 123, 179, 308, 676, 1075, 1257, 1319], "trip": 122, "still": [122, 123], "exact": [122, 148, 150, 154, 213, 252, 308, 324, 466, 689, 690, 691, 693, 694, 716, 811, 1272, 1274, 1275, 1299, 1319], "incom": 122, "read_arrow_batches_from_odbc": 122, "read_database_uri": 122, "wide": [122, 191, 222, 275, 308, 868, 924], "snowflak": [122, 123], "variou": [122, 308, 811, 924, 929, 1319], "facil": 122, "initialis": [122, 159, 924], "flight": 122, "flightsql": 122, "flight_sql": 122, "about": [122, 642, 649, 657, 658, 660, 674, 675, 811, 928, 1224, 1230, 1238, 1239, 1241, 1255, 1256, 1319, 1328], "notabl": 122, "dremio": 122, "influxdb": 122, "notic": [122, 308, 924, 1319], "dbapi2": 122, "connectorx": [122, 123, 142], "optimis": [122, 216, 243, 294, 308, 924, 1166, 1212, 1319, 1328], "translat": 122, "conn": 122, "url": [122, 123, 132, 139, 657, 659, 1238, 1240], "render_as_str": 122, "hide_password": 122, "abl": 122, "relat": [122, 159, 674, 675, 929, 1255, 1256], "k\u00f9zudb": 122, "cypher": 122, "test_data": 122, "user_conn": 122, "normalised_scor": 122, "uint8": [122, 165, 265, 266, 275, 308, 383, 384, 605, 707, 723, 811, 829, 924, 929, 997, 998, 1190, 1289, 1319, 1328], "parameteris": 122, "metric": 122, "alchemy_conn": 122, "qmark": 122, "variad": 122, "1000": [122, 177, 265, 284, 308, 324, 811, 903, 924, 1055, 1162, 1298, 1319, 1328], "localhost": 122, "5432": 122, "uid": 122, "usr": 122, "pwd": 122, "max_text_s": 122, "max_binary_s": 122, "do_someth": 122, "kuzu_db_conn": 122, "session": 122, "ext": 122, "create_async_engin": 122, "async_engin": 122, "aiosqlit": 122, "surrealdb": 122, "surreal": 122, "surrealhttp": 122, "surreal_query_to_fram": 122, "8000": 122, "rpc": 122, "partition_on": 123, "partition_rang": 123, "partition_num": 123, "dbreadengin": 123, "raw": 123, "warehous": 123, "role": 123, "caller": [123, 223, 308, 541, 864, 869, 906, 912, 924], "respons": [123, 223, 308, 869, 924], "come": [123, 193, 308, 398, 422, 423, 496, 541, 735, 811, 850, 923, 924, 1010, 1038, 1039, 1115, 1319], "transfer": 123, "document": [123, 125, 308, 311, 433, 436, 664, 691, 693, 694, 698, 807, 982, 1049, 1052, 1245, 1272, 1274, 1275, 1279, 1319, 1323], "redshift": 123, "mysql": 123, "mariadb": 123, "clickhous": 123, "oracl": 123, "bigqueri": 123, "github": [123, 308], "sfu": 123, "connector": 123, "destin": 123, "develop": [123, 150, 154], "read_databas": 123, "usual": [123, 270, 308, 399, 1011], "urllib": 123, "quote_plu": 123, "word": [123, 674, 675, 687, 688], "3f": [123, 691, 694, 1272, 1275], "20word": 123, "explicitli": [123, 125, 148, 150, 159, 308, 793, 822], "test_tabl": 123, "compani": 123, "testdb": 123, "public": [123, 308, 811, 823, 924, 1319], "myrol": 123, "delta_table_opt": [124, 135], "root": [124, 135, 371, 495, 550, 563, 573, 574, 576, 578, 580, 581, 596, 646, 706, 810, 811, 984, 1227, 1319], "absolut": [124, 135, 136, 143, 144, 145, 146, 315, 452, 454, 455, 811, 931, 1069, 1071, 1072, 1319], "avoid": [124, 150, 154, 242, 308, 318, 811], "year": [124, 135, 193, 213, 240, 255, 277, 308, 398, 412, 413, 426, 427, 430, 444, 445, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 735, 751, 752, 753, 754, 755, 756, 798, 799, 811, 850, 859, 877, 924, 1010, 1024, 1025, 1042, 1043, 1046, 1060, 1061], "2021": [124, 135, 165, 171, 191, 193, 277, 308, 691, 771, 829, 836, 850, 924, 929, 1016, 1017, 1025, 1050, 1111, 1272, 1319], "travel": [124, 135], "2020": [124, 135, 165, 171, 191, 213, 240, 308, 311, 398, 403, 408, 429, 433, 436, 437, 438, 439, 440, 441, 442, 443, 453, 610, 691, 693, 694, 735, 811, 829, 836, 877, 924, 929, 1010, 1015, 1020, 1045, 1049, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1070, 1272, 1274, 1275, 1319], "tzinfo": [124, 135], "utc": [124, 135, 399, 403, 405, 408, 429, 691, 694, 929, 1011, 1015, 1020, 1045, 1272, 1275], "aw": [124, 132, 135, 139], "googl": [124, 135, 136], "service_account": [124, 135], "service_account_json_absolute_path": [124, 135], "az": [124, 135, 136], "adl": [124, 135, 136], "abf": [124, 135, 136], "azure_storage_account_nam": [124, 135, 136], "azure_storage_account_kei": [124, 135, 136], "without_fil": [124, 135, 136], "track": [124, 135, 136, 216, 308, 541, 1327], "sheet_id": [125, 131], "sheet_nam": [125, 131], "excelspreadsheetengin": 125, "read_opt": 125, "calamin": 125, "fastexcel": [125, 142], "xlsb": 125, "xl": 125, "pyxlsb": [125, 142], "openpyxl": [125, 142], "sheetnam": [125, 131], "nor": [125, 131, 244, 308], "xlsx2csv": [125, 142], "refin": 125, "major": 125, "dramat": 125, "modul": [125, 810, 929, 1328], "bind": 125, "significantli": [125, 216, 294, 308, 1166, 1319, 1328], "potenti": [125, 134, 137, 138, 210, 241, 243, 308, 573, 836, 924, 928], "unabl": 125, "julian": 125, "primari": [125, 1328], "constructor": [125, 154], "load_workbook": 125, "open_workbook": 125, "excelread": 125, "load_sheet_by_nam": 125, "influenc": [125, 843, 864, 924], "pipelin": [125, 270, 308], "becom": [125, 152, 673], "skip_empty_lin": 125, "correct": [125, 131, 454, 455, 496, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 642, 811, 863, 864, 924, 928, 1071, 1072, 1115, 1202, 1224, 1319], "forc": [125, 213, 216, 266, 294, 308, 541, 858, 859, 912, 924, 1166, 1300, 1319], "best": [125, 216, 294, 308, 553, 811, 1166, 1319], "known": [125, 126, 357, 541, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 811, 906, 912, 969, 1158], "ambigu": [125, 429, 430, 444, 691, 694, 754, 1045, 1046, 1060, 1272, 1275], "memory_map": [126, 132, 137], "greatli": [126, 137], "repeat": [126, 137, 602, 604, 784, 802, 811], "That": [126, 863, 864, 924], "filenam": 126, "my_fil": 126, "write_ipc": [126, 308], "read_ndjson": 129, "stringio": [129, 130, 393, 468, 564, 811, 837, 881, 924], "With": [129, 208, 250, 308, 352, 533, 635, 811, 883, 924, 964, 1114, 1150, 1216, 1319], "becaus": [130, 138, 177, 193, 196, 214, 216, 275, 294, 308, 466, 511, 811, 850, 853, 912, 924, 936, 1068, 1128, 1166, 1319], "openoffic": 131, "od": [131, 823], "parallelstrategi": [132, 139], "use_statist": [132, 139], "hive_partit": [132, 139], "hive_schema": [132, 139], "retri": [132, 137, 139], "row_group": [132, 139], "hive": [132, 139], "prune": [132, 139, 864, 924], "gcp": [132, 136, 139], "stabl": [132, 164, 169, 171, 198, 244, 255, 271, 308, 474, 546, 811, 827, 836, 868, 887, 888, 893, 924, 1086, 1319], "read_tabl": 132, "scan_parquet": [132, 140], "scan_pyarrow_dataset": [132, 139], "contribut": [132, 617, 621, 624, 628, 811], "with_column_nam": 134, "push": [134, 137, 138, 139, 140], "down": [134, 137, 138, 139, 140, 465, 811, 1081, 1319], "therebi": [134, 137, 138], "realloc": [134, 137, 138, 179, 308, 1075, 1319], "headerless": 134, "my_long_fil": 134, "thing": [134, 141], "less": [134, 213, 308, 466, 498, 548, 551, 683, 811, 859, 924, 1264, 1328], "breezah": 134, "languag": [134, 193, 213, 240, 277, 308, 426, 430, 444, 453, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 752, 753, 755, 756, 798, 799, 811, 850, 859, 877, 924, 1042, 1046, 1060, 1070, 1319], "hard": [134, 863, 864, 924], "mydf": 134, "lambda": [134, 162, 185, 216, 230, 231, 235, 294, 308, 323, 357, 452, 453, 454, 455, 541, 549, 550, 551, 553, 574, 575, 743, 744, 761, 773, 774, 786, 811, 863, 864, 872, 875, 912, 924, 936, 969, 1069, 1070, 1071, 1072, 1158, 1166, 1319], "lower": [134, 171, 193, 196, 233, 300, 308, 373, 375, 480, 547, 550, 574, 599, 603, 621, 622, 730, 752, 753, 755, 756, 785, 798, 799, 811, 836, 850, 853, 874, 918, 924, 988, 990, 1005, 1092, 1164, 1185, 1188, 1201, 1306, 1319], "simpli": [134, 743, 761], "idx": [134, 193, 211, 284, 308, 344, 357, 541, 850, 903, 924, 969, 1158, 1241], "uint16": [134, 383, 384, 707, 811, 929, 997, 998, 1289, 1319], "u16": [134, 1328], "eu": [135, 136], "central": [135, 136, 496, 642, 811, 1115, 1224, 1319], "iceberg": [136, 823], "pyiceberg": [136, 142], "secret": [136, 139], "adlf": 136, "my": [136, 140, 699, 1280], "oauth": 136, "token": 136, "ya29": 136, "dr": 136, "afm": 136, "py": 136, "impl": 136, "fsspecfileio": 136, "give": [137, 138, 213, 222, 273, 308, 409, 466, 496, 604, 716, 811, 823, 868, 894, 924, 1021, 1115, 1299, 1319], "read_parquet": 139, "east": 139, "allow_pyarrow_filt": 140, "comparison": 140, "dset": 140, "folder": 140, "04": [140, 165, 171, 193, 277, 308, 402, 403, 422, 423, 429, 430, 433, 436, 437, 438, 441, 443, 447, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 691, 735, 751, 754, 755, 757, 811, 829, 836, 850, 924, 929, 1015, 1029, 1035, 1038, 1039, 1040, 1045, 1049, 1052, 1053, 1054, 1057, 1059, 1063, 1272], "seed": [141, 198, 244, 308, 474, 528, 601, 632, 638, 811, 1086, 1145, 1186, 1208, 1220, 1319], "shuffl": [141, 244, 270, 294, 308, 528, 632, 811, 912, 1145, 1208, 1319], "platform": 142, "maco": 142, "arm64": 142, "arm": 142, "64bit": [142, 603, 811, 1188, 1319], "main": [142, 833, 924], "feb": 142, "2024": [142, 398, 404, 405, 410, 414, 417, 419, 424, 431, 434, 735, 751, 754, 757, 929, 1010], "21": [142, 171, 223, 257, 308, 401, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 754, 763, 811, 836, 869, 924, 929, 1013], "clang": 142, "1500": [142, 153], "adbc_driver_manag": 142, "cloudpickl": 142, "17": [142, 150, 177, 213, 286, 308, 453, 612, 630, 763, 798, 811, 904, 992, 994, 1046, 1070, 1196, 1319, 1328], "hvplot": [142, 308, 311, 1319, 1323], "matplotlib": [142, 873, 885, 924], "nest_asyncio": 142, "26": [142, 147, 148, 149, 150, 154, 171, 308, 408, 445, 836, 924, 1020], "pydant": 142, "torch": [142, 270, 308, 1319], "check_row_ord": [143, 144], "check_column_ord": [143, 144], "check_dtyp": [143, 144, 145, 146], "check_exact": [143, 144, 145, 146], "rtol": [143, 144, 145, 146], "atol": [143, 144, 145, 146], "categorical_as_str": [143, 144, 145, 146], "assert": [143, 144, 145, 146, 150, 154, 240, 308, 823, 929], "assertionerror": [143, 144, 145, 146], "compar": [143, 144, 145, 146, 176, 186, 308, 450, 451, 471, 473, 480, 498, 548, 584, 585, 811, 982, 1067, 1211, 1319], "unsort": [143, 144], "toler": [143, 144, 145, 146, 213, 308, 859, 924], "inexact": [143, 144, 145, 146], "share": [143, 144, 145, 146, 177, 308, 1068, 1319], "assert_series_equ": [143, 146, 1067, 1319, 1328], "assert_frame_not_equ": [143, 146], "pytest": [143, 145], "worthwhil": [143, 145], "shorten": [143, 145], "traceback": [143, 144, 145, 146], "tb": [143, 145, 177, 308, 1068, 1319], "short": [143, 145], "tend": [143, 145], "unhelpfulli": [143, 145], "assert_frame_equ": [144, 145, 176, 308, 1328], "assert_series_not_equ": [144, 145], "check_nam": [145, 146], "searchstrategi": [147, 149, 150, 151, 152, 154], "allow_nul": [147, 150, 154, 1328], "null_prob": [147, 150, 154], "percentag": [147, 150, 154, 591, 811, 1180, 1319], "chanc": [147, 150, 154, 1328], "independ": [147, 150, 154, 270, 308], "1755e": [147, 150], "575050513": [147, 150], "inf": [147, 150, 154, 330, 391, 476, 482, 486, 598, 716, 811, 942, 994, 1004, 1088, 1096, 1101, 1164, 1180, 1184, 1306, 1319], "min_col": [148, 150], "max_col": [148, 150], "comprehens": 148, "standalon": [148, 929], "mincol": 148, "assign": [148, 193, 293, 308, 357, 541, 590, 601, 682, 683, 811, 850, 911, 924, 969, 1158, 1186, 1263, 1264, 1319], "minimum": [148, 149, 150, 152, 154, 185, 224, 225, 308, 452, 454, 455, 568, 583, 593, 601, 780, 781, 811, 870, 924, 1034, 1069, 1071, 1072, 1176, 1182, 1186, 1319, 1328], "especi": [148, 609, 811, 843, 924, 1194, 1319], "hypothesi": [148, 150, 153, 154, 1328], "test_unique_xyz": 148, "assert_someth": 148, "inner_dtyp": [149, 152], "select_from": [149, 152, 154], "min_siz": [149, 150, 152, 154, 1328], "max_siz": [149, 150, 152, 154, 1328], "anoth": [149, 165, 176, 186, 192, 213, 308, 390, 400, 514, 539, 557, 560, 605, 614, 616, 618, 620, 622, 625, 627, 629, 660, 811, 829, 849, 901, 924, 1003, 1012, 1067, 1075, 1131, 1190, 1211, 1241, 1319], "randomli": 149, "innermost": [149, 152], "2x": 149, "lst": 149, "11330": 149, "24030": 149, "116": 149, "include_col": 150, "allowed_dtyp": [150, 151, 154, 1328], "excluded_dtyp": [150, 151, 154], "describ": [150, 191, 308, 924, 1319], "desir": [150, 357, 447, 541, 969, 1063, 1158, 1319], "n_chunk": [150, 154, 308, 935, 1075, 1187, 1319], "randomis": 150, "onto": 150, "exclud": [150, 154, 193, 308, 367, 381, 384, 398, 480, 715, 735, 811, 850, 924, 1010, 1092, 1111, 1319], "pct": 150, "preced": [150, 929], "allow_infin": [150, 154], "disallow": 150, "usag": [150, 154, 252, 308, 929, 1219, 1319], "deploi": [150, 154], "characterist": [150, 154], "concret": [150, 154], "test_df_height": 150, "interact": [150, 154, 171, 308, 836, 924], "col0": [150, 1328], "col1": [150, 231, 308, 924, 1328], "col2": [150, 231, 308, 924, 1328], "1844": 150, "06": [150, 165, 277, 308, 398, 402, 421, 428, 429, 430, 431, 444, 445, 751, 754, 829, 924, 929, 1010, 1045, 1046, 1060], "848808": 150, "1436e16": 150, "9914e218": 150, "2068": 150, "412277": 150, "7415e16": 150, "2095": 150, "647961": 150, "15836": 150, "nesting_level": 151, "pick": [151, 801], "prioriti": 151, "complex": [151, 366, 367, 390, 714, 715, 811, 977, 1003, 1303, 1319], "fulli": [152, 230, 244, 308], "profil": [153, 155, 832, 924], "balanc": [153, 155, 1328], "set_environ": 153, "polars_hypothesis_profil": [153, 155], "max_data_s": 154, "test_series_len": 154, "zz": [154, 171, 255, 308, 836, 924], "polars_max_thread": 156, "behind": 156, "lock": 156, "reason": [156, 171, 308, 541, 551, 811, 836, 924], "temporarili": [156, 159, 193, 194, 196, 197, 240, 308, 610, 811, 850, 851, 853, 854, 877, 924], "pyspark": 156, "udf": [156, 162, 216, 230, 288, 294, 308, 323, 393, 553, 594, 728, 774, 811, 837, 872, 906, 912, 924, 936, 1166, 1319], "recommend": [156, 171, 210, 230, 308, 828, 836, 924, 929], "thread_pool_s": 157, "easi": 159, "restor": 159, "restore_default": 159, "set_tbl_row": 159, "whatev": 159, "were": [159, 217, 219, 224, 257, 308, 605, 807, 811, 1190, 1319], "enter": 159, "advantag": [159, 230, 308], "set_": 159, "set_verbos": 159, "do_various_th": 159, "cleaner": 159, "breviti": 159, "vein": 159, "durat": [159, 213, 277, 308, 399, 407, 408, 411, 415, 418, 420, 425, 432, 437, 438, 439, 440, 441, 442, 443, 447, 453, 713, 752, 753, 755, 756, 798, 799, 811, 859, 924, 929, 1011, 1019, 1020, 1023, 1030, 1033, 1036, 1041, 1048, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1063, 1070, 1302, 1319], "set_ascii_t": 159, "write_ascii_frame_to_stdout": 159, "sy": 159, "stdout": [159, 191, 308, 565], "nan_as_nul": 161, "polarsdatafram": 161, "notimplementederror": 161, "num_row": 161, "get_column": [161, 268, 308], "dtypekind": 161, "inference_s": [162, 216, 308], "256": [162, 216, 308, 1180, 1319], "map_row": [162, 308], "tri": [162, 216, 308], "approxim": [163, 308, 324, 453, 729, 811, 826, 924, 1070, 1319, 1328], "hyperloglog": [163, 308, 324, 729, 811, 826, 924], "algorithm": [163, 308, 324, 650, 676, 729, 811, 826, 924, 1231, 1257], "cardin": [163, 308, 324, 729, 811, 826, 924], "k": [164, 243, 271, 272, 308, 366, 367, 380, 496, 714, 715, 811, 827, 893, 924, 977, 1115, 1303, 1319], "intoexpr": [164, 192, 193, 194, 195, 196, 197, 240, 246, 247, 250, 254, 271, 281, 282, 286, 308, 322, 341, 361, 364, 365, 367, 398, 453, 459, 476, 480, 507, 508, 529, 530, 531, 532, 590, 605, 620, 633, 635, 636, 645, 650, 676, 681, 682, 683, 689, 690, 715, 725, 727, 733, 736, 737, 738, 739, 741, 743, 746, 747, 750, 754, 761, 776, 778, 781, 787, 790, 793, 795, 811, 827, 849, 850, 851, 852, 853, 854, 877, 879, 880, 883, 887, 893, 899, 900, 904, 924, 928, 953, 972, 975, 976, 1010, 1070, 1076, 1092, 1125, 1190, 1210, 1216, 1262, 1263, 1264, 1270, 1271, 1319], "nulls_last": [164, 254, 271, 308, 333, 353, 366, 367, 535, 644, 645, 714, 715, 733, 811, 827, 887, 893, 924, 945, 965, 1152, 1226, 1319], "smallest": [164, 271, 308, 366, 367, 715, 811, 827, 893, 924, 977, 1319], "largest": [164, 271, 308, 367, 714, 715, 811, 827, 893, 924, 1303, 1319], "bottom": [164, 308, 367, 811, 827, 924], "wors": [164, 271, 308, 827, 887, 893, 924], "search": [164, 213, 271, 308, 541, 650, 676, 827, 859, 887, 893, 924, 1231, 1257], "top_k": [164, 308, 366, 367, 715, 811, 827, 924, 977, 1319], "columnnameorselector": [165, 172, 174, 222, 229, 231, 243, 264, 273, 274, 275, 308, 829, 838, 839, 868, 894, 895, 924], "due": [165, 193, 213, 240, 243, 277, 308, 318, 368, 408, 426, 430, 444, 495, 573, 574, 576, 578, 580, 581, 596, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 706, 735, 752, 753, 755, 756, 798, 799, 811, 829, 850, 859, 877, 924, 978, 1020, 1042, 1046, 1060, 1319], "overflow": [165, 308, 368, 383, 384, 673, 696, 707, 811, 829, 924, 978, 997, 998, 1254, 1277, 1289, 1319], "u8": [165, 264, 265, 275, 308, 605, 723, 811, 829, 924, 929, 1190, 1296, 1319, 1328], "tempor": [165, 193, 194, 196, 197, 210, 240, 242, 243, 263, 308, 373, 480, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 811, 823, 829, 850, 851, 853, 854, 877, 924, 929, 988, 1092, 1111, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1319], "to_dict": [165, 308, 829, 924], "as_seri": [165, 262, 308, 829, 924, 1004, 1184, 1319], "greater": [166, 213, 308, 471, 473, 480, 642, 671, 672, 683, 701, 811, 859, 924, 1092, 1224, 1252, 1253, 1264, 1282, 1319], "cheap": [166, 167, 247, 282, 308, 830, 831, 880, 900, 924, 987, 991, 1319], "deepcopi": [166, 308, 830, 924, 987, 1319], "13": [166, 167, 171, 180, 181, 190, 203, 214, 226, 240, 281, 290, 292, 295, 296, 297, 298, 299, 300, 301, 308, 318, 398, 404, 405, 407, 410, 411, 414, 415, 417, 418, 419, 420, 424, 425, 431, 432, 434, 561, 563, 610, 695, 737, 743, 746, 754, 761, 795, 797, 800, 811, 830, 831, 836, 844, 845, 861, 877, 899, 908, 910, 913, 914, 915, 916, 917, 918, 919, 924, 1010, 1019, 1023, 1030, 1033, 1036, 1041, 1046, 1048, 1060, 1061, 1099, 1102, 1109, 1111, 1166, 1276, 1319], "appl": [168, 201, 212, 235, 238, 262, 289, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 308, 367, 607, 655, 684, 715, 811, 858, 875, 907, 908, 910, 911, 913, 914, 915, 916, 917, 918, 919, 924, 1236, 1265], "banana": [168, 262, 290, 292, 295, 296, 297, 298, 299, 300, 301, 308, 367, 607, 655, 684, 715, 811, 908, 910, 913, 914, 915, 916, 917, 918, 919], "orang": [168, 289, 290, 292, 293, 295, 296, 298, 300, 301, 308, 367, 715, 811, 907, 908, 910, 911, 913, 914, 916, 918, 919], "pairwis": [169, 308], "pearson": [169, 308, 496, 642, 739, 811, 1115, 1224, 1319], "correl": [169, 308, 739, 788], "coeffici": [169, 308, 642, 811, 1224, 1319], "corrcoef": [169, 308], "percentil": [171, 308, 836, 924, 1005, 1319], "interpol": [171, 233, 300, 308, 461, 556, 599, 621, 622, 785, 811, 836, 874, 918, 924, 1005, 1185, 1201, 1319], "rollinginterpolationmethod": [171, 233, 300, 308, 599, 621, 622, 785, 811, 836, 874, 918, 924, 1005, 1185, 1201, 1319], "summari": [171, 308, 836, 924, 1005, 1319], "midpoint": [171, 233, 300, 308, 599, 621, 622, 785, 811, 836, 874, 918, 924, 1005, 1185, 1201, 1319], "linear": [171, 204, 233, 300, 308, 479, 505, 556, 599, 621, 622, 737, 738, 785, 811, 836, 857, 874, 918, 924, 1005, 1091, 1122, 1185, 1201, 1319], "deem": [171, 308, 836, 924], "programmat": [171, 308, 836, 924], "versu": [171, 308, 836, 924], "explor": [171, 308, 836, 924], "glimps": [171, 199, 308], "median": [171, 231, 308, 461, 617, 618, 811, 836, 901, 924, 1005, 1199, 1319], "null_count": [171, 174, 308, 390, 811, 836, 924, 1003, 1005, 1085, 1319], "266667": [171, 308, 836, 924], "666667": [171, 204, 278, 296, 308, 452, 777, 811, 836, 857, 897, 914, 924, 1069, 1319], "std": [171, 308, 624, 625, 811, 836, 924, 1005, 1203, 1319], "101514": [171, 308, 836, 924], "071068": [171, 308, 836, 924], "36": [171, 308, 836, 924], "41": [171, 308, 626, 627, 811, 836, 924, 1328], "34": [171, 308, 691, 836, 924, 1272], "43": [171, 240, 308, 384, 610, 626, 627, 811, 836, 877, 924], "70": [171, 308, 723, 811, 836, 924, 1115, 1319], "88": [171, 308, 836, 924], "90": [171, 308, 695, 836, 924, 1276], "49": [171, 308, 836, 924], "33": [171, 223, 308, 630, 811, 836, 869, 924, 1201, 1319], "subset": [174, 227, 273, 308, 839, 894, 924], "preserv": [174, 182, 192, 195, 212, 216, 266, 267, 308, 396, 397, 398, 462, 510, 639, 811, 839, 846, 858, 924, 1008, 1009, 1010, 1079, 1127, 1221, 1301, 1319], "all_horizont": [174, 308, 724, 839, 924], "is_nul": [174, 308, 811, 839, 924, 1319], "null_equ": [176, 186, 308, 1067, 1211, 1319], "sizeunit": [177, 308, 1068, 1319], "heap": [177, 308, 811, 928, 1068, 1319], "bitmap": [177, 308, 1068, 1319], "therefor": [177, 308, 553, 801, 811, 1068, 1319], "structarrai": [177, 308, 1068, 1319], "constant": [177, 240, 308, 399, 453, 459, 811, 877, 924, 1011, 1068, 1070, 1076, 1319], "unchang": [177, 308, 552, 605, 713, 811, 863, 864, 906, 912, 924, 1068, 1165, 1190, 1302, 1319], "capac": [177, 252, 308, 1068, 1219, 1319], "ffi": [177, 308, 1068, 1319], "kb": [177, 308, 1068, 1319], "mb": [177, 308, 1068, 1319], "gb": [177, 308, 1068, 1319], "revers": [177, 308, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 550, 574, 576, 578, 596, 706, 742, 811, 924, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1319], "1_000_000": [177, 308, 1068, 1319], "17888890": [177, 308], "0601749420166": [177, 308], "more_column": [178, 248, 274, 308, 456, 759, 811, 842, 882, 895, 924], "long": [178, 222, 275, 308, 842, 868, 924], "letter": [178, 291, 302, 308, 456, 650, 658, 676, 759, 811, 842, 909, 920, 924, 929, 1231, 1239, 1257], "onlin": [179, 308, 1075, 1319], "rerun": [179, 308, 1075, 1319], "finish": [179, 308, 1075, 1319], "conveni": [179, 270, 308, 935, 1075, 1319], "Not": [180, 308, 460, 489, 491, 811, 844, 924, 1077, 1319], "fillnullstrategi": [181, 308, 461, 811, 845, 924, 1078, 1319], "matches_supertyp": [181, 308, 845, 924], "forward": [181, 213, 250, 308, 352, 398, 422, 461, 467, 533, 635, 811, 845, 859, 883, 924, 964, 1010, 1038, 1078, 1150, 1216, 1319], "consecut": [181, 308, 360, 461, 467, 648, 811, 845, 924, 1078, 1229, 1319], "fill_nan": [181, 308, 461, 811, 845, 924, 1078, 1319], "intoexprcolumn": [182, 308, 340, 344, 345, 352, 366, 367, 373, 374, 375, 430, 459, 462, 506, 515, 518, 528, 533, 591, 595, 632, 635, 657, 661, 664, 680, 686, 687, 688, 692, 696, 701, 714, 715, 730, 735, 752, 753, 755, 756, 767, 768, 798, 799, 801, 811, 846, 883, 924, 952, 956, 957, 964, 977, 988, 989, 990, 1046, 1076, 1123, 1132, 1135, 1145, 1150, 1180, 1238, 1242, 1245, 1261, 1267, 1268, 1269, 1273, 1282, 1303, 1319], "constraint": [182, 308, 462, 495, 573, 574, 576, 578, 580, 581, 596, 706, 801, 811, 846, 924], "behav": [182, 308, 462, 553, 687, 688, 811, 846, 924], "eq": [182, 308, 451, 462, 811, 846, 924, 1319], "implicitli": [182, 308, 462, 801, 811, 846, 924], "is_in": [182, 308, 811, 1319], "get_column_index": [183, 308], "reduct": [185, 308], "supercast": [185, 308], "parent": [185, 308], "arithmet": [185, 308], "zip_with": [185, 308, 1319], "foo11": [185, 308], "bar22": [185, 308], "nth": [187, 260, 308, 470, 683, 710, 811, 848, 892, 924, 1083, 1264, 1292, 1319], "th": [187, 260, 308, 470, 515, 529, 642, 661, 692, 710, 811, 848, 892, 924, 1083, 1132, 1146, 1224, 1242, 1273, 1292, 1319], "retriev": [188, 308, 338, 339, 503, 504, 702, 783, 950, 951, 1120, 1121, 1283], "max_items_per_column": [191, 308], "max_colname_length": [191, 308], "return_as_str": [191, 308, 565], "preview": [191, 308], "few": [191, 308], "exce": [191, 308], "ellipsi": [191, 308], "head": [191, 215, 259, 308, 322, 500, 590, 811, 862, 924, 1117, 1290, 1319], "tail": [191, 199, 308, 322, 642, 811, 924, 1087, 1224, 1319], "usd": [191, 308, 1328], "eur": [191, 308, 1328], "named_bi": [192, 308, 849, 924], "groupbi": [192, 231, 308, 323, 553, 728, 774, 811, 924], "consist": [192, 195, 229, 308, 691, 849, 852, 924, 935, 1075, 1272, 1319], "agg": [192, 193, 196, 231, 240, 308, 317, 367, 462, 464, 469, 472, 551, 553, 564, 590, 644, 645, 715, 722, 774, 811, 832, 833, 841, 843, 849, 850, 851, 853, 854, 873, 877, 885, 924, 929], "Or": [192, 193, 213, 240, 254, 277, 286, 308, 453, 590, 610, 645, 752, 753, 755, 756, 798, 799, 801, 811, 849, 850, 859, 877, 887, 904, 924, 1070, 1319], "index_column": [193, 194, 196, 197, 240, 308, 610, 811, 850, 851, 853, 854, 877, 924], "timedelta": [193, 194, 196, 197, 213, 240, 277, 308, 426, 430, 444, 453, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 752, 753, 755, 756, 798, 799, 811, 850, 851, 853, 854, 859, 877, 924, 929, 1026, 1034, 1042, 1046, 1060, 1070, 1175, 1176, 1228, 1308, 1319], "include_boundari": [193, 196, 308, 850, 853, 924], "closedinterv": [193, 194, 196, 197, 240, 308, 480, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 752, 753, 755, 756, 798, 799, 811, 850, 851, 853, 854, 877, 924, 1092, 1319], "label": [193, 270, 308, 391, 598, 611, 612, 613, 615, 617, 619, 621, 624, 626, 628, 811, 850, 873, 924, 1004, 1184, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1319], "group_bi": [193, 195, 227, 231, 240, 277, 307, 308, 317, 367, 462, 464, 469, 472, 551, 553, 590, 644, 645, 715, 722, 774, 811, 832, 833, 841, 843, 850, 852, 873, 877, 885, 923, 924, 929], "start_bi": [193, 196, 308, 850, 853, 924], "startbi": [193, 196, 308, 850, 853, 924], "check_sort": [193, 194, 196, 197, 240, 308, 453, 610, 811, 850, 851, 853, 854, 877, 924, 1070, 1319], "dynamicgroupbi": [193, 196, 308], "normal": [193, 308, 449, 496, 642, 811, 850, 924, 1066, 1115, 1224, 1319], "member": [193, 308, 850, 924, 1100, 1319], "earliest": [193, 196, 308, 429, 430, 444, 691, 694, 754, 850, 853, 924, 1045, 1046, 1060, 1272, 1275], "datapoint": [193, 196, 308, 850, 853, 924], "descript": [193, 308, 850, 924], "ascend": [193, 194, 196, 197, 240, 308, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 811, 850, 851, 853, 854, 877, 924], "dynam": [193, 196, 308, 357, 541, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 811, 850, 853, 924, 928, 969, 1158, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1319], "matter": [193, 194, 196, 197, 210, 240, 242, 243, 263, 308, 610, 687, 688, 811, 850, 851, 853, 854, 877, 924], "interv": [193, 194, 196, 197, 240, 277, 308, 391, 430, 444, 476, 480, 598, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 752, 753, 755, 756, 798, 799, 811, 850, 851, 853, 854, 877, 924, 1004, 1018, 1021, 1022, 1029, 1032, 1035, 1037, 1040, 1043, 1044, 1046, 1051, 1060, 1061, 1088, 1092, 1184, 1319], "_lower_boundari": [193, 308, 850, 924], "_upper_boundari": [193, 308, 850, 924], "harder": [193, 196, 308, 850, 853, 924], "inclus": [193, 194, 196, 197, 240, 308, 480, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 681, 682, 730, 752, 753, 755, 756, 767, 768, 798, 799, 811, 850, 851, 853, 854, 877, 924, 1092, 1262, 1263, 1319], "boundari": [193, 308, 373, 374, 375, 476, 811, 850, 924, 988, 989, 990, 1088, 1319], "mondai": [193, 196, 308, 398, 444, 446, 735, 850, 853, 924, 1010, 1060, 1062], "tuesdai": [193, 196, 308, 850, 853, 924], "wednesdai": [193, 196, 308, 433, 436, 850, 853, 924, 1049, 1052], "thursdai": [193, 196, 308, 398, 735, 850, 853, 924, 1010], "fridai": [193, 196, 308, 398, 433, 436, 735, 850, 853, 924, 1010, 1049, 1052], "saturdai": [193, 196, 308, 850, 853, 924], "sundai": [193, 196, 308, 398, 433, 436, 446, 735, 850, 853, 924, 1010, 1049, 1052, 1062], "weekli": [193, 196, 308, 444, 850, 853, 924, 1060], "week": [193, 196, 213, 240, 277, 308, 398, 426, 430, 444, 446, 453, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 735, 752, 753, 755, 756, 757, 798, 799, 811, 850, 853, 859, 877, 924, 929, 1010, 1042, 1046, 1060, 1062, 1070, 1319], "shift": [193, 196, 251, 308, 360, 394, 467, 509, 591, 636, 737, 811, 850, 853, 884, 924, 1006, 1126, 1180, 1217, 1319], "front": [193, 196, 308, 850, 853, 924], "sorted": [193, 194, 196, 197, 240, 308, 850, 851, 853, 854, 877, 924], "verifi": [193, 194, 196, 197, 240, 308, 850, 851, 853, 854, 877, 924], "incorrect": [193, 194, 196, 197, 240, 308, 447, 453, 551, 610, 634, 811, 850, 851, 853, 854, 877, 906, 912, 924, 1063, 1070, 1214, 1319], "roll": [193, 194, 197, 308, 398, 422, 423, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 737, 788, 789, 811, 850, 851, 854, 924, 1010, 1038, 1039, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1319], "re": [193, 209, 308, 422, 423, 433, 436, 850, 924, 1038, 1039, 1049, 1052, 1327], "1d": [193, 213, 240, 277, 308, 400, 426, 430, 438, 441, 444, 447, 453, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 752, 753, 755, 756, 757, 771, 798, 799, 811, 850, 859, 877, 924, 929, 1012, 1021, 1028, 1042, 1046, 1051, 1054, 1057, 1060, 1070, 1319], "set_index": [193, 308, 850, 924], "resampl": [193, 308, 850, 924], "unlik": [193, 308, 850, 924], "evenli": [193, 308, 850, 924], "upsampl": [193, 308, 850, 924], "1n": [193, 213, 240, 277, 308, 426, 430, 444, 453, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 752, 753, 755, 756, 798, 799, 811, 850, 859, 877, 924, 1042, 1046, 1060, 1070, 1319], "1u": [193, 213, 240, 277, 308, 426, 430, 444, 453, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 752, 753, 755, 756, 798, 799, 811, 850, 859, 877, 924, 1042, 1046, 1060, 1070, 1319], "1m": [193, 213, 240, 277, 308, 426, 430, 443, 444, 453, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 752, 753, 755, 756, 798, 799, 811, 850, 859, 877, 924, 1042, 1046, 1055, 1056, 1058, 1059, 1060, 1070, 1319], "millisecond": [193, 213, 240, 277, 308, 410, 419, 426, 430, 440, 444, 453, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 752, 753, 755, 756, 757, 798, 799, 811, 850, 859, 877, 924, 929, 1042, 1046, 1056, 1060, 1070, 1319], "minut": [193, 213, 240, 277, 308, 410, 414, 417, 424, 426, 430, 431, 441, 444, 453, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 752, 753, 754, 755, 756, 757, 797, 798, 799, 811, 850, 859, 877, 924, 929, 1042, 1046, 1057, 1060, 1070, 1319], "1h": [193, 213, 240, 277, 308, 408, 426, 430, 444, 453, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 752, 753, 755, 756, 798, 799, 811, 850, 859, 877, 924, 1020, 1022, 1042, 1046, 1060, 1070, 1319], "hour": [193, 213, 240, 277, 308, 414, 417, 419, 424, 426, 430, 431, 438, 444, 453, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 752, 753, 754, 755, 756, 757, 797, 798, 799, 811, 850, 859, 877, 924, 929, 1042, 1046, 1054, 1060, 1070, 1319], "1w": [193, 213, 240, 277, 308, 426, 430, 444, 453, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 752, 753, 755, 756, 798, 799, 811, 850, 859, 877, 924, 1042, 1046, 1060, 1070, 1319], "1mo": [193, 213, 240, 277, 308, 403, 422, 423, 426, 429, 430, 437, 444, 453, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 752, 753, 755, 756, 798, 799, 811, 850, 859, 877, 924, 1015, 1037, 1038, 1039, 1042, 1043, 1044, 1045, 1046, 1053, 1060, 1061, 1070, 1319], "month": [193, 213, 240, 277, 308, 406, 422, 423, 426, 430, 433, 436, 444, 453, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 751, 752, 753, 754, 755, 756, 757, 798, 799, 811, 850, 859, 877, 924, 1018, 1038, 1039, 1042, 1046, 1049, 1052, 1060, 1070, 1319], "1q": [193, 213, 240, 277, 308, 426, 430, 444, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 752, 753, 755, 756, 798, 799, 811, 850, 859, 877, 924, 1042, 1046, 1060], "quarter": [193, 213, 240, 277, 308, 426, 430, 444, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 752, 753, 755, 756, 798, 799, 811, 850, 859, 877, 924, 1042, 1046, 1060], "1y": [193, 213, 240, 277, 308, 426, 430, 444, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 752, 753, 755, 756, 798, 799, 811, 850, 859, 877, 924, 1042, 1046, 1060], "1i": [193, 240, 277, 308, 453, 610, 613, 615, 617, 619, 621, 624, 626, 628, 811, 850, 877, 924, 1070, 1319], "3d12h4m25": [193, 213, 240, 277, 308, 430, 444, 453, 610, 752, 753, 755, 756, 798, 799, 811, 850, 859, 877, 924, 1046, 1060, 1070, 1319], "correspond": [193, 213, 240, 266, 277, 308, 367, 413, 426, 430, 444, 553, 601, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 715, 752, 753, 755, 756, 798, 799, 811, 832, 850, 859, 877, 924, 1025, 1042, 1046, 1060, 1186, 1319], "daylight": [193, 213, 240, 277, 308, 399, 408, 426, 430, 444, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 752, 753, 755, 756, 757, 798, 799, 811, 850, 859, 877, 924, 1020, 1042, 1046, 1060], "10i": [193, 308, 850, 924], "datetime_rang": [193, 308, 400, 403, 422, 423, 426, 429, 430, 437, 438, 439, 440, 441, 442, 443, 444, 447, 613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 752, 811, 850, 924, 1011, 1012, 1015, 1020, 1021, 1022, 1028, 1029, 1032, 1035, 1038, 1039, 1040, 1042, 1045, 1046, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060], "30m": [193, 308, 430, 444, 850, 924, 1046, 1060], "lower_bound": [193, 308, 373, 375, 480, 811, 850, 924, 988, 990, 1092, 1306, 1319], "upper_bound": [193, 308, 373, 374, 480, 541, 811, 850, 924, 988, 989, 1092, 1164, 1319], "bys": [193, 308, 850, 924], "int_rang": [193, 275, 284, 294, 308, 730, 770, 850, 864, 903, 912, 924], "2i": [193, 308, 850, 924], "3i": [193, 308, 850, 924], "a_agg_list": [193, 308, 850, 924], "rollinggroupbi": [194, 197, 240, 308], "more_bi": [195, 229, 254, 308, 645, 811, 852, 887, 924], "group_by_dynam": [196, 240, 308, 853, 877, 924], "_lower_bound": [196, 308, 853, 924], "_upper_bound": [196, 308, 853, 924], "seed_1": [198, 308, 474, 811, 1086, 1319], "seed_2": [198, 308, 474, 811, 1086, 1319], "seed_3": [198, 308, 474, 811, 1086, 1319], "hash": [198, 308, 811, 1319], "Its": [198, 308, 474, 811, 1086, 1319], "u64": [198, 284, 308, 474, 603, 811, 873, 903, 924, 1086, 1188, 1319], "10783150408545073287": [198, 308], "1438741209321515184": [198, 308], "10047419486152048166": [198, 308], "2047317070637311557": [198, 308], "ab": [199, 215, 259, 281, 308, 702, 704, 811, 899, 924, 1087, 1117, 1290, 1319], "in_plac": [201, 252, 279, 308, 1187, 1219, 1226, 1319], "grown": [201, 308], "insert_column": [202, 308], "intermedi": [204, 308, 857, 924, 1328], "333333": [204, 308, 495, 573, 811, 857, 924, 1180, 1205, 1319], "mask": [205, 207, 308, 362, 481, 483, 484, 487, 488, 494, 592, 593, 649, 653, 660, 811, 973, 1079, 1085, 1092, 1094, 1097, 1098, 1103, 1104, 1112, 1181, 1182, 1212, 1230, 1234, 1241, 1310, 1319], "visual": [205, 207, 308, 885, 924], "scalar": [208, 216, 241, 308, 633, 661, 666, 680, 692, 728, 771, 774, 811, 928, 1114, 1210, 1242, 1247, 1261, 1273, 1319], "buffer_s": [210, 308], "fit": [210, 252, 275, 308, 637, 787, 811, 1218, 1219, 1319], "signific": [210, 216, 308, 323, 553, 631, 811, 1166, 1207, 1319], "4x": [210, 308], "materialis": [210, 211, 241, 242, 308], "rows_by_kei": [210, 242, 308], "iter_row": [211, 241, 242, 243, 308], "17_500": [211, 308], "klmnoopqrstuvwxyz": [211, 308], "__name__": [211, 308], "7500": [211, 308], "15_000": [211, 308], "record_batch": [211, 308], "to_arrow": [211, 308, 1319], "to_batch": [211, 308], "date32": [211, 308], "large_str": [211, 261, 267, 308], "15000": [211, 308], "2500": [211, 270, 308], "left_on": [212, 213, 276, 308, 858, 859, 896, 924], "right_on": [212, 213, 276, 308, 858, 859, 896, 924], "suffix": [212, 213, 246, 281, 286, 308, 318, 364, 367, 489, 491, 492, 493, 550, 574, 576, 579, 580, 581, 590, 596, 607, 655, 687, 690, 715, 811, 858, 859, 879, 899, 901, 904, 924, 929, 975, 1236, 1271], "_right": [212, 213, 308, 858, 859, 924], "joinvalid": [212, 308, 858, 924], "join_nul": [212, 308, 858, 924], "coalesc": [212, 276, 308, 691, 858, 896, 924, 1272], "fashion": [212, 308, 841, 843, 873, 885, 924], "semi": [212, 308, 858, 924], "anti": [212, 308, 858, 912, 924, 1209, 1212, 1319], "cross": [212, 308, 858, 924], "outer_coalesc": [212, 308, 858, 924], "cartesian": [212, 308, 858, 924], "many_to_mani": [212, 308, 858, 924], "one_to_on": [212, 308, 858, 924], "one_to_mani": [212, 308, 858, 924], "many_to_on": [212, 308, 858, 924], "join_asof": [212, 308, 858, 924], "other_df": [212, 308], "ham_right": [212, 308, 858, 924], "by_left": [213, 308, 859, 924], "by_right": [213, 308, 859, 924], "asofjoinstrategi": [213, 308, 859, 924], "allow_parallel": [213, 308, 858, 859, 924], "force_parallel": [213, 308, 858, 859, 924], "asof": [213, 308, 859, 924], "rather": [213, 308, 468, 551, 565, 598, 609, 701, 811, 859, 924, 1184, 1194, 1282, 1319], "asof_join": [213, 308], "distanc": [213, 308, 476, 811, 859, 924, 1088, 1319], "plan": [213, 214, 308, 393, 811, 828, 832, 837, 841, 858, 859, 881, 885, 924], "gdp": [213, 308, 859, 924], "date_rang": [213, 277, 308, 406, 409, 427, 435, 446, 1018, 1037, 1043, 1044, 1061, 1062], "2016": [213, 308, 859, 924], "4164": [213, 308, 859, 924], "4411": [213, 308, 859, 924], "4566": [213, 308, 859, 924], "4696": [213, 308, 859, 924], "4827": [213, 308], "2017": [213, 308, 859, 924], "2018": [213, 308, 429, 859, 924, 1045], "2019": [213, 308, 859, 924], "popul": [213, 308, 859, 924], "82": [213, 308, 859, 924], "66": [213, 276, 308, 626, 627, 723, 811, 859, 896, 924, 1115, 1201, 1319], "83": [213, 308, 859, 924], "quit": [213, 308], "earlier": [213, 308], "later": [213, 308, 564, 881, 924], "countri": [213, 308, 399, 1011], "gdp_date": [213, 308], "gdp2": [213, 308], "germani": [213, 308], "netherland": [213, 308], "784": [213, 308], "833": [213, 308], "914": [213, 308], "910": [213, 308, 658, 1239], "909": [213, 308], "pop2": [213, 308], "request": [214, 308], "describe_plan": [214, 308], "unoptim": [214, 308], "describe_optimized_plan": [214, 308], "show_graph": [214, 308, 924], "un": [214, 308], "graphviz": [214, 308, 885, 924], "much": [216, 275, 294, 308, 390, 514, 539, 553, 665, 666, 774, 811, 912, 1003, 1131, 1156, 1166, 1246, 1247, 1319], "intens": [216, 294, 308, 590, 811, 1166, 1319], "materi": [216, 243, 294, 308, 832, 873, 912, 924, 929, 1166, 1319], "parallelis": [216, 294, 308, 1166, 1319], "achiev": [216, 294, 308, 553, 666, 811, 1004, 1166, 1184, 1247, 1319], "black": [216, 308, 361, 362, 363, 364, 365], "arbitrarili": [216, 308], "rearrang": [216, 308], "transform": [216, 255, 308, 551, 697, 699, 700, 811, 888, 924], "map_el": [216, 308, 323, 551, 723, 811, 936, 1319], "lru_cach": [216, 308, 553, 811, 1166, 1319], "column_1": [216, 272, 308], "better": [216, 266, 294, 308, 553, 666, 811, 828, 912, 924, 1209, 1212, 1247, 1319], "axi": [217, 219, 222, 224, 257, 308, 731, 732, 868, 924], "max_horizont": [217, 308, 775], "null_strategi": [219, 257, 308], "nullstrategi": [219, 257, 308], "mean_horizont": [219, 308, 777], "propag": [219, 257, 308, 345, 451, 518, 582, 583, 585, 648, 738, 811, 957, 1135, 1175, 1176, 1229, 1319], "spam": [219, 308, 658, 1239], "ignore_nul": [220, 258, 308, 319, 321, 345, 452, 454, 455, 518, 648, 724, 726, 738, 811, 933, 934, 957, 1069, 1071, 1072, 1135, 1229, 1309, 1319], "id_var": [222, 308, 868, 924], "value_var": [222, 308, 868, 924], "variable_nam": [222, 308, 868, 924], "value_nam": [222, 308, 868, 924], "unpivot": [222, 308, 868, 924], "massag": [222, 308, 868, 924], "measur": [222, 308, 868, 924], "steve": [223, 308, 869, 924], "elis": [223, 308, 869, 924], "ag": [223, 308, 869, 924], "anna": [223, 308, 869, 924], "megan": [223, 308, 869, 924], "thoma": [223, 308, 869, 924], "min_horizont": [224, 308, 780, 790], "what": [227, 308, 311, 398, 551, 650, 676, 811, 1010, 1231, 1257, 1309, 1319, 1323], "pack": [227, 308], "expr_unique_subset": [227, 308], "df_nuniqu": [227, 308], "df_agg_nuniqu": [227, 308], "include_kei": [229, 243, 308], "offer": [230, 308, 594, 811, 872, 924], "cast_str_to_int": [230, 308, 872, 924], "col_nam": [230, 308, 553, 801, 811, 872, 924], "tdf": [230, 308, 872, 924], "aggregate_funct": [231, 308], "pivotagg": [231, 308], "sort_column": [231, 308], "section": [231, 308, 649, 657, 658, 660, 674, 675, 752, 753, 755, 756, 798, 799, 1230, 1238, 1239, 1241, 1255, 1256], "predefin": [231, 308], "predict": [231, 234, 277, 308], "transpos": [231, 308], "discoveri": [231, 308], "col3": [231, 308, 1328], "tanh": [231, 308, 811, 1319], "998347": [231, 308], "964028": [231, 308], "999954": [231, 308], "unique_column_valu": [231, 308], "column_nam": [235, 236, 272, 308, 875, 924], "coo": [235, 308, 875, 924], "car": [235, 262, 308, 607, 811, 875, 924], "cam": [235, 308, 875, 924], "replace_column": [237, 308], "t_0": [240, 308, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 811, 877, 924], "t_1": [240, 308, 453, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 811, 877, 924, 1070, 1319], "t_n": [240, 308, 453, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 811, 877, 924, 1070, 1319], "strptime": [240, 308, 429, 610, 811, 877, 924, 1045], "set_sort": [240, 277, 308, 610, 811, 859, 877, 924, 1319], "2d": [240, 266, 270, 308, 426, 610, 771, 811, 877, 924, 1011, 1018], "sum_a": [240, 308, 610, 811, 877, 924], "min_a": [240, 308, 610, 811, 877, 924], "max_a": [240, 308, 610, 811, 877, 924], "by_pred": [241, 308], "accord": [241, 308, 552, 598, 752, 753, 755, 756, 798, 799, 811, 1025, 1184, 1319], "mutual": [241, 308], "exclus": [241, 308, 723, 730, 767, 768, 811], "clariti": [241, 308], "toomanyrowsreturnederror": [241, 308], "norowsreturnederror": [241, 308], "inherit": [241, 308, 393, 811, 837, 924], "rowserror": [241, 308], "littl": [242, 308], "peak": [242, 308, 592, 593, 811, 1181, 1182, 1319], "flat": [243, 308, 512, 606, 811, 1129, 1191, 1319], "high": [243, 308, 598, 811, 823, 1184, 1319], "cost": [243, 308], "reoconstruct": [243, 308], "defaultdict": [243, 308], "assum": [243, 308, 863, 864, 906, 912, 924], "with_replac": [244, 308, 528, 632, 811, 1145, 1208, 1319], "ordereddict": [245, 308, 575, 577, 579, 793, 878, 924], "named_expr": [246, 247, 281, 282, 308, 790, 793, 879, 880, 899, 900, 924], "threshold": [246, 308, 879, 924], "set_auto_structifi": [246, 281, 308, 879, 899, 924], "auto_structifi": [246, 281, 308, 879, 899, 924], "is_odd": [246, 308, 879, 924], "_is_odd": [246, 308, 879, 924], "sequenti": [247, 282, 308, 880, 900, 924], "fill_valu": [250, 251, 275, 308, 635, 636, 811, 883, 884, 924, 1216, 1217, 1319], "opposit": [250, 308, 352, 533, 635, 811, 883, 924, 964, 1150, 1216, 1319], "lag": [250, 308, 352, 533, 635, 737, 811, 883, 924, 964, 1150, 1216, 1319], "shrink": [252, 308, 637, 811, 1218, 1219, 1319], "hold": [252, 308], "multithread": [254, 308, 366, 367, 645, 714, 715, 733, 811, 827, 887, 893, 924, 965, 1152, 1226, 1319], "although": [255, 308, 888, 924], "sqlcontext": [255, 308, 823, 888, 924, 1327], "1999": [255, 308, 426, 929, 1042], "2010": [255, 308, 929], "2077": [255, 308], "888": [255, 308, 888, 924], "AND": [255, 308, 724, 725, 888, 924, 929, 1300, 1319], "2050": [255, 308], "alias": [255, 308, 888, 924], "a_is_even": [255, 308, 888, 924], "concat_w": [255, 308, 888, 924], "b_b": [255, 308], "float4": [255, 308, 888, 924], "ddof": [256, 278, 308, 354, 359, 536, 543, 624, 625, 628, 629, 647, 721, 739, 741, 788, 789, 792, 800, 811, 889, 897, 924, 966, 971, 1153, 1160, 1203, 1205, 1228, 1308, 1319], "deviat": [256, 308, 454, 624, 625, 647, 792, 811, 889, 924, 1071, 1228, 1319], "degre": [256, 278, 308, 536, 543, 600, 624, 625, 628, 629, 647, 721, 732, 739, 741, 788, 789, 792, 800, 811, 889, 897, 924, 1203, 1205, 1228, 1308, 1319], "freedom": [256, 278, 308, 536, 543, 624, 625, 628, 629, 647, 721, 739, 741, 788, 789, 792, 800, 811, 889, 897, 924, 1203, 1205, 1228, 1308, 1319], "divisor": [256, 278, 308, 536, 543, 624, 625, 628, 629, 647, 721, 739, 741, 788, 789, 792, 800, 811, 889, 897, 924, 1203, 1205, 1228, 1308, 1319], "816497": [256, 308], "gather_everi": [260, 308, 710, 811, 892, 924, 1292, 1319], "mostli": [261, 308, 462, 811], "categoricaltyp": [261, 308], "fruit": [262, 308, 607, 655, 684, 692, 811, 1236, 1265, 1273], "beetl": [262, 308, 607, 811], "audi": [262, 308, 607, 811], "28": [262, 308, 316, 429, 447, 811, 1045, 1063, 1328], "300": [262, 308, 588, 811, 1197, 1198, 1200, 1319], "drop_first": [264, 308, 1296, 1319], "dummi": [264, 308, 1296, 1319], "foo_1": [264, 308], "foo_2": [264, 308], "bar_3": [264, 308], "bar_4": [264, 308], "ham_a": [264, 308], "ham_b": [264, 308], "instantiat": [265, 308, 1298, 1319], "from_repr": [265, 308, 1298, 1319], "df_from_str_repr": [265, 308], "eval": [265, 308, 553, 758, 811, 1166, 1298, 1319], "indexord": [266, 308], "fortran": [266, 308], "downstream": [266, 308, 634, 811, 1214, 1319], "applic": [266, 308, 553, 613, 615, 617, 619, 621, 624, 626, 628, 811], "prevent": [266, 308, 318, 383, 384, 495, 573, 707, 811, 924, 997, 998, 1289, 1319], "reshap": [266, 308, 512, 811, 1129, 1319], "immut": [266, 308, 1300, 1319], "u1": [266, 308], "f4": [266, 308], "view": [266, 308, 553, 811, 1319], "recarrai": [266, 308], "rec": [266, 308], "use_pyarrow_extension_arrai": [267, 308, 1301, 1319], "extens": [267, 308, 1301, 1319], "na": [267, 308, 684, 1301, 1319], "doubl": [267, 308], "four": [269, 308], "five": [269, 308, 1328], "return_typ": [270, 308], "torchexporttyp": [270, 308], "tensor": [270, 308, 1319], "polarsdataset": [270, 308], "pytorch": [270, 308, 1319], "tensordataset": [270, 308], "design": [270, 308], "label_column": [270, 308], "lbl": [270, 308], "feat1": [270, 308], "feat2": [270, 308], "0000": [270, 308, 1328], "5000": [270, 308], "opt": [270, 308], "half": [270, 308, 430, 452, 453, 454, 455, 811, 1046, 1069, 1070, 1071, 1072, 1319], "experiment": [270, 308], "model": [270, 308], "float16": [270, 308], "dataload": [270, 308], "util": [270, 308, 763, 843, 924, 928], "dl": [270, 308], "scikit": [270, 308], "learn": [270, 308], "sklearn": [270, 308], "fetch_california_h": [270, 308], "hous": [270, 308], "feature_nam": [270, 308], "train": [270, 308], "loader": [270, 308], "bottom_k": [271, 308, 367, 714, 715, 811, 893, 924, 1303, 1319], "header_nam": [272, 308], "perhap": [272, 308], "column_2": [272, 308], "name_gener": [272, 308], "base_nam": [272, 308], "my_column_": [272, 308], "my_column_0": [272, 308], "my_column_1": [272, 308], "my_column_2": [272, 308], "j": [272, 308], "new_id": [272, 308], "uniquekeepstrategi": [273, 308, 894, 924], "kept": [273, 308, 894, 924], "decompos": [274, 308, 895, 924], "t_a": [274, 308, 895, 924], "t_b": [274, 308, 895, 924], "t_c": [274, 308, 895, 924], "t_d": [274, 308, 895, 924], "womp": [274, 308, 895, 924], "t_": [274, 308, 453, 811, 895, 924, 1070, 1319], "t_struct": [274, 308, 895, 924], "step": [275, 308, 466, 730, 767, 768, 811], "unstackdirect": [275, 308], "pivot": [275, 308], "ascii_uppercas": [275, 308], "h": [275, 308, 316, 433, 436, 637, 674, 675, 691, 694, 698, 811, 1255, 1256, 1272, 1275, 1279], "x_0": [275, 308, 452, 453, 454, 455, 811, 1069, 1070, 1071, 1072, 1319], "x_1": [275, 308, 453, 811, 1070, 1319], "y_0": [275, 308, 452, 453, 454, 455, 811, 1069, 1070, 1071, 1072, 1319], "y_1": [275, 308], "z_0": [275, 308], "z_1": [275, 308], "include_nul": [276, 308, 896, 924], "implicit": [276, 308, 896, 924], "syntact": [276, 308, 605, 724, 726, 729, 740, 742, 745, 759, 764, 765, 766, 775, 777, 779, 780, 782, 784, 785, 790, 792, 794, 796, 800, 802, 811, 896, 924, 1190, 1227, 1319], "sugar": [276, 308, 605, 724, 726, 729, 740, 742, 745, 759, 764, 765, 766, 775, 777, 779, 780, 782, 784, 785, 790, 792, 794, 796, 800, 802, 811, 896, 924, 1190, 1227, 1319], "400": [276, 308, 439, 440, 442, 896, 924, 1197, 1198, 1200, 1319], "600": [276, 308, 439, 440, 442, 896, 924, 929], "700": [276, 308, 896, 924], "new_df": [276, 308, 896, 924], "time_column": [277, 308], "frequenc": [277, 308], "chain": [277, 308, 430, 444, 495, 573, 574, 576, 578, 580, 581, 596, 706, 801, 811, 1046, 1060], "offset_bi": [277, 308, 430, 444, 757, 1046, 1060], "forward_fil": [277, 308, 360, 381, 384, 635, 811], "varianc": [278, 308, 455, 496, 628, 629, 721, 800, 811, 897, 924, 1072, 1115, 1205, 1308, 1319], "grow": [279, 308], "not_": [281, 308, 490, 811, 899, 924, 1319], "not_c": [281, 308, 899, 924], "52": [281, 308, 445, 630, 811, 859, 899, 924], "diff": [281, 308, 437, 438, 439, 440, 441, 442, 443, 529, 811, 899, 924, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1146, 1319], "_diff": [281, 308, 899, 924], "row_nr": [283, 308, 902, 924], "1001": [284, 308, 903, 924], "1002": [284, 308, 903, 924], "named_agg": [286, 904], "_sum": [286, 904], "_mean_squar": [286, 904], "b_sum": [286, 904], "c_mean_squar": [286, 904], "sub": [288, 294, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 354, 355, 359, 518, 526, 811, 950, 951, 952, 955, 956, 957, 958, 959, 960, 961, 962, 966, 967, 971, 1135, 1143], "map_group": [288, 728, 906], "toward": [289, 499, 520, 742, 811, 907, 1116, 1137, 1319], "nr": [291, 302, 909, 920], "triangl": [294, 912], "group_df": [294, 912], "maxim": [295, 331, 811, 913, 943, 1319], "833333": [296, 914], "minim": [298, 332, 339, 504, 637, 645, 811, 916, 944, 951, 1121, 1170, 1218, 1319], "overview": [308, 811, 823, 924, 1319, 1328], "frameinittyp": [308, 924], "entri": [308, 924, 1327], "workaround": 308, "pola": 308, "2846": 308, "df4": 308, "df5": 308, "df6": 308, "approx_n_uniqu": [308, 811, 924], "corr": 308, "drop_in_plac": 308, "drop_nul": [308, 396, 811, 924, 1008, 1319], "estimated_s": [308, 1319], "explod": [308, 367, 464, 590, 606, 715, 811, 924, 928, 1191, 1319], "find_idx_by_nam": 308, "fold": [308, 562, 736, 743, 744, 747, 748, 786], "frame_equ": 308, "group_by_rol": [308, 924], "groupby_dynam": [308, 924], "groupby_rol": [308, 924], "hash_row": 308, "hstack": 308, "insert_at_idx": 308, "is_dupl": [308, 811, 1319], "is_empti": [308, 1319], "is_uniqu": [308, 811, 1319], "iter_column": 308, "iter_slic": 308, "melt": [308, 924], "merge_sort": [308, 924], "n_uniqu": [308, 324, 811, 1319], "pipe": [308, 811, 924], "plot": [308, 873, 885, 924, 1319], "hvplottabularpolar": [308, 1319], "defer": [308, 311, 1319, 1323], "galleri": [308, 311, 1319, 1323], "scatter": [308, 311, 1213, 1319], "speci": [308, 311], "setosa": [308, 311], "versicolor": [308, 311], "stock_1": [308, 311], "stock_2": [308, 311], "quantil": [308, 598, 621, 622, 811, 924, 1184, 1201, 1319], "replace_at_idx": 308, "select_seq": [308, 924], "shift_and_fil": [308, 811, 924, 1319], "shrink_to_fit": [308, 1319], "take_everi": [308, 811, 924, 1319], "to_dummi": [308, 1319], "to_numpi": [308, 551, 811, 1319], "to_panda": [308, 1319], "to_struct": [308, 658], "to_torch": [308, 1319], "unnest": [308, 391, 598, 608, 658, 659, 682, 683, 704, 811, 924, 969, 1004, 1158, 1184, 1193, 1263, 1264, 1319], "unstack": 308, "with_columns_seq": [308, 924], "with_row_count": [308, 924], "write_avro": 308, "write_databas": 308, "write_delta": 308, "write_excel": 308, "write_ipc_stream": 308, "write_json": 308, "write_parquet": 308, "cum_prod": [316, 388, 811, 1001, 1319], "ghi": [316, 658, 811, 929, 1239], "94": [317, 811], "to_uppercas": [318, 580, 659, 811], "confus": [319, 489, 491, 676, 811], "kleen": [319, 321, 724, 725, 726, 727, 811, 933, 934, 1319], "bitwis": [320, 589, 723, 724, 725, 726, 727, 811], "upcast": [322, 811], "skip_nul": [323, 553, 811, 936, 1166, 1319], "pass_nam": [323, 553, 811], "mapelementsstrategi": [323, 553, 811], "thread_loc": [323, 553, 811], "unknown": [323, 657, 771, 811, 1238], "alpha": [323, 452, 454, 455, 811, 841, 843, 873, 885, 924, 1069, 1071, 1072, 1319], "stage": [323, 811], "code": [323, 361, 362, 363, 364, 365, 393, 553, 634, 811, 837, 843, 861, 924, 1214, 1319], "gil": [323, 553, 811], "approx": [324, 811], "1005": [324, 811], "invers": [325, 326, 327, 328, 329, 330, 811, 937, 938, 939, 940, 941, 942, 1300, 1319], "cosin": [325, 326, 376, 377, 551, 811, 937, 938, 992, 993, 1319], "570796": [325, 327, 811, 937, 939, 1319], "hyperbol": [326, 328, 330, 377, 641, 712, 811, 938, 940, 942, 993, 1223, 1294, 1319], "sine": [327, 328, 551, 640, 641, 811, 939, 940, 1222, 1223, 1319], "881374": [328, 811, 940, 1319], "tangent": [329, 330, 711, 712, 811, 941, 942, 1293, 1294, 1319], "785398": [329, 731, 732, 811, 941, 1319], "rank": [333, 511, 733, 739, 758, 811, 945, 1128, 1319], "arg_wher": [334, 811], "subarrai": [336, 337, 948, 949], "membership": [340, 506, 952, 1123], "number_of_two": [341, 508], "null_on_oob": [344, 514, 516, 539, 956, 1131, 1133, 1156], "sublist": [344, 503, 504, 506, 509, 513, 514, 515, 516, 517, 518, 519, 529, 534, 538, 539, 541, 956, 1100, 1120, 1121, 1123, 1126, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1146, 1151, 1155, 1156, 1158, 1319], "x_y": [345, 518], "707107": [354, 454, 624, 625, 811, 966, 1071, 1319], "i8": [356, 357, 406, 410, 414, 417, 419, 421, 424, 427, 428, 431, 445, 446, 540, 637, 784, 787, 802, 811, 968, 969, 1006, 1018, 1022, 1035, 1037, 1044, 1047, 1061, 1062, 1157, 1192, 1218, 1306, 1319], "field_0": [357, 541, 969, 1158], "field_1": [357, 541, 969, 1158], "field_n": [357, 541, 969, 1158], "n0": [357, 541], "n1": [357, 541], "c1": 357, "c2": 357, "c3": 357, "seen": [360, 467, 811], "substr": [361, 364, 365, 649, 655, 660, 674, 675, 680, 681, 682, 683, 684, 929, 972, 975, 976, 1230, 1236, 1241, 1255, 1256, 1261, 1262, 1263, 1264, 1265], "ends_with": [361, 365, 649, 684, 929, 1265], "yellow": [361, 362, 363, 364, 365], "x00": [361, 362, 363, 364, 365, 653, 972, 973, 974, 975, 976, 1234], "xff": [361, 362, 363, 364, 365, 653, 972, 973, 974, 975, 976, 1234], "contains_with_lit": 361, "contains_with_expr": 361, "transferencod": [362, 363, 653, 654, 973, 974, 1234, 1235], "hex": [362, 363, 653, 654, 696, 973, 974, 1234, 1235, 1277], "base64": [362, 363, 653, 654, 973, 974, 1234, 1235], "000000": [362, 363, 653, 973, 974, 1234], "ffff00": [362, 363, 653, 973, 974, 1234], "0000ff": [362, 363, 653, 973, 974, 1234], "anywher": [364, 365, 691, 693, 694, 1272, 1274, 1275], "ends_with_lit": 364, "ends_with_expr": 364, "starts_with_lit": 365, "starts_with_expr": 365, "frac": [366, 367, 452, 454, 455, 642, 714, 715, 811, 977, 1069, 1071, 1072, 1224, 1303, 1319], "top_k_bi": [366, 367, 714, 811], "bottom_k_bi": [366, 714, 715, 811], "_btm_by_a": [367, 811], "_btm_by_b": [367, 811], "a_btm_by_a": [367, 811], "b_btm_by_a": [367, 811], "c_btm_by_a": [367, 811], "a_btm_by_b": [367, 811], "b_btm_by_b": [367, 811], "c_btm_by_b": [367, 811], "_by_ca": [367, 715, 811], "_by_cb": [367, 715, 811], "a_by_ca": [367, 715, 811], "b_by_ca": [367, 715, 811], "c_by_ca": [367, 715, 811], "a_by_cb": [367, 715, 811], "b_by_cb": [367, 715, 811], "c_by_cb": [367, 715, 811], "to_fram": [369, 409, 430, 435, 444, 691, 1004, 1184, 1209, 1212, 1263, 1264, 1272, 1319], "259921": [371, 811, 984, 1319], "587401": [371, 811], "numericliter": [373, 374, 375, 811, 988, 989, 990, 1319], "temporalliter": [373, 374, 375, 811, 988, 989, 990, 1027, 1028, 1319], "outsid": [373, 811, 988, 1319], "clip": [374, 375, 811, 989, 990, 1319], "543081": [377, 811, 993, 1319], "cotang": [378, 811, 994, 1319], "cumul": [380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 742, 743, 744, 745, 746, 747, 748, 749, 750, 811, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1319], "cum_count_revers": [380, 811], "cum_max_revers": [381, 811], "cum_max_all_fil": [381, 811], "cum_min_revers": [382, 811], "cum_prod_revers": [383, 811], "cum_sum_revers": [384, 811], "value_cum_sum": [384, 811], "value_cum_sum_all_fil": [384, 811], "cum_count": [385, 811, 1319], "cum_max": [386, 811, 999, 1319], "cum_min": [387, 811, 1000, 1319], "cum_sum": [389, 478, 705, 746, 749, 811, 856, 924, 1002, 1114, 1319], "min_period": [390, 452, 454, 455, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 788, 789, 811, 1003, 1069, 1071, 1072, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1319], "slide": [390, 811, 1003, 1319], "slot": [390, 394, 509, 811, 1003, 1006, 1126, 1319], "realli": [390, 650, 676, 811, 1003, 1231, 1257, 1319], "visit": [390, 811, 1003, 1319], "left_clos": [391, 598, 811, 1004, 1184, 1319], "include_break": [391, 598, 811, 1004, 1184, 1319], "bin": [391, 476, 598, 696, 723, 804, 811, 1004, 1088, 1184, 1277, 1313, 1319], "discret": [391, 394, 449, 476, 509, 529, 598, 811, 1004, 1006, 1066, 1088, 1126, 1146, 1184, 1319], "plu": [391, 546, 811, 1004, 1163, 1184, 1319], "endpoint": [391, 598, 811, 1004, 1184, 1319], "observ": [391, 452, 453, 454, 455, 598, 811, 1004, 1069, 1070, 1071, 1072, 1184, 1319], "fall": [391, 598, 811, 1004, 1184, 1319], "qcut": [391, 811, 1004, 1319], "breakpoint": [391, 476, 598, 811, 1004, 1088, 1184, 1319], "brk": [391, 598, 811], "foo_bin": [391, 598, 811], "radian": [392, 731, 811], "720": [392, 600, 811], "540": [392, 600, 811], "360": [392, 600, 811], "180": [392, 600, 811], "pickl": [393, 811, 837, 924], "circumst": [393, 811, 837, 924], "secur": [393, 811, 837, 924], "implic": [393, 811, 837, 924], "trust": [393, 811, 837, 924], "meta": [393, 811], "ba": [393, 456, 564, 684, 759, 811, 929], "null_behavior": [394, 509, 811, 1006, 1126, 1319], "nullbehavior": [394, 509, 811, 1006, 1126, 1319], "drop_nan": [397, 811, 1009, 1319], "week_mask": [398, 735, 1010], "holidai": [398, 735, 1010], "busi": [398, 735, 1010], "handi": [398, 735, 1010], "pip": [398, 735, 1010], "dutch": [398, 735, 1010], "my_holidai": [398, 735, 1010], "country_holidai": [398, 735, 1010], "nl": [398, 735, 1010], "2025": [398, 735, 929, 1010], "business_day_count": [398, 1010], "land": [398, 1010], "weekend": [398, 735, 1010], "rolled_forward": 398, "vari": [399, 1011, 1328], "rare": [399, 1011], "switch": [399, 1011], "samoa": [399, 1011], "apia": [399, 1011], "did": [399, 1011], "2011": [399, 1011], "dst_offset": [399, 1011], "2012": [399, 1011], "replace_time_zon": [399, 405, 408, 1016, 1017, 1050], "pacif": [399, 1011], "11h": [399, 1011], "13h": [399, 1011], "lose": [400, 1012], "time_unit_m": [400, 1012], "time_unit_n": [400, 1012], "999": [401, 416, 929, 1013, 1031, 1328], "1897": [401, 416, 1013, 1031], "3002": [401, 416, 1013, 1031], "cent": 401, "0999": [401, 416], "naiv": [402, 403, 1014, 1015, 1275], "compon": [402, 431, 691, 694, 757, 1014, 1047, 1272, 1275], "resolv": 402, "tm": [402, 929], "456000": [402, 1014], "101000": 402, "d1": 402, "d2": 402, "d3": 402, "europ": [403, 408, 429, 1015, 1020, 1045], "london": [403, 408, 429, 1015, 1020, 1045], "gmt": [403, 408, 429, 1015, 1020, 1045], "bst": [403, 408, 429, 1015, 1020, 1045], "1978": [404, 405, 410, 413, 414, 417, 419, 424, 431, 434, 448], "500_000": [404, 405, 410, 414, 417, 419, 424, 431, 434], "2065": [404, 405, 410, 414, 417, 419, 424, 431, 434], "60_000": [404, 405, 410, 414, 417, 419, 424, 431, 434], "060": [404, 405, 410, 414, 417, 419, 424, 431, 434], "weekdai": [406, 427], "ordinal_dai": [406, 446], "day_of_month": [406, 427, 446], "day_of_year": [406, 427, 446], "356": [406, 427, 446], "357": [406, 427, 446], "358": [406, 427, 446], "359": [406, 427, 446], "total_dai": [407, 1019], "base_utc_offset": [408, 1020], "0m": [408, 1020], "epochtimeunit": [409, 763, 1021], "epoch_n": [409, 1021], "epoch_": [409, 1021], "978307200000000": [409, 435, 1021, 1051], "978307200": [409, 1021], "978393600000000": [409, 435, 1021, 1051], "978393600": [409, 1021], "978480000000000": [409, 435, 1021, 1051], "978480000": [409, 1021], "total_hour": [411, 1023], "leap": [412, 426, 1024, 1042], "leap_year": 412, "iso": [413, 445, 446, 1025, 1061, 1062], "1977": [413, 448], "1979": [413, 448], "calendar_year": [413, 448], "1976": [413, 448], "500000": [414, 1029], "60000": 414, "total_microsecond": [415, 1030], "mlnm": 416, "total_millisecond": [418, 1033], "total_minut": [420, 1036], "think": [422, 423, 1038, 1039], "vectoris": [422, 423, 1038, 1039], "tseri": [422, 423, 1038, 1039], "monthend": [422, 1038], "rollforward": [422, 1038], "monthbegin": [423, 1039], "rollback": [423, 1039], "500000000": [424, 1040], "60000000": 424, "total_nanosecond": [425, 1041], "minu": [426, 586, 811, 1042], "dictat": [426, 811, 928, 1042], "2005": [426, 1042], "date_plus_1i": [426, 1042], "1y2mo": [426, 1042], "date_min": 426, "1998": [426, 1042], "2003": [426, 763, 1042], "2004": [426, 1042], "2006": [426, 1042], "new_dat": 426, "ordin": [427, 601, 811, 1043, 1186, 1319], "366": [427, 1043], "use_earliest": [429, 444, 691, 694, 754, 1045, 1060, 1272, 1275], "non_exist": [429, 1045], "nonexist": [429, 1045], "convert_time_zon": [429, 1045], "london_timezon": [429, 1045], "amsterdam": [429, 1045], "london_to_amsterdam": [429, 1045], "cet": [429, 1045], "cest": [429, 1045], "ts_local": [429, 1045], "brussel": [429, 1045], "localis": [430, 444, 1060], "dst": [430, 444, 1046, 1060], "cst": [430, 444, 1046, 1060], "cdt": [430, 444, 1046, 1060], "safe": [430, 444, 603, 811, 1046, 1060, 1188, 1275, 1299, 1300, 1319], "225": [430, 444], "10m": [430, 444, 1046, 1060], "milli": [431, 1047], "micro": [431, 1047], "total_second": [432, 1048], "to_str": [433, 1049], "datetime_str": [433, 436], "day_nam": [433, 436], "month_nam": [433, 436], "march": [433, 436, 1049, 1052], "april": [433, 436, 1049, 1052], "timestamp_u": [435, 1051], "timestamp_m": 435, "978307200000": 435, "978393600000": 435, "978480000000": 435, "strftime": [436, 1052], "days_diff": 437, "hours_diff": 438, "200m": [439, 440, 442], "milliseconds_diff": [439, 440, 442], "200": [439, 440, 442, 605, 811, 1190, 1197, 1198, 1200, 1319], "200000": [439, 864, 924], "800": [439, 440, 442], "minutes_diff": 441, "1440": [441, 1057], "200000000": 442, "seconds_diff": 443, "truncate_str": 444, "truncate_td": 444, "53": [445, 1061], "time_unit_u": 447, "32971": [447, 1063], "32974": [447, 1063], "32976": [447, 1063], "iso_year": 448, "pk": [449, 811, 1066, 1319], "probabl": [449, 598, 811, 1066, 1184, 1319], "459148": [449, 811], "754888": [449, 811], "span": [452, 454, 455, 811, 1069, 1071, 1072, 1319], "half_lif": [452, 453, 454, 455, 811, 1069, 1070, 1071, 1072, 1319], "adjust": [452, 454, 455, 642, 811, 1069, 1071, 1072, 1224, 1319], "exponenti": [452, 453, 454, 455, 457, 595, 811, 1069, 1070, 1071, 1072, 1073, 1319], "weight": [452, 453, 454, 455, 611, 612, 613, 615, 617, 619, 621, 624, 626, 628, 642, 811, 1069, 1070, 1071, 1072, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1224, 1319], "decai": [452, 453, 454, 455, 811, 1069, 1070, 1071, 1072, 1319], "term": [452, 454, 455, 661, 680, 692, 811, 1069, 1071, 1072, 1242, 1261, 1273, 1319], "mass": [452, 454, 455, 811, 1069, 1071, 1072, 1319], "gamma": [452, 454, 455, 811, 1069, 1071, 1072, 1319], "foral": [452, 454, 455, 811, 1069, 1071, 1072, 1319], "geq": [452, 454, 455, 811, 1069, 1071, 1072, 1319], "theta": [452, 454, 455, 811, 1069, 1071, 1072, 1319], "life": [452, 454, 455, 811, 1069, 1071, 1072, 1319], "exp": [452, 453, 454, 455, 811, 1069, 1070, 1071, 1072, 1319], "ln": [452, 453, 454, 455, 811, 1069, 1070, 1071, 1072, 1319], "smooth": [452, 454, 455, 811, 1069, 1071, 1072, 1319], "factor": [452, 454, 455, 713, 811, 1069, 1071, 1072, 1302, 1319], "leq": [452, 454, 455, 811, 1069, 1071, 1072, 1319], "imbal": [452, 454, 455, 811, 1069, 1071, 1072, 1319], "ew": [452, 454, 455, 811, 1069, 1071, 1072, 1319], "w_i": [452, 454, 455, 811, 1069, 1071, 1072, 1319], "recurs": [452, 454, 455, 811, 1069, 1071, 1072, 1319], "y_t": [452, 454, 455, 811, 1069, 1071, 1072, 1319], "y_": [452, 453, 454, 455, 811, 1069, 1070, 1071, 1072, 1319], "x_t": [452, 454, 455, 811, 1069, 1071, 1072, 1319], "x_2": [452, 453, 454, 455, 811, 1069, 1070, 1071, 1072, 1319], "428571": [452, 811, 1069, 1319], "ldot": [453, 811, 1070, 1319], "x_n": [453, 811, 1070, 1319], "t_2": [453, 811, 1070, 1319], "ewma": [453, 811, 1070, 1319], "alpha_i": [453, 811, 1070, 1319], "t_i": [453, 811, 1070, 1319], "y_i": [453, 811, 1070, 1319], "x_i": [453, 811, 1070, 1319], "quad": [453, 811, 1070, 1319], "370h": [453, 811, 1070, 1319], "4d": [453, 811, 1070, 1319], "292893": [453, 811, 1070, 1319], "492474": [453, 811, 1070, 1319], "254508": [453, 811, 1070, 1319], "bia": [454, 455, 496, 623, 642, 811, 1071, 1072, 1115, 1202, 1224, 1319], "unbias": [454, 455, 811, 1071, 1072, 1319], "963624": [454, 811, 1071, 1319], "928571": [455, 811, 1072, 1319], "wildcard": [456, 743, 744, 747, 748, 761, 786, 811, 928], "regex": [456, 559, 649, 651, 652, 655, 657, 658, 659, 660, 674, 675, 684, 759, 811, 929, 1230, 1232, 1233, 1236, 1238, 1239, 1240, 1241, 1255, 1256, 1265], "aa": [456, 649, 660, 759, 811, 1005, 1230, 1241, 1319], "cc": [456, 759, 811, 1005, 1319], "718282": [457, 811, 1073, 1319], "389056": [457, 811, 1073, 1319], "54": [457, 811, 1115, 1319, 1328], "59815": [457, 811], "extrem": [459, 612, 811, 1076, 1196, 1319], "expressioin": [459, 811, 1076, 1319], "group_col": [462, 722, 811], "g1": [462, 722, 811], "g2": [462, 722, 811], "lt": [462, 722, 811, 1319], "gte": [462, 722, 811], "n_1": [462, 811], "n_2": [462, 811], "n_3": [462, 811], "exprlistnamespac": [464, 811], "divis": [466, 716, 811], "truediv": [466, 811], "subtli": [466, 811], "intuit": [466, 811, 929], "backward_fil": [467, 635, 811], "deseri": [468, 564, 811, 881, 924], "enclos": [468, 811], "9774092659964970114": [474, 811], "13614470193936745724": [474, 811], "1101441246220388612": [474, 811], "11638928888656214026": [474, 811], "13382926553367784577": [474, 811], "bin_count": [476, 811, 1088, 1319], "include_categori": [476, 811, 1088, 1319], "include_breakpoint": [476, 811, 1088, 1319], "occurr": [476, 483, 484, 487, 488, 720, 811, 1088, 1097, 1098, 1103, 1104, 1307, 1319], "interpolationmethod": [479, 811, 1091, 1319], "regrid": [479, 811], "grid": [479, 811], "df_original_grid": [479, 811], "grid_point": [479, 811], "df_new_grid": [479, 811], "satisfi": [480, 811, 1092, 1319], "conflat": [480, 811], "between_ab": [480, 811], "finit": [482, 716, 739, 811, 1096, 1319], "is_first_distinct": [483, 811, 1097, 1319], "optional_memb": [485, 811, 1100, 1319], "infinit": [486, 716, 811, 1101, 1319], "is_last_distinct": [487, 811, 1103, 1319], "_isnan": [489, 811], "b_isnan": [489, 811], "negat": [490, 587, 811, 1178, 1319], "_is_not_nan": [491, 811], "b_is_not_nan": [491, 811], "_not_nul": [492, 811], "a_not_nul": [492, 811], "b_not_nul": [492, 811], "_isnul": [493, 811], "a_isnul": [493, 811], "b_isnul": [493, 811], "undo": [495, 566, 573, 574, 576, 578, 580, 581, 596, 706, 811], "fisher": [496, 642, 811, 1115, 1224, 1319], "fourth": [496, 811, 1115, 1319], "subtract": [496, 705, 811, 1115, 1319], "distribut": [496, 642, 811, 1115, 1224, 1319], "elimin": [496, 811, 1115, 1319], "bias": [496, 642, 811, 1115, 1224, 1319], "scipi": [496, 642, 811, 1115, 1224, 1319, 1323], "stat": [496, 642, 811, 881, 924, 1115, 1224, 1319], "153061": [496, 811], "blindli": [511, 1128], "worth": [511, 1128], "enough": [511, 642, 811, 1128, 1224, 1319], "concat_list": [511, 758], "exprnamespac": 512, "cheaper": [514, 539, 1131, 1156], "symmetr": [531, 1148], "sdiff": 531, "taken": [534, 680, 1151, 1261], "363961": [536, 1153], "n_field_strategi": [541, 1158], "tostructstrategi": [541, 1158], "first_non_nul": [541, 1158], "max_width": [541, 1158], "pre": [541, 553, 598, 784, 787, 802, 811, 1184, 1319], "obtain": 541, "ok": 541, "longest": 541, "logarithm": [544, 545, 546, 811, 1161, 1162, 1163, 1319], "584963": [544, 811], "30103": [545, 811], "60206": [545, 811], "natur": [546, 811, 1163, 1319], "693147": [546, 811, 1161, 1163, 1319], "098612": [546, 811, 1161, 1163, 1319], "386294": [546, 811, 1163, 1319], "lowest": [547, 811], "9223372036854775808": [547, 811], "agg_list": [549, 551, 811], "map_batch": [549, 772, 811, 863, 924], "keep_nam": [550, 811], "a_revers": [550, 574, 578, 607, 706, 811], "b_revers": [550, 574, 578, 607, 706, 811], "rstrip": [550, 574, 811], "_revers": [550, 574, 578, 607, 706, 811], "is_elementwis": [551, 811, 928], "whole": [551, 644, 645, 657, 811, 912, 924, 1238], "elementwis": [551, 611, 612, 613, 615, 619, 626, 811, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1319], "third": [551, 811], "parti": [551, 811], "book": [551, 811], "invok": [551, 811], "bug": [551, 553, 811, 863, 864, 906, 912, 924, 1166, 1319], "argmax": [551, 811], "remap": [552, 811, 1165, 1319], "lookup": [552, 807, 811, 1165, 1319], "suppos": [553, 811, 1166, 1319], "sqrt": [553, 642, 731, 732, 811, 1166, 1224, 1319], "discourag": [553, 811], "loop": [553, 811], "a_times_2": [553, 811], "tip": [553, 811], "again": [553, 811], "exprmetanamespac": [557, 560], "foo_bar2": [557, 560], "raise_if_undetermin": 561, "computeerror": [561, 673, 696, 1254, 1277], "e_filt": [561, 563], "e_sum_ov": [561, 563], "e_sum_slic": [561, 563], "groupstorow": 564, "tree": [565, 841, 924], "modulu": [569, 811], "xlog2": [571, 595, 811], "purpos": [572, 811, 832, 843, 924], "x_uniqu": [572, 811], "y_uniqu": [572, 811], "reverse_": [576, 596, 811], "reverse_a": [576, 596, 811], "reverse_b": [576, 596, 811], "prefix_": 577, "prefix_a": 577, "prefix_b": 577, "_suffix": 579, "a_suffix": 579, "b_suffix": 579, "lowercas": [580, 697, 1278], "uppercas": [581, 700, 1281], "to_lowercas": 581, "poison": [582, 583, 811, 1175, 1176, 1319], "nanmax": [582, 583, 811, 1175, 1176, 1319], "inequ": [584, 811], "ne": [585, 811, 1319], "unari": [586, 811], "350": [588, 811, 1198, 1319], "650": [588, 811], "850": [588, 811], "more_expr": [590, 733, 736, 737, 738, 811], "mapping_strategi": [590, 811], "windowmappingstrategi": [590, 811], "group_to_row": [590, 811], "outcom": [590, 811], "group_dtyp": [590, 811], "warn": [590, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 811, 1319], "_max": [590, 811], "c_max": [590, 811], "_min": [590, 811], "c_min": [590, 811], "sort_bi": [590, 811], "percent": [591, 811, 1180, 1319], "090909": [591, 811], "extract_numb": [594, 811], "scale_negative_even": [594, 811], "expon": [595, 811, 1319], "allow_dupl": [598, 811, 1184, 1319], "duplicateerror": [598, 811, 1184, 1319], "cut": [598, 811, 1184, 1319], "566371": [600, 811], "424778": [600, 811], "283185": [600, 811], "141593": [600, 811, 937, 1319], "rankmethod": [601, 811, 1186, 1319], "ti": [601, 811, 1186, 1319], "competit": [601, 811, 1186, 1319], "highest": [601, 719, 739, 811, 924, 1186, 1319], "immedi": [601, 730, 734, 752, 753, 755, 756, 767, 768, 784, 787, 793, 798, 799, 802, 811, 1186, 1319], "nodefault": [605, 811, 1190, 1319], "_nodefault": [605, 811, 1190, 1319], "no_default": [605, 811, 1190, 1319], "fruits_revers": [607, 811], "cars_revers": [607, 811], "rle_id": [608, 811, 1319], "rle": [609, 811, 1194, 1319], "rle_id_a": [609, 811], "rle_id_ab": [609, 811], "window_s": [611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 788, 789, 811, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1319], "rolling_map": [611, 811, 1195, 1319], "multipli": [611, 612, 613, 615, 619, 624, 626, 628, 811, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1203, 1204, 1205, 1319], "rolling_sum": [612, 811, 1196, 1319], "nansum": [612, 811, 1196, 1319], "warn_if_unsort": [613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 811], "travers": [613, 615, 619, 626, 811, 1197, 1198, 1200, 1203, 1204, 1205, 1319], "vector": [613, 615, 619, 626, 811, 1197, 1198, 1200, 1203, 1204, 1205, 1319], "5h": [613, 615, 617, 619, 621, 624, 626, 628, 811], "rolling_max_bi": [613, 615, 811], "df_tempor": [613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 811], "rolling_row_max": [613, 614, 811], "2h": [613, 614, 615, 616, 618, 619, 620, 622, 624, 625, 626, 627, 628, 629, 811], "closur": [613, 614, 615, 616, 624, 625, 626, 627, 628, 629, 811], "rolling_row_mean": [615, 616, 811], "rolling_median_bi": [617, 811], "rolling_row_median": [618, 811], "rolling_min_bi": [619, 811], "rolling_row_min": [619, 620, 811], "rolling_quantile_bi": [621, 811], "625": [621, 811], "rolling_row_quantil": [622, 811], "skew": [623, 811, 1202, 1319], "381802": [623, 811, 1202, 1319], "47033": [623, 811, 1202, 1319], "38180177416060584": [623, 811, 1202, 1319], "47033046033698594": [623, 811, 1202, 1319], "rolling_std_bi": [624, 811], "433013": [624, 811, 889, 924], "rolling_row_std": [624, 625, 811], "rolling_sum_bi": [626, 811], "rolling_row_sum": [626, 627, 811], "39": [626, 627, 763, 811], "57": [626, 627, 811, 1206, 1319, 1328], "63": [626, 627, 811], "69": [626, 627, 811, 1115, 1319], "rolling_var_bi": [628, 811], "1875": [628, 811, 897, 924], "rolling_row_var": [628, 629, 811], "figur": [631, 811, 885, 924, 1207, 1319], "01234": [631, 811, 1207, 1319], "012": [631, 811, 1207, 1319], "1200": [631, 811, 1207, 1319], "searchsortedsid": [633, 811, 1210, 1319], "leftmost": [633, 811, 1210, 1319], "rightmost": [633, 811, 1210, 1319], "six": [633, 811], "extrema": [637, 811, 1218, 1319], "112": [637, 811, 1328], "129": [637, 811], "8589934592": [637, 811], "1073741824": [637, 811], "175201": [641, 811, 1223, 1319], "unimod": [642, 811, 1224, 1319], "skewtest": [642, 811, 1224, 1319], "speak": [642, 811, 1224, 1319], "g_1": [642, 811, 1224, 1319], "m_3": [642, 811, 1224, 1319], "m_2": [642, 811, 1224, 1319], "m_i": [642, 811, 1224, 1319], "sum_": [642, 811, 1224, 1319], "texttt": [642, 811, 1224, 1319], "k_3": [642, 811, 1224, 1319], "k_2": [642, 811, 1224, 1319], "343622": [642, 811], "value1": [645, 811], "value2": [645, 811], "attain": [645, 811], "414214": [646, 811, 1227, 1319], "sensit": [649, 658, 660, 674, 675, 1230, 1239, 1241, 1255, 1256], "ilmsuxu": [649, 657, 658, 660, 674, 675, 1230, 1238, 1239, 1241, 1255, 1256], "default_match": [649, 660], "insensitive_match": [649, 660], "crab": [649, 660, 1230, 1241], "dog": [649, 697, 700, 738, 1230, 1278, 1281], "rab": [649, 677, 1230, 1258], "ascii_case_insensit": [650, 676, 1231, 1257], "aho": [650, 676, 1231, 1257], "corasick": [650, 676, 1231, 1257], "insensit": [650, 658, 674, 675, 676, 929, 1230, 1231, 1239, 1241, 1255, 1256, 1257], "set_fmt_str_length": [650, 676, 1231, 1257], "lyric": [650, 676, 1231, 1257], "everybodi": [650, 676, 1231, 1257], "tell": [650, 676, 1231, 1257], "me": [650, 676, 1231, 1257], "feel": [650, 676, 1231, 1257], "love": [650, 676, 1231, 1257], "tonight": [650, 676, 1231, 1257], "success": [651, 652, 658, 1232, 1233, 1239], "overlap": [651, 652, 658, 1232, 1233, 1239], "bla": [652, 658, 1233, 1239], "asd": [652, 658, 1233, 1239], "678": [652, 658, 1233, 1239], "910t": [652, 658, 1233, 1239], "count_digit": 652, "dbc": [652, 1233], "3xy": [652, 1233], "1zy3": [652, 1233], "strings_hex": 654, "666f6f": [654, 1235], "626172": [654, 1235], "mango": [655, 684, 1236, 1265], "has_suffix": 655, "le": [655, 811, 1319], "nu": 655, "group_index": [657, 1238], "captur": [657, 659, 674, 675, 1238, 1240, 1255, 1256], "nthose": [657, 1238], "nodd": [657, 1238], "nthe": [657, 1238], "odd": 657, "vote": [657, 659, 1238, 1240], "ballon_dor": [657, 659, 1238, 1240], "404": [657, 659, 1238, 1240], "ref": [657, 659, 1238, 1240], "candid": [657, 659, 1238, 1240], "messi": [657, 659, 1238, 1240], "ronaldo": [657, 1238], "haystack": [658, 1239], "email": [658, 1239], "real": [658, 1239], "some_account": [658, 1239], "somewher": [658, 1239], "net": [658, 1239], "jkl": [658, 1239], "uvw": [658, 1239], "co": [658, 811, 1239, 1319], "uk": [658, 1239], "address": 658, "xi": [658, 1239], "quantifi": [658, 1239], "email_part": [658, 1239], "extracted_nr": 658, "unnam": [659, 1240], "weghorst": [659, 1240], "err": 659, "lobster": [660, 1241], "crustaceon": [660, 1241], "pat": [660, 1241], "bc": [660, 675, 794, 1241], "aeiuo": [660, 1241], "find_pat": 660, "fewer": [661, 692, 843, 924, 1242, 1273], "pear": [661, 680, 692, 1242, 1261, 1273], "papaya": [661, 680, 692, 1242, 1261, 1273], "dragonfruit": [661, 680, 692, 1242, 1261, 1273], "s_head_5": 661, "papai": [661, 1242], "drago": [661, 1242], "s_head_n": 661, "pea": 661, "papa": 661, "dragon": 661, "json_path_match": [662, 1243], "jsonpath": [662, 664, 1243, 1245], "json_decod": [663, 1244], "json_path": [664, 1245], "json_val": [664, 1245], "len_char": [665, 670, 1246, 1251], "_o": [665, 666, 1246, 1247], "caf\u00e9": [665, 666, 1246, 1247], "345": [665, 666, 1246, 1247], "\u6771\u4eac": [665, 666, 1246, 1247], "n_byte": [665, 666], "n_char": [665, 666], "fill_char": [668, 671, 672, 678, 1249, 1252, 1253, 1259], "justifi": [668, 678, 1249, 1259], "pad_end": [668, 672, 1249, 1253], "strip_chars_start": [669, 687, 689, 1250], "pad": [671, 672, 701, 1252, 1253, 1282], "reach": [671, 672, 701, 1252, 1253, 1282], "pad_start": [671, 678, 701, 1252, 1259, 1282], "cow": [671, 672, 1252, 1253], "monkei": [671, 672, 1252, 1253], "hippopotamu": [671, 672, 1252, 1253], "zfill": [672, 723, 811, 1253], "radix": [673, 696, 1254, 1277], "parseerror": [673, 696, 1254, 1277], "to_integ": [673, 1254], "silent": [673, 696, 1254, 1277], "replace_al": [674, 1255], "dollar": [674, 675, 1255, 1256], "123abc": [674, 1255, 1256], "abc456": [674, 1255, 1256], "hat": [674, 675, 1255, 1256], "hut": [674, 675, 1255, 1256], "vowel": [674, 675, 1255, 1256], "bad": [674, 675, 1255, 1256], "bud": [674, 675, 1255, 1256], "citi": [674, 675], "philadelphia": [674, 675], "season": [674, 675], "spring": [674, 675], "summer": [674, 675], "autumn": [674, 675], "winter": [674, 675], "weather": [674, 675, 1255, 1256], "raini": [674, 675, 1255, 1256], "sunni": [674, 675, 1255, 1256], "cloudi": [674, 675], "snowi": [674, 675], "foggi": [674, 675, 1255, 1256], "abcabc": 675, "123a123": 675, "replace_with": [676, 1257], "broadcast": [676, 929, 1257], "removes_pronoun": 676, "man": [677, 1258], "ana": [677, 1258], "oof": [677, 1258], "anan": [677, 1258], "am": [677, 1258], "strip_chars_end": [679, 688, 690, 1260], "ear": [680, 692, 1261], "aya": [680, 1261, 1273], "uit": [680, 1261], "ya": [680, 1261], "onf": [680, 1261], "foo_bar_baz": 681, "split_inclus": 681, "foo_": [681, 762], "bar_": 681, "a_1": [682, 1263, 1296, 1319], "d_4": [682, 1263], "rename_field": [682, 683, 1004, 1184, 1263, 1264, 1319], "first_part": [682, 683, 1263, 1264], "second_part": [682, 683, 1263, 1264], "remaind": [683, 1264], "app": [684, 1265], "has_prefix": 684, "strip_char": [685, 1266], "nworld": 686, "foo_strip": 686, "ow": 686, "hell": [686, 1267], "rld": [686, 688, 1269], "strip_suffix": [687, 689], "foo_strip_end": 687, "oldw": 687, "he": 687, "abcdeff": 687, "fed": 687, "strip_prefix": [688, 690], "tworld": [688, 1267, 1269], "foo_strip_start": 688, "wod": [688, 1269], "aabcdef": 688, "cba": 688, "foobar": [689, 690, 1270, 1271], "foofoobar": [689, 1270], "foobarbar": [690, 1271], "polarstemporaltyp": [691, 1272], "penalti": [691, 693, 694, 1272, 1274, 1275], "clean": [691, 693, 694, 1272, 1274, 1275], "beforehand": [691, 693, 694, 1272, 1274, 1275], "certainli": [691, 693, 694, 1272, 1274, 1275], "00z": [691, 694, 1272, 1275], "sun": [691, 1272], "jul": [691, 1272], "s_tail_5": 692, "apaya": [692, 1273], "s_tail_n": 692, "paya": 692, "nfruit": 692, "inference_length": [695, 1276], "3420": [695, 1276], "120134": [695, 1276], "3212": [695, 1276], "143": [695, 1276, 1328], "numbers_decim": 695, "110": [696, 1277], "fa1e": [696, 1277], "ff00": [696, 1277], "cafe": [696, 1277], "64030": [696, 1277], "65280": [696, 1277], "51966": [696, 1277], "variant": [697, 699, 700, 1102, 1319], "foo_low": 697, "titlecas": [699, 1280], "sing": [699, 1280], "welcom": [699, 1280], "THERE": [699, 1280], "NO": [699, 929, 1280], "foo_titl": 699, "There": [699, 1280], "foo_upp": 700, "999999": [701, 754, 797, 798, 799, 929, 1282], "0123": [701, 1282], "cd": [702, 704], "struct_col": [702, 704], "www": 704, "xxx": 704, "yyi": 704, "zzz": 704, "obvious": 704, "structfieldnotfounderror": 704, "761594": [712, 811, 1294, 1319], "replic": [713, 811, 1302, 1319], "vals_phys": [713, 811], "_top_by_a": [715, 811], "_top_by_b": [715, 811], "a_top_by_a": [715, 811], "b_top_by_a": [715, 811], "c_top_by_a": [715, 811], "a_top_by_b": [715, 811], "b_top_by_b": [715, 811], "c_top_by_b": [715, 811], "floordiv": [716, 811], "ieee": [716, 811], "754": [716, 811], "mathemat": [716, 758, 811], "undefin": [716, 811], "On": [716, 811], "operand": [716, 811], "infin": [716, 811], "value_count": [718, 811, 1319], "9223372036854775807": [719, 811], "binary_str": [723, 811], "250": [723, 811, 1198, 1319, 1328], "bin_x": [723, 811], "bin_i": [723, 811], "xor_xi": [723, 811], "bin_xor_xi": [723, 811], "00001010": [723, 811], "00001011": [723, 811], "00001000": [723, 811], "00000010": [723, 811], "11111010": [723, 811], "00000011": [723, 811], "249": [723, 811], "11111001": [723, 811], "01000010": [723, 811], "00000100": [723, 811], "01000110": [723, 811], "OR": [726, 727, 846, 924, 929], "any_horizont": 726, "returns_scalar": [728, 774, 811, 928], "polarsintegertyp": [730, 767, 768], "arctan": [731, 732, 811, 1319], "angl": [731, 732], "plane": [731, 732], "rai": [731, 732], "tworoottwo": [731, 732], "arctan2d": 731, "atan2d": [731, 732], "atan2": [731, 732], "135": [731, 732], "356194": [731, 732], "arctan2": 732, "arg_tru": [734, 811, 1319], "oppos": 735, "mimic": 737, "a_lag_": 737, "a_rol": 737, "swim": 738, "walk": 738, "full_sent": 738, "correlationmethod": 739, "propagate_nan": 739, "spearman": 739, "544705": 739, "covari": [741, 789, 811, 928], "acc": [743, 744, 747, 748, 761, 786], "include_init": [743, 747], "accumul": [743, 744, 747, 748, 761, 786], "fn": [743, 744, 747, 748, 761, 786], "new_valu": [743, 744, 747, 748, 761, 786], "cum_reduc": [743, 748], "cumsum_horizont": 745, "cum_fold": 747, "cum_sum_horizont": 750, "granular": 752, "finer": 752, "permut": 752, "1985": [752, 755], "australia": 754, "sydnei": 754, "aedt": 754, "america": 755, "new_york": 755, "est": 755, "contrast": 757, "sometim": [757, 810], "tbl_width_char": 757, "120": 757, "add_week": 757, "add_dai": 757, "add_second": 757, "add_milli": 757, "add_hour": 757, "002": [757, 1055, 1056, 1058], "add_calendar_dai": 757, "add_calendar_month": 757, "mo": 757, "add_calendar_year": 757, "a_b_doubl": 758, "presenc": [760, 769, 783, 1085, 1319], "f_string": 762, "placehold": 762, "hello_": 762, "_world": 762, "_bar_": 762, "foo_a_bar_1": 762, "foo_b_bar_2": 762, "foo_c_bar_3": 762, "timestep": 763, "1666683077": 763, "1666683099": 763, "12345": [763, 985, 1081, 1206, 1319], "12346": 763, "agg_group": [764, 811], "allow_object": 771, "valueexcept": 771, "test_func": 773, "list_of_seri": 774, "my_custom_aggreg": 774, "understood": 774, "power": [791, 1319], "a_a": 791, "a_txt": 791, "605551": 792, "605551275463989": 792, "my_struct": 793, "elif": 801, "met": 801, "own": [801, 1300, 1319, 1328], "isn": 801, "arr": [803, 1300, 1311, 1319], "technic": 807, "further": 807, "columnfactori": 807, "more_nam": 807, "__call__": 807, "helper": 807, "__getattr__": 807, "idiomat": [807, 912], "quick": [807, 1005, 1319, 1328], "prototyp": 807, "keystrok": 807, "drawback": 807, "readabl": 807, "and_": 811, "arcco": [811, 1319], "arccosh": [811, 1319], "arcsin": [811, 1319], "arcsinh": [811, 1319], "arctanh": [811, 1319], "arg_max": [811, 1319], "arg_min": [811, 1319], "arg_sort": [811, 1319], "arg_uniqu": [811, 1319], "cbrt": [811, 1319], "clip_max": [811, 1319], "clip_min": [811, 1319], "cosh": [811, 1319], "cot": [811, 1319], "cumcount": 811, "cummax": [811, 1319], "cummin": [811, 1319], "cumprod": [811, 1319], "cumsum": [811, 1319], "cumulative_ev": [811, 1319], "entropi": [811, 1319], "eq_miss": [811, 1319], "ewm_mean": [811, 1319], "ewm_mean_bi": [811, 1319], "ewm_std": [811, 1319], "ewm_var": [811, 1319], "extend_const": [811, 1319], "flatten": 811, "from_json": 811, "ge": [811, 1319], "gt": [811, 1319], "hist": [811, 1319, 1323], "implod": [811, 1319], "inspect": [811, 924], "is_between": [811, 1319], "is_finit": [811, 1319], "is_first": [811, 1319], "is_infinit": [811, 1319], "is_last": [811, 1319], "is_nan": [811, 1319], "is_not": 811, "is_not_nan": [811, 1319], "is_not_nul": [811, 1319], "kurtosi": [811, 1319], "log10": [811, 1319], "log1p": [811, 1319], "map_alia": 811, "map_dict": [811, 1319], "mod": 811, "mul": 811, "nan_max": [811, 1319], "nan_min": [811, 1319], "ne_miss": [811, 1319], "or_": 811, "pct_chang": [811, 1319], "peak_max": [811, 1319], "peak_min": [811, 1319], "pow": [811, 1319], "register_plugin": 811, "lib": [811, 1295, 1319], "input_wildcard_expans": [811, 928], "cast_to_supertyp": [811, 928], "pass_name_to_appli": [811, 928], "changes_length": [811, 928], "register_plugin_funct": [811, 928], "guid": [811, 928, 1328], "serializ": [811, 928], "ran": [811, 928], "highli": [811, 928], "unsaf": [811, 928], "reinterpret": [811, 1319], "repeat_bi": 811, "rolling_appli": [811, 1319], "rolling_max": [811, 1319], "rolling_mean": [811, 1319], "rolling_mean_bi": 811, "rolling_median": [811, 1319], "rolling_min": [811, 1319], "rolling_quantil": [811, 1319], "rolling_skew": [811, 1319], "rolling_std": [811, 1319], "rolling_var": [811, 1319], "round_sig_fig": [811, 1319], "search_sort": [811, 1319], "shrink_dtyp": [811, 1319], "sin": [811, 1319], "sinh": [811, 1319], "tan": [811, 1319], "to_phys": [811, 982, 1319], "unique_count": [811, 1319], "xor": 811, "expos": 823, "miscellan": 823, "parametr": 823, "hit": [828, 924], "node": [828, 832, 856, 863, 864, 868, 873, 875, 924], "job": [828, 924], "background": [832, 924], "_eager": [832, 924], "_kwarg": [832, 924], "inprocessqueri": [832, 924], "cancel": [832, 924], "set_streaming_chunk_s": [832, 924], "collect_all_async": [833, 924], "snippet": [839, 924], "tree_format": [841, 924], "Be": [843, 924], "suscept": [843, 924], "lazygroupbi": [849, 850, 851, 852, 853, 854, 877, 924], "other_lf": [858, 924], "jan": [859, 924], "1st": [859, 924], "12th": [859, 924], "validate_output_schema": [863, 864, 924], "streamabl": [863, 864, 868, 924], "paramount": [863, 864, 924], "elig": [863, 864, 924], "invari": [864, 924], "upheld": [864, 924], "100_000": [864, 924], "199998": [864, 924], "199996": [864, 924], "199994": [864, 924], "199992": [864, 924], "show_plot": [873, 924], "truncate_nod": [873, 924], "figsiz": [873, 885, 924], "gantt": [873, 924], "group_by_partit": [873, 924], "470": [873, 924], "475": [873, 924], "1964": [873, 924], "swap": [875, 924], "mapfunct": [881, 924], "dataframescan": [881, 924], "output_schema": [881, 924], "output_path": [885, 924], "raw_output": [885, 924], "render": [885, 924], "download": [885, 924], "freeli": [888, 924], "c_c_c": [888, 924], "290994": [889, 924], "118034": [889, 924], "new_lf": [896, 924], "extern": [901, 924], "lf_other": [901, 924], "afoo": [901, 924], "cfoo": [901, 924], "train_lf": [901, 924], "feature_0": [901, 924], "feature_1": [901, 924], "test_lf": [901, 924], "_train": [901, 924], "feature_0_train": [901, 924], "opaqu": 912, "my_column": 912, "struct_seri": 912, "lf5": 924, "lf6": 924, "sink_csv": 924, "sink_ipc": 924, "sink_ndjson": 924, "sink_parquet": 924, "with_context": 924, "resourc": 928, "plugin_path": 928, "function_nam": 928, "emploi": 929, "complement": 929, "plenti": 929, "cde": 929, "fgg": 929, "jjk": 929, "lmn": 929, "opp": 929, "qqr": 929, "by_dtyp": 929, "as_expr": 929, "dispatch": 929, "1_234_500": 929, "5_000_555": 929, "1234500": 929, "5000555": 929, "by_nam": 929, "by_index": 929, "4_500_000": 929, "4500000": 929, "3265500": 929, "zap": 929, "2031": 929, "tstamp_tokyo": 929, "123465": 929, "tstamp_utc": 929, "999000": 929, "666000": 929, "tstamp": 929, "600000": 929, "123000": 929, "666": 929, "td1": 929, "987000": 929, "td2": 929, "456789": [929, 1047], "td3": 929, "2m": [929, 1035], "456m": 929, "7d": 929, "456789\u00b5": 929, "18d": 929, "999999\u00b5": 929, "23h": 929, "987m": 929, "14d": 929, "16h": 929, "39m": 929, "21d": 929, "456001\u00b5": 929, "expand_selector": 929, "colz": [929, 1328], "everyth": 929, "signed_integ": 929, "unsigned_integ": 929, "is_selector": 929, "obj": 929, "include_categor": 929, "2345": 929, "3456": 929, "292432": [938, 1319], "549306": [942, 1319], "innter": 956, "field_2": [969, 1158], "n00": [969, 1158], "n01": [969, 1158], "n02": [969, 1158], "hexadecim": [973, 974], "aaaa": [973, 974], "8a": [973, 974], "aad": [973, 974], "invalid_valu": 973, "44225": [984, 1319], "56789": [985, 1081, 1206, 1319], "901234": [985, 1081, 1206, 1319], "1232e": [992, 994, 1319], "1656e15": [994, 1319], "break_point_label": [1004, 1184, 1319], "break_point": [1004, 1088, 1184, 1319], "category_label": [1004, 1184, 1319], "581139": [1005, 1319], "bb": [1005, 1319], "arraylik": [1007, 1319], "ser": [1016, 1017, 1050], "kathmandu": [1016, 1017, 1050], "0545": [1016, 1017, 1050], "500m": [1029, 1032, 1040], "date_minus_1y_2mon": 1042, "165": [1046, 1060], "round_str": 1046, "round_td": 1046, "111110": 1047, "765431": 1047, "11111": 1047, "timestamp_n": 1051, "978307200000000000": 1051, "978393600000000000": 1051, "978480000000000000": 1051, "005": [1066, 1319], "06293300616044681": [1066, 1319], "65": [1066, 1319], "8568409950394724": [1066, 1319], "4000000": [1068, 1319], "814697265625": [1068, 1319], "085537": [1073, 1319], "sorted_asc": [1080, 1319], "sorted_desc": [1080, 1319], "bitmask": [1085, 1319], "absenc": [1085, 1319], "confirm": [1085, 1319], "10734580197236529959": [1086, 1319], "3022416320763508302": [1086, 1319], "13756996518000038261": [1086, 1319], "is_signed_integ": [1102, 1319], "is_unsigned_integ": [1102, 1319], "grade": [1115, 1319], "79": [1115, 1319], "93": [1115, 1319], "0522623626787952": [1115, 1319], "9477376373212048": [1115, 1319], "1040361802642726": [1115, 1319], "2147483648": [1164, 1319], "pythonliter": [1167, 1168, 1169, 1170, 1209, 1319], "166667": [1180, 1319], "142857": [1180, 1319], "1152921504606846976": [1188, 1319], "17293822569102704640": [1188, 1319], "18446744073709551614": [1188, 1319], "150": [1198, 1319], "450": [1198, 1319], "dev": [1203, 1319], "527525": [1203, 1319], "frequent": [1209, 1212, 1319], "2246e": [1222, 1293, 1319], "34776706224699483": [1224, 1319], "732051": [1227, 1319], "idx_rx": 1241, "idx_lit": 1241, "3rd": [1242, 1273], "pap": 1242, "dragonfr": 1242, "orld": 1268, "gonfruit": 1273, "6331e16": [1293, 1319], "int64arrai": [1295, 1319], "a_2": [1296, 1319], "a_3": [1296, 1319], "s_from_str_repr": [1298, 1319], "zero_copy_onli": [1300, 1319], "127": [1306, 1319], "seriesview": [1309, 1319], "dtype_if_empti": 1319, "position": 1319, "scenario": 1319, "chunk_length": 1319, "get_chunk": 1319, "has_valid": 1319, "is_boolean": 1319, "is_float": 1319, "is_integ": 1319, "is_numer": [1319, 1328], "is_sort": 1319, "is_tempor": 1319, "is_utf8": 1319, "new_from_index": 1319, "histogram": [1319, 1323], "kde": [1319, 1323], "series_equ": 1319, "set_at_idx": 1319, "two_a": 1327, "__enter__": 1327, "__exit__": 1327, "exc_typ": 1327, "baseexcept": 1327, "exc_val": 1327, "exc_tb": 1327, "tracebacktyp": 1327, "machin": 1328, "xdist": 1328, "hardwar": 1328, "setup": 1328, "sec": 1328, "numeric_dtyp": 1328, "test_numer": 1328, "col4": 1328, "29096": 1328, "485": 1328, "2147483647": 1328, "8257e14": 1328, "7508": 1328, "37338": 1328, "7264": 1328, "16996": 1328, "121": 1328, "361": 1328, "63204": 1328, "1443e235": 1328, "conform": 1328, "st": 1328, "ascii_lett": 1328, "id_char": 1328, "alphabet": 1328, "ccy": 1328, "sampled_from": 1328, "gbp": 1328, "jpy": 1328, "price": 1328, "min_valu": 1328, "max_valu": 1328, "test_price_calcul": 1328, "a101": 1328, "8nin": 1328, "qhoo": 1328, "714": 1328, "544": 1328, "i0e0": 1328, "uint8_pair": 1328, "drawfn": 1328, "uint": 1328, "zip": 1328, "test_miscellan": 1328, "235": 1328, "87": 1328, "186": 1328, "174": 1328, "179": 1328, "213": 1328, "149": 1328, "221": 1328, "86": 1328, "255": 1328}, "objects": {"polars.Config": [[2, 0, 1, "", "activate_decimals"], [3, 0, 1, "", "load"], [4, 0, 1, "", "load_from_file"], [5, 0, 1, "", "restore_defaults"], [6, 0, 1, "", "save"], [7, 0, 1, "", "save_to_file"], [8, 0, 1, "", "set_ascii_tables"], [9, 0, 1, "", "set_auto_structify"], [10, 0, 1, "", "set_decimal_separator"], [11, 0, 1, "", "set_float_precision"], [12, 0, 1, "", "set_fmt_float"], [13, 0, 1, "", "set_fmt_str_lengths"], [14, 0, 1, "", "set_fmt_table_cell_list_len"], [15, 0, 1, "", "set_streaming_chunk_size"], [16, 0, 1, "", "set_tbl_cell_alignment"], [17, 0, 1, "", "set_tbl_cell_numeric_alignment"], [18, 0, 1, "", "set_tbl_cols"], [19, 0, 1, "", "set_tbl_column_data_type_inline"], [20, 0, 1, "", "set_tbl_dataframe_shape_below"], [21, 0, 1, "", "set_tbl_formatting"], [22, 0, 1, "", "set_tbl_hide_column_data_types"], [23, 0, 1, "", "set_tbl_hide_column_names"], [24, 0, 1, "", "set_tbl_hide_dataframe_shape"], [25, 0, 1, "", "set_tbl_hide_dtype_separator"], [26, 0, 1, "", "set_tbl_rows"], [27, 0, 1, "", "set_tbl_width_chars"], [28, 0, 1, "", "set_thousands_separator"], [29, 0, 1, "", "set_trim_decimal_zeros"], [30, 0, 1, "", "set_verbose"], [31, 0, 1, "", "state"]], "polars.DataFrame": [[161, 0, 1, "", "__dataframe__"], [162, 0, 1, "", "apply"], [163, 0, 1, "", "approx_n_unique"], [164, 0, 1, "", "bottom_k"], [165, 0, 1, "", "cast"], [166, 0, 1, "", "clear"], [167, 0, 1, "", "clone"], [168, 1, 1, "", "columns"], [169, 0, 1, "", "corr"], [170, 0, 1, "", "count"], [171, 0, 1, "", "describe"], [172, 0, 1, "", "drop"], [173, 0, 1, "", "drop_in_place"], [174, 0, 1, "", "drop_nulls"], [175, 1, 1, "", "dtypes"], [176, 0, 1, "", "equals"], [177, 0, 1, "", "estimated_size"], [178, 0, 1, "", "explode"], [179, 0, 1, "", "extend"], [180, 0, 1, "", "fill_nan"], [181, 0, 1, "", "fill_null"], [182, 0, 1, "", "filter"], [183, 0, 1, "", "find_idx_by_name"], [184, 1, 1, "", "flags"], [185, 0, 1, "", "fold"], [186, 0, 1, "", "frame_equal"], [187, 0, 1, "", "gather_every"], [188, 0, 1, "", "get_column"], [189, 0, 1, "", "get_column_index"], [190, 0, 1, "", "get_columns"], [191, 0, 1, "", "glimpse"], [192, 0, 1, "", "group_by"], [193, 0, 1, "", "group_by_dynamic"], [194, 0, 1, "", "group_by_rolling"], [195, 0, 1, "", "groupby"], [196, 0, 1, "", "groupby_dynamic"], [197, 0, 1, "", "groupby_rolling"], [198, 0, 1, "", "hash_rows"], [199, 0, 1, "", "head"], [200, 1, 1, "", "height"], [201, 0, 1, "", "hstack"], [202, 0, 1, "", "insert_at_idx"], [203, 0, 1, "", "insert_column"], [204, 0, 1, "", "interpolate"], [205, 0, 1, "", "is_duplicated"], [206, 0, 1, "", "is_empty"], [207, 0, 1, "", "is_unique"], [208, 0, 1, "", "item"], [209, 0, 1, "", "iter_columns"], [210, 0, 1, "", "iter_rows"], [211, 0, 1, "", "iter_slices"], [212, 0, 1, "", "join"], [213, 0, 1, "", "join_asof"], [214, 0, 1, "", "lazy"], [215, 0, 1, "", "limit"], [216, 0, 1, "", "map_rows"], [217, 0, 1, "", "max"], [218, 0, 1, "", "max_horizontal"], [219, 0, 1, "", "mean"], [220, 0, 1, "", "mean_horizontal"], [221, 0, 1, "", "median"], [222, 0, 1, "", "melt"], [223, 0, 1, "", "merge_sorted"], [224, 0, 1, "", "min"], [225, 0, 1, "", "min_horizontal"], [226, 0, 1, "", "n_chunks"], [227, 0, 1, "", "n_unique"], [228, 0, 1, "", "null_count"], [229, 0, 1, "", "partition_by"], [230, 0, 1, "", "pipe"], [231, 0, 1, "", "pivot"], [232, 0, 1, "", "product"], [233, 0, 1, "", "quantile"], [234, 0, 1, "", "rechunk"], [235, 0, 1, "", "rename"], [236, 0, 1, "", "replace"], [237, 0, 1, "", "replace_at_idx"], [238, 0, 1, "", "replace_column"], [239, 0, 1, "", "reverse"], [240, 0, 1, "", "rolling"], [241, 0, 1, "", "row"], [242, 0, 1, "", "rows"], [243, 0, 1, "", "rows_by_key"], [244, 0, 1, "", "sample"], [245, 1, 1, "", "schema"], [246, 0, 1, "", "select"], [247, 0, 1, "", "select_seq"], [248, 0, 1, "", "set_sorted"], [249, 1, 1, "", "shape"], [250, 0, 1, "", "shift"], [251, 0, 1, "", "shift_and_fill"], [252, 0, 1, "", "shrink_to_fit"], [253, 0, 1, "", "slice"], [254, 0, 1, "", "sort"], [255, 0, 1, "", "sql"], [256, 0, 1, "", "std"], [257, 0, 1, "", "sum"], [258, 0, 1, "", "sum_horizontal"], [259, 0, 1, "", "tail"], [260, 0, 1, "", "take_every"], [261, 0, 1, "", "to_arrow"], [262, 0, 1, "", "to_dict"], [263, 0, 1, "", "to_dicts"], [264, 0, 1, "", "to_dummies"], [265, 0, 1, "", "to_init_repr"], [266, 0, 1, "", "to_numpy"], [267, 0, 1, "", "to_pandas"], [268, 0, 1, "", "to_series"], [269, 0, 1, "", "to_struct"], [270, 0, 1, "", "to_torch"], [271, 0, 1, "", "top_k"], [272, 0, 1, "", "transpose"], [273, 0, 1, "", "unique"], [274, 0, 1, "", "unnest"], [275, 0, 1, "", "unstack"], [276, 0, 1, "", "update"], [277, 0, 1, "", "upsample"], [278, 0, 1, "", "var"], [279, 0, 1, "", "vstack"], [280, 1, 1, "", "width"], [281, 0, 1, "", "with_columns"], [282, 0, 1, "", "with_columns_seq"], [283, 0, 1, "", "with_row_count"], [284, 0, 1, "", "with_row_index"], [32, 0, 1, "", "write_avro"], [33, 0, 1, "", "write_clipboard"], [34, 0, 1, "", "write_csv"], [35, 0, 1, "", "write_database"], [36, 0, 1, "", "write_delta"], [37, 0, 1, "", "write_excel"], [38, 0, 1, "", "write_ipc"], [39, 0, 1, "", "write_ipc_stream"], [40, 0, 1, "", "write_json"], [41, 0, 1, "", "write_ndjson"], [42, 0, 1, "", "write_parquet"]], "polars.Expr": [[315, 0, 1, "", "abs"], [316, 0, 1, "", "add"], [317, 0, 1, "", "agg_groups"], [318, 0, 1, "", "alias"], [319, 0, 1, "", "all"], [320, 0, 1, "", "and_"], [321, 0, 1, "", "any"], [322, 0, 1, "", "append"], [323, 0, 1, "", "apply"], [324, 0, 1, "", "approx_n_unique"], [325, 0, 1, "", "arccos"], [326, 0, 1, "", "arccosh"], [327, 0, 1, "", "arcsin"], [328, 0, 1, "", "arcsinh"], [329, 0, 1, "", "arctan"], [330, 0, 1, "", "arctanh"], [331, 0, 1, "", "arg_max"], [332, 0, 1, "", "arg_min"], [333, 0, 1, "", "arg_sort"], [334, 0, 1, "", "arg_true"], [335, 0, 1, "", "arg_unique"], [360, 0, 1, "", "backward_fill"], [366, 0, 1, "", "bottom_k"], [367, 0, 1, "", "bottom_k_by"], [368, 0, 1, "", "cast"], [371, 0, 1, "", "cbrt"], [372, 0, 1, "", "ceil"], [373, 0, 1, "", "clip"], [374, 0, 1, "", "clip_max"], [375, 0, 1, "", "clip_min"], [376, 0, 1, "", "cos"], [377, 0, 1, "", "cosh"], [378, 0, 1, "", "cot"], [379, 0, 1, "", "count"], [380, 0, 1, "", "cum_count"], [381, 0, 1, "", "cum_max"], [382, 0, 1, "", "cum_min"], [383, 0, 1, "", "cum_prod"], [384, 0, 1, "", "cum_sum"], [385, 0, 1, "", "cumcount"], [386, 0, 1, "", "cummax"], [387, 0, 1, "", "cummin"], [388, 0, 1, "", "cumprod"], [389, 0, 1, "", "cumsum"], [390, 0, 1, "", "cumulative_eval"], [391, 0, 1, "", "cut"], [392, 0, 1, "", "degrees"], [393, 0, 1, "", "deserialize"], [394, 0, 1, "", "diff"], [395, 0, 1, "", "dot"], [396, 0, 1, "", "drop_nans"], [397, 0, 1, "", "drop_nulls"], [449, 0, 1, "", "entropy"], [450, 0, 1, "", "eq"], [451, 0, 1, "", "eq_missing"], [452, 0, 1, "", "ewm_mean"], [453, 0, 1, "", "ewm_mean_by"], [454, 0, 1, "", "ewm_std"], [455, 0, 1, "", "ewm_var"], [456, 0, 1, "", "exclude"], [457, 0, 1, "", "exp"], [458, 0, 1, "", "explode"], [459, 0, 1, "", "extend_constant"], [460, 0, 1, "", "fill_nan"], [461, 0, 1, "", "fill_null"], [462, 0, 1, "", "filter"], [463, 0, 1, "", "first"], [464, 0, 1, "", "flatten"], [465, 0, 1, "", "floor"], [466, 0, 1, "", "floordiv"], [467, 0, 1, "", "forward_fill"], [468, 0, 1, "", "from_json"], [469, 0, 1, "", "gather"], [470, 0, 1, "", "gather_every"], [471, 0, 1, "", "ge"], [472, 0, 1, "", "get"], [473, 0, 1, "", "gt"], [474, 0, 1, "", "hash"], [475, 0, 1, "", "head"], [476, 0, 1, "", "hist"], [477, 0, 1, "", "implode"], [478, 0, 1, "", "inspect"], [479, 0, 1, "", "interpolate"], [480, 0, 1, "", "is_between"], [481, 0, 1, "", "is_duplicated"], [482, 0, 1, "", "is_finite"], [483, 0, 1, "", "is_first"], [484, 0, 1, "", "is_first_distinct"], [485, 0, 1, "", "is_in"], [486, 0, 1, "", "is_infinite"], [487, 0, 1, "", "is_last"], [488, 0, 1, "", "is_last_distinct"], [489, 0, 1, "", "is_nan"], [490, 0, 1, "", "is_not"], [491, 0, 1, "", "is_not_nan"], [492, 0, 1, "", "is_not_null"], [493, 0, 1, "", "is_null"], [494, 0, 1, "", "is_unique"], [495, 0, 1, "", "keep_name"], [496, 0, 1, "", "kurtosis"], [497, 0, 1, "", "last"], [498, 0, 1, "", "le"], [499, 0, 1, "", "len"], [500, 0, 1, "", "limit"], [544, 0, 1, "", "log"], [545, 0, 1, "", "log10"], [546, 0, 1, "", "log1p"], [547, 0, 1, "", "lower_bound"], [548, 0, 1, "", "lt"], [549, 0, 1, "", "map"], [550, 0, 1, "", "map_alias"], [551, 0, 1, "", "map_batches"], [552, 0, 1, "", "map_dict"], [553, 0, 1, "", "map_elements"], [554, 0, 1, "", "max"], [555, 0, 1, "", "mean"], [556, 0, 1, "", "median"], [568, 0, 1, "", "min"], [569, 0, 1, "", "mod"], [570, 0, 1, "", "mode"], [571, 0, 1, "", "mul"], [572, 0, 1, "", "n_unique"], [582, 0, 1, "", "nan_max"], [583, 0, 1, "", "nan_min"], [584, 0, 1, "", "ne"], [585, 0, 1, "", "ne_missing"], [586, 0, 1, "", "neg"], [587, 0, 1, "", "not_"], [588, 0, 1, "", "null_count"], [589, 0, 1, "", "or_"], [590, 0, 1, "", "over"], [591, 0, 1, "", "pct_change"], [592, 0, 1, "", "peak_max"], [593, 0, 1, "", "peak_min"], [594, 0, 1, "", "pipe"], [595, 0, 1, "", "pow"], [596, 0, 1, "", "prefix"], [597, 0, 1, "", "product"], [598, 0, 1, "", "qcut"], [599, 0, 1, "", "quantile"], [600, 0, 1, "", "radians"], [601, 0, 1, "", "rank"], [602, 0, 1, "", "rechunk"], [603, 0, 1, "", "reinterpret"], [604, 0, 1, "", "repeat_by"], [605, 0, 1, "", "replace"], [606, 0, 1, "", "reshape"], [607, 0, 1, "", "reverse"], [608, 0, 1, "", "rle"], [609, 0, 1, "", "rle_id"], [610, 0, 1, "", "rolling"], [611, 0, 1, "", "rolling_apply"], [612, 0, 1, "", "rolling_map"], [613, 0, 1, "", "rolling_max"], [614, 0, 1, "", "rolling_max_by"], [615, 0, 1, "", "rolling_mean"], [616, 0, 1, "", "rolling_mean_by"], [617, 0, 1, "", "rolling_median"], [618, 0, 1, "", "rolling_median_by"], [619, 0, 1, "", "rolling_min"], [620, 0, 1, "", "rolling_min_by"], [621, 0, 1, "", "rolling_quantile"], [622, 0, 1, "", "rolling_quantile_by"], [623, 0, 1, "", "rolling_skew"], [624, 0, 1, "", "rolling_std"], [625, 0, 1, "", "rolling_std_by"], [626, 0, 1, "", "rolling_sum"], [627, 0, 1, "", "rolling_sum_by"], [628, 0, 1, "", "rolling_var"], [629, 0, 1, "", "rolling_var_by"], [630, 0, 1, "", "round"], [631, 0, 1, "", "round_sig_figs"], [632, 0, 1, "", "sample"], [633, 0, 1, "", "search_sorted"], [634, 0, 1, "", "set_sorted"], [635, 0, 1, "", "shift"], [636, 0, 1, "", "shift_and_fill"], [637, 0, 1, "", "shrink_dtype"], [638, 0, 1, "", "shuffle"], [639, 0, 1, "", "sign"], [640, 0, 1, "", "sin"], [641, 0, 1, "", "sinh"], [642, 0, 1, "", "skew"], [643, 0, 1, "", "slice"], [644, 0, 1, "", "sort"], [645, 0, 1, "", "sort_by"], [646, 0, 1, "", "sqrt"], [647, 0, 1, "", "std"], [705, 0, 1, "", "sub"], [706, 0, 1, "", "suffix"], [707, 0, 1, "", "sum"], [708, 0, 1, "", "tail"], [709, 0, 1, "", "take"], [710, 0, 1, "", "take_every"], [711, 0, 1, "", "tan"], [712, 0, 1, "", "tanh"], [713, 0, 1, "", "to_physical"], [714, 0, 1, "", "top_k"], [715, 0, 1, "", "top_k_by"], [716, 0, 1, "", "truediv"], [717, 0, 1, "", "unique"], [718, 0, 1, "", "unique_counts"], [719, 0, 1, "", "upper_bound"], [720, 0, 1, "", "value_counts"], [721, 0, 1, "", "var"], [722, 0, 1, "", "where"], [723, 0, 1, "", "xor"]], "polars.Expr.arr": [[336, 0, 1, "", "all"], [337, 0, 1, "", "any"], [338, 0, 1, "", "arg_max"], [339, 0, 1, "", "arg_min"], [340, 0, 1, "", "contains"], [341, 0, 1, "", "count_matches"], [342, 0, 1, "", "explode"], [343, 0, 1, "", "first"], [344, 0, 1, "", "get"], [345, 0, 1, "", "join"], [346, 0, 1, "", "last"], [347, 0, 1, "", "max"], [348, 0, 1, "", "median"], [349, 0, 1, "", "min"], [350, 0, 1, "", "n_unique"], [351, 0, 1, "", "reverse"], [352, 0, 1, "", "shift"], [353, 0, 1, "", "sort"], [354, 0, 1, "", "std"], [355, 0, 1, "", "sum"], [356, 0, 1, "", "to_list"], [357, 0, 1, "", "to_struct"], [358, 0, 1, "", "unique"], [359, 0, 1, "", "var"]], "polars.Expr.bin": [[361, 0, 1, "", "contains"], [362, 0, 1, "", "decode"], [363, 0, 1, "", "encode"], [364, 0, 1, "", "ends_with"], [365, 0, 1, "", "starts_with"]], "polars.Expr.cat": [[369, 0, 1, "", "get_categories"], [370, 0, 1, "", "set_ordering"]], "polars.Expr.dt": [[398, 0, 1, "", "add_business_days"], [399, 0, 1, "", "base_utc_offset"], [400, 0, 1, "", "cast_time_unit"], [401, 0, 1, "", "century"], [402, 0, 1, "", "combine"], [403, 0, 1, "", "convert_time_zone"], [404, 0, 1, "", "date"], [405, 0, 1, "", "datetime"], [406, 0, 1, "", "day"], [407, 0, 1, "", "days"], [408, 0, 1, "", "dst_offset"], [409, 0, 1, "", "epoch"], [410, 0, 1, "", "hour"], [411, 0, 1, "", "hours"], [412, 0, 1, "", "is_leap_year"], [413, 0, 1, "", "iso_year"], [414, 0, 1, "", "microsecond"], [415, 0, 1, "", "microseconds"], [416, 0, 1, "", "millennium"], [417, 0, 1, "", "millisecond"], [418, 0, 1, "", "milliseconds"], [419, 0, 1, "", "minute"], [420, 0, 1, "", "minutes"], [421, 0, 1, "", "month"], [422, 0, 1, "", "month_end"], [423, 0, 1, "", "month_start"], [424, 0, 1, "", "nanosecond"], [425, 0, 1, "", "nanoseconds"], [426, 0, 1, "", "offset_by"], [427, 0, 1, "", "ordinal_day"], [428, 0, 1, "", "quarter"], [429, 0, 1, "", "replace_time_zone"], [430, 0, 1, "", "round"], [431, 0, 1, "", "second"], [432, 0, 1, "", "seconds"], [433, 0, 1, "", "strftime"], [434, 0, 1, "", "time"], [435, 0, 1, "", "timestamp"], [436, 0, 1, "", "to_string"], [437, 0, 1, "", "total_days"], [438, 0, 1, "", "total_hours"], [439, 0, 1, "", "total_microseconds"], [440, 0, 1, "", "total_milliseconds"], [441, 0, 1, "", "total_minutes"], [442, 0, 1, "", "total_nanoseconds"], [443, 0, 1, "", "total_seconds"], [444, 0, 1, "", "truncate"], [445, 0, 1, "", "week"], [446, 0, 1, "", "weekday"], [447, 0, 1, "", "with_time_unit"], [448, 0, 1, "", "year"]], "polars.Expr.list": [[501, 0, 1, "", "all"], [502, 0, 1, "", "any"], [503, 0, 1, "", "arg_max"], [504, 0, 1, "", "arg_min"], [505, 0, 1, "", "concat"], [506, 0, 1, "", "contains"], [507, 0, 1, "", "count_match"], [508, 0, 1, "", "count_matches"], [509, 0, 1, "", "diff"], [510, 0, 1, "", "drop_nulls"], [511, 0, 1, "", "eval"], [512, 0, 1, "", "explode"], [513, 0, 1, "", "first"], [514, 0, 1, "", "gather"], [515, 0, 1, "", "gather_every"], [516, 0, 1, "", "get"], [517, 0, 1, "", "head"], [518, 0, 1, "", "join"], [519, 0, 1, "", "last"], [520, 0, 1, "", "len"], [521, 0, 1, "", "lengths"], [522, 0, 1, "", "max"], [523, 0, 1, "", "mean"], [524, 0, 1, "", "median"], [525, 0, 1, "", "min"], [526, 0, 1, "", "n_unique"], [527, 0, 1, "", "reverse"], [528, 0, 1, "", "sample"], [529, 0, 1, "", "set_difference"], [530, 0, 1, "", "set_intersection"], [531, 0, 1, "", "set_symmetric_difference"], [532, 0, 1, "", "set_union"], [533, 0, 1, "", "shift"], [534, 0, 1, "", "slice"], [535, 0, 1, "", "sort"], [536, 0, 1, "", "std"], [537, 0, 1, "", "sum"], [538, 0, 1, "", "tail"], [539, 0, 1, "", "take"], [540, 0, 1, "", "to_array"], [541, 0, 1, "", "to_struct"], [542, 0, 1, "", "unique"], [543, 0, 1, "", "var"]], "polars.Expr.meta": [[557, 0, 1, "", "eq"], [558, 0, 1, "", "has_multiple_outputs"], [559, 0, 1, "", "is_regex_projection"], [560, 0, 1, "", "ne"], [561, 0, 1, "", "output_name"], [562, 0, 1, "", "pop"], [563, 0, 1, "", "root_names"], [564, 0, 1, "", "serialize"], [565, 0, 1, "", "tree_format"], [566, 0, 1, "", "undo_aliases"], [567, 0, 1, "", "write_json"]], "polars.Expr.name": [[573, 0, 1, "", "keep"], [574, 0, 1, "", "map"], [575, 0, 1, "", "map_fields"], [576, 0, 1, "", "prefix"], [577, 0, 1, "", "prefix_fields"], [578, 0, 1, "", "suffix"], [579, 0, 1, "", "suffix_fields"], [580, 0, 1, "", "to_lowercase"], [581, 0, 1, "", "to_uppercase"]], "polars.Expr.str": [[648, 0, 1, "", "concat"], [649, 0, 1, "", "contains"], [650, 0, 1, "", "contains_any"], [651, 0, 1, "", "count_match"], [652, 0, 1, "", "count_matches"], [653, 0, 1, "", "decode"], [654, 0, 1, "", "encode"], [655, 0, 1, "", "ends_with"], [656, 0, 1, "", "explode"], [657, 0, 1, "", "extract"], [658, 0, 1, "", "extract_all"], [659, 0, 1, "", "extract_groups"], [660, 0, 1, "", "find"], [661, 0, 1, "", "head"], [662, 0, 1, "", "json_decode"], [663, 0, 1, "", "json_extract"], [664, 0, 1, "", "json_path_match"], [665, 0, 1, "", "len_bytes"], [666, 0, 1, "", "len_chars"], [667, 0, 1, "", "lengths"], [668, 0, 1, "", "ljust"], [669, 0, 1, "", "lstrip"], [670, 0, 1, "", "n_chars"], [671, 0, 1, "", "pad_end"], [672, 0, 1, "", "pad_start"], [673, 0, 1, "", "parse_int"], [674, 0, 1, "", "replace"], [675, 0, 1, "", "replace_all"], [676, 0, 1, "", "replace_many"], [677, 0, 1, "", "reverse"], [678, 0, 1, "", "rjust"], [679, 0, 1, "", "rstrip"], [680, 0, 1, "", "slice"], [681, 0, 1, "", "split"], [682, 0, 1, "", "split_exact"], [683, 0, 1, "", "splitn"], [684, 0, 1, "", "starts_with"], [685, 0, 1, "", "strip"], [686, 0, 1, "", "strip_chars"], [687, 0, 1, "", "strip_chars_end"], [688, 0, 1, "", "strip_chars_start"], [689, 0, 1, "", "strip_prefix"], [690, 0, 1, "", "strip_suffix"], [691, 0, 1, "", "strptime"], [692, 0, 1, "", "tail"], [693, 0, 1, "", "to_date"], [694, 0, 1, "", "to_datetime"], [695, 0, 1, "", "to_decimal"], [696, 0, 1, "", "to_integer"], [697, 0, 1, "", "to_lowercase"], [698, 0, 1, "", "to_time"], [699, 0, 1, "", "to_titlecase"], [700, 0, 1, "", "to_uppercase"], [701, 0, 1, "", "zfill"]], "polars.Expr.struct": [[702, 0, 1, "", "field"], [703, 0, 1, "", "json_encode"], [704, 0, 1, "", "rename_fields"]], "polars.LazyFrame": [[826, 0, 1, "", "approx_n_unique"], [827, 0, 1, "", "bottom_k"], [828, 0, 1, "", "cache"], [829, 0, 1, "", "cast"], [830, 0, 1, "", "clear"], [831, 0, 1, "", "clone"], [832, 0, 1, "", "collect"], [833, 0, 1, "", "collect_async"], [834, 1, 1, "", "columns"], [835, 0, 1, "", "count"], [836, 0, 1, "", "describe"], [837, 0, 1, "", "deserialize"], [838, 0, 1, "", "drop"], [839, 0, 1, "", "drop_nulls"], [840, 1, 1, "", "dtypes"], [841, 0, 1, "", "explain"], [842, 0, 1, "", "explode"], [843, 0, 1, "", "fetch"], [844, 0, 1, "", "fill_nan"], [845, 0, 1, "", "fill_null"], [846, 0, 1, "", "filter"], [847, 0, 1, "", "first"], [848, 0, 1, "", "gather_every"], [849, 0, 1, "", "group_by"], [850, 0, 1, "", "group_by_dynamic"], [851, 0, 1, "", "group_by_rolling"], [852, 0, 1, "", "groupby"], [853, 0, 1, "", "groupby_dynamic"], [854, 0, 1, "", "groupby_rolling"], [855, 0, 1, "", "head"], [856, 0, 1, "", "inspect"], [857, 0, 1, "", "interpolate"], [858, 0, 1, "", "join"], [859, 0, 1, "", "join_asof"], [860, 0, 1, "", "last"], [861, 0, 1, "", "lazy"], [862, 0, 1, "", "limit"], [863, 0, 1, "", "map"], [864, 0, 1, "", "map_batches"], [865, 0, 1, "", "max"], [866, 0, 1, "", "mean"], [867, 0, 1, "", "median"], [868, 0, 1, "", "melt"], [869, 0, 1, "", "merge_sorted"], [870, 0, 1, "", "min"], [871, 0, 1, "", "null_count"], [872, 0, 1, "", "pipe"], [873, 0, 1, "", "profile"], [874, 0, 1, "", "quantile"], [875, 0, 1, "", "rename"], [876, 0, 1, "", "reverse"], [877, 0, 1, "", "rolling"], [878, 1, 1, "", "schema"], [879, 0, 1, "", "select"], [880, 0, 1, "", "select_seq"], [881, 0, 1, "", "serialize"], [882, 0, 1, "", "set_sorted"], [883, 0, 1, "", "shift"], [884, 0, 1, "", "shift_and_fill"], [885, 0, 1, "", "show_graph"], [43, 0, 1, "", "sink_csv"], [44, 0, 1, "", "sink_ipc"], [45, 0, 1, "", "sink_ndjson"], [46, 0, 1, "", "sink_parquet"], [886, 0, 1, "", "slice"], [887, 0, 1, "", "sort"], [888, 0, 1, "", "sql"], [889, 0, 1, "", "std"], [890, 0, 1, "", "sum"], [891, 0, 1, "", "tail"], [892, 0, 1, "", "take_every"], [893, 0, 1, "", "top_k"], [894, 0, 1, "", "unique"], [895, 0, 1, "", "unnest"], [896, 0, 1, "", "update"], [897, 0, 1, "", "var"], [898, 1, 1, "", "width"], [899, 0, 1, "", "with_columns"], [900, 0, 1, "", "with_columns_seq"], [901, 0, 1, "", "with_context"], [902, 0, 1, "", "with_row_count"], [903, 0, 1, "", "with_row_index"]], "polars": [[1327, 2, 1, "", "SQLContext"], [53, 2, 1, "", "StringCache"], [54, 4, 1, "", "align_frames"], [724, 4, 1, "", "all"], [725, 4, 1, "", "all_horizontal"], [726, 4, 1, "", "any"], [727, 4, 1, "", "any_horizontal"], [728, 4, 1, "", "apply"], [729, 4, 1, "", "approx_n_unique"], [730, 4, 1, "", "arange"], [731, 4, 1, "", "arctan2"], [732, 4, 1, "", "arctan2d"], [733, 4, 1, "", "arg_sort_by"], [734, 4, 1, "", "arg_where"], [59, 4, 1, "", "build_info"], [735, 4, 1, "", "business_day_count"], [736, 4, 1, "", "coalesce"], [60, 4, 1, "", "collect_all"], [61, 4, 1, "", "collect_all_async"], [62, 4, 1, "", "concat"], [737, 4, 1, "", "concat_list"], [738, 4, 1, "", "concat_str"], [739, 4, 1, "", "corr"], [740, 4, 1, "", "count"], [741, 4, 1, "", "cov"], [742, 4, 1, "", "cum_count"], [743, 4, 1, "", "cum_fold"], [744, 4, 1, "", "cum_reduce"], [745, 4, 1, "", "cum_sum"], [746, 4, 1, "", "cum_sum_horizontal"], [747, 4, 1, "", "cumfold"], [748, 4, 1, "", "cumreduce"], [749, 4, 1, "", "cumsum"], [750, 4, 1, "", "cumsum_horizontal"], [751, 4, 1, "", "date"], [752, 4, 1, "", "date_range"], [753, 4, 1, "", "date_ranges"], [754, 4, 1, "", "datetime"], [755, 4, 1, "", "datetime_range"], [756, 4, 1, "", "datetime_ranges"], [91, 4, 1, "", "disable_string_cache"], [757, 4, 1, "", "duration"], [758, 4, 1, "", "element"], [92, 4, 1, "", "enable_string_cache"], [759, 4, 1, "", "exclude"], [760, 4, 1, "", "first"], [761, 4, 1, "", "fold"], [762, 4, 1, "", "format"], [108, 4, 1, "", "from_arrow"], [109, 4, 1, "", "from_dataframe"], [110, 4, 1, "", "from_dict"], [111, 4, 1, "", "from_dicts"], [763, 4, 1, "", "from_epoch"], [112, 4, 1, "", "from_numpy"], [113, 4, 1, "", "from_pandas"], [114, 4, 1, "", "from_records"], [115, 4, 1, "", "from_repr"], [116, 4, 1, "", "get_index_type"], [764, 4, 1, "", "groups"], [765, 4, 1, "", "head"], [766, 4, 1, "", "implode"], [767, 4, 1, "", "int_range"], [768, 4, 1, "", "int_ranges"], [769, 4, 1, "", "last"], [770, 4, 1, "", "len"], [771, 4, 1, "", "lit"], [772, 4, 1, "", "map"], [773, 4, 1, "", "map_batches"], [774, 4, 1, "", "map_groups"], [775, 4, 1, "", "max"], [776, 4, 1, "", "max_horizontal"], [777, 4, 1, "", "mean"], [778, 4, 1, "", "mean_horizontal"], [779, 4, 1, "", "median"], [780, 4, 1, "", "min"], [781, 4, 1, "", "min_horizontal"], [782, 4, 1, "", "n_unique"], [783, 4, 1, "", "nth"], [784, 4, 1, "", "ones"], [928, 6, 0, "-", "plugins"], [785, 4, 1, "", "quantile"], [118, 4, 1, "", "read_avro"], [119, 4, 1, "", "read_clipboard"], [120, 4, 1, "", "read_csv"], [121, 4, 1, "", "read_csv_batched"], [122, 4, 1, "", "read_database"], [123, 4, 1, "", "read_database_uri"], [124, 4, 1, "", "read_delta"], [125, 4, 1, "", "read_excel"], [126, 4, 1, "", "read_ipc"], [127, 4, 1, "", "read_ipc_schema"], [128, 4, 1, "", "read_ipc_stream"], [129, 4, 1, "", "read_json"], [130, 4, 1, "", "read_ndjson"], [131, 4, 1, "", "read_ods"], [132, 4, 1, "", "read_parquet"], [133, 4, 1, "", "read_parquet_schema"], [786, 4, 1, "", "reduce"], [787, 4, 1, "", "repeat"], [788, 4, 1, "", "rolling_corr"], [789, 4, 1, "", "rolling_cov"], [134, 4, 1, "", "scan_csv"], [135, 4, 1, "", "scan_delta"], [136, 4, 1, "", "scan_iceberg"], [137, 4, 1, "", "scan_ipc"], [138, 4, 1, "", "scan_ndjson"], [139, 4, 1, "", "scan_parquet"], [140, 4, 1, "", "scan_pyarrow_dataset"], [790, 4, 1, "", "select"], [929, 6, 0, "-", "selectors"], [141, 4, 1, "", "set_random_seed"], [142, 4, 1, "", "show_versions"], [791, 4, 1, "", "sql_expr"], [792, 4, 1, "", "std"], [793, 4, 1, "", "struct"], [794, 4, 1, "", "sum"], [795, 4, 1, "", "sum_horizontal"], [796, 4, 1, "", "tail"], [156, 4, 1, "", "thread_pool_size"], [157, 4, 1, "", "threadpool_size"], [797, 4, 1, "", "time"], [798, 4, 1, "", "time_range"], [799, 4, 1, "", "time_ranges"], [158, 4, 1, "", "using_string_cache"], [800, 4, 1, "", "var"], [801, 4, 1, "", "when"], [802, 4, 1, "", "zeros"]], "polars.SQLContext": [[1327, 0, 1, "", "__enter__"], [1327, 0, 1, "", "__exit__"], [1327, 0, 1, "", "__init__"], [47, 0, 1, "", "execute"], [48, 0, 1, "", "register"], [49, 0, 1, "", "register_globals"], [50, 0, 1, "", "register_many"], [51, 0, 1, "", "tables"], [52, 0, 1, "", "unregister"]], "polars.Series": [[931, 0, 1, "", "abs"], [932, 0, 1, "", "alias"], [933, 0, 1, "", "all"], [934, 0, 1, "", "any"], [935, 0, 1, "", "append"], [936, 0, 1, "", "apply"], [937, 0, 1, "", "arccos"], [938, 0, 1, "", "arccosh"], [939, 0, 1, "", "arcsin"], [940, 0, 1, "", "arcsinh"], [941, 0, 1, "", "arctan"], [942, 0, 1, "", "arctanh"], [943, 0, 1, "", "arg_max"], [944, 0, 1, "", "arg_min"], [945, 0, 1, "", "arg_sort"], [946, 0, 1, "", "arg_true"], [947, 0, 1, "", "arg_unique"], [977, 0, 1, "", "bottom_k"], [978, 0, 1, "", "cast"], [984, 0, 1, "", "cbrt"], [985, 0, 1, "", "ceil"], [986, 0, 1, "", "chunk_lengths"], [987, 0, 1, "", "clear"], [988, 0, 1, "", "clip"], [989, 0, 1, "", "clip_max"], [990, 0, 1, "", "clip_min"], [991, 0, 1, "", "clone"], [992, 0, 1, "", "cos"], [993, 0, 1, "", "cosh"], [994, 0, 1, "", "cot"], [995, 0, 1, "", "cum_max"], [996, 0, 1, "", "cum_min"], [997, 0, 1, "", "cum_prod"], [998, 0, 1, "", "cum_sum"], [999, 0, 1, "", "cummax"], [1000, 0, 1, "", "cummin"], [1001, 0, 1, "", "cumprod"], [1002, 0, 1, "", "cumsum"], [1003, 0, 1, "", "cumulative_eval"], [1004, 0, 1, "", "cut"], [1005, 0, 1, "", "describe"], [1006, 0, 1, "", "diff"], [1007, 0, 1, "", "dot"], [1008, 0, 1, "", "drop_nans"], [1009, 0, 1, "", "drop_nulls"], [1065, 3, 1, "", "dtype"], [1066, 0, 1, "", "entropy"], [1067, 0, 1, "", "equals"], [1068, 0, 1, "", "estimated_size"], [1069, 0, 1, "", "ewm_mean"], [1070, 0, 1, "", "ewm_mean_by"], [1071, 0, 1, "", "ewm_std"], [1072, 0, 1, "", "ewm_var"], [1073, 0, 1, "", "exp"], [1074, 0, 1, "", "explode"], [1075, 0, 1, "", "extend"], [1076, 0, 1, "", "extend_constant"], [1077, 0, 1, "", "fill_nan"], [1078, 0, 1, "", "fill_null"], [1079, 0, 1, "", "filter"], [1080, 3, 1, "", "flags"], [1081, 0, 1, "", "floor"], [1082, 0, 1, "", "gather"], [1083, 0, 1, "", "gather_every"], [1084, 0, 1, "", "get_chunks"], [1085, 0, 1, "", "has_validity"], [1086, 0, 1, "", "hash"], [1087, 0, 1, "", "head"], [1088, 0, 1, "", "hist"], [1089, 0, 1, "", "implode"], [1090, 3, 1, "", "inner_dtype"], [1091, 0, 1, "", "interpolate"], [1092, 0, 1, "", "is_between"], [1093, 0, 1, "", "is_boolean"], [1094, 0, 1, "", "is_duplicated"], [1095, 0, 1, "", "is_empty"], [1096, 0, 1, "", "is_finite"], [1097, 0, 1, "", "is_first"], [1098, 0, 1, "", "is_first_distinct"], [1099, 0, 1, "", "is_float"], [1100, 0, 1, "", "is_in"], [1101, 0, 1, "", "is_infinite"], [1102, 0, 1, "", "is_integer"], [1103, 0, 1, "", "is_last"], [1104, 0, 1, "", "is_last_distinct"], [1105, 0, 1, "", "is_nan"], [1106, 0, 1, "", "is_not_nan"], [1107, 0, 1, "", "is_not_null"], [1108, 0, 1, "", "is_null"], [1109, 0, 1, "", "is_numeric"], [1110, 0, 1, "", "is_sorted"], [1111, 0, 1, "", "is_temporal"], [1112, 0, 1, "", "is_unique"], [1113, 0, 1, "", "is_utf8"], [1114, 0, 1, "", "item"], [1115, 0, 1, "", "kurtosis"], [1116, 0, 1, "", "len"], [1117, 0, 1, "", "limit"], [1161, 0, 1, "", "log"], [1162, 0, 1, "", "log10"], [1163, 0, 1, "", "log1p"], [1164, 0, 1, "", "lower_bound"], [1165, 0, 1, "", "map_dict"], [1166, 0, 1, "", "map_elements"], [1167, 0, 1, "", "max"], [1168, 0, 1, "", "mean"], [1169, 0, 1, "", "median"], [1170, 0, 1, "", "min"], [1171, 0, 1, "", "mode"], [1172, 0, 1, "", "n_chunks"], [1173, 0, 1, "", "n_unique"], [1174, 3, 1, "", "name"], [1175, 0, 1, "", "nan_max"], [1176, 0, 1, "", "nan_min"], [1177, 0, 1, "", "new_from_index"], [1178, 0, 1, "", "not_"], [1179, 0, 1, "", "null_count"], [1180, 0, 1, "", "pct_change"], [1181, 0, 1, "", "peak_max"], [1182, 0, 1, "", "peak_min"], [1183, 0, 1, "", "product"], [1184, 0, 1, "", "qcut"], [1185, 0, 1, "", "quantile"], [1186, 0, 1, "", "rank"], [1187, 0, 1, "", "rechunk"], [1188, 0, 1, "", "reinterpret"], [1189, 0, 1, "", "rename"], [1190, 0, 1, "", "replace"], [1191, 0, 1, "", "reshape"], [1192, 0, 1, "", "reverse"], [1193, 0, 1, "", "rle"], [1194, 0, 1, "", "rle_id"], [1195, 0, 1, "", "rolling_apply"], [1196, 0, 1, "", "rolling_map"], [1197, 0, 1, "", "rolling_max"], [1198, 0, 1, "", "rolling_mean"], [1199, 0, 1, "", "rolling_median"], [1200, 0, 1, "", "rolling_min"], [1201, 0, 1, "", "rolling_quantile"], [1202, 0, 1, "", "rolling_skew"], [1203, 0, 1, "", "rolling_std"], [1204, 0, 1, "", "rolling_sum"], [1205, 0, 1, "", "rolling_var"], [1206, 0, 1, "", "round"], [1207, 0, 1, "", "round_sig_figs"], [1208, 0, 1, "", "sample"], [1209, 0, 1, "", "scatter"], [1210, 0, 1, "", "search_sorted"], [1211, 0, 1, "", "series_equal"], [1212, 0, 1, "", "set"], [1213, 0, 1, "", "set_at_idx"], [1214, 0, 1, "", "set_sorted"], [1215, 3, 1, "", "shape"], [1216, 0, 1, "", "shift"], [1217, 0, 1, "", "shift_and_fill"], [1218, 0, 1, "", "shrink_dtype"], [1219, 0, 1, "", "shrink_to_fit"], [1220, 0, 1, "", "shuffle"], [1221, 0, 1, "", "sign"], [1222, 0, 1, "", "sin"], [1223, 0, 1, "", "sinh"], [1224, 0, 1, "", "skew"], [1225, 0, 1, "", "slice"], [1226, 0, 1, "", "sort"], [1227, 0, 1, "", "sqrt"], [1228, 0, 1, "", "std"], [1289, 0, 1, "", "sum"], [1290, 0, 1, "", "tail"], [1291, 0, 1, "", "take"], [1292, 0, 1, "", "take_every"], [1293, 0, 1, "", "tan"], [1294, 0, 1, "", "tanh"], [1295, 0, 1, "", "to_arrow"], [1296, 0, 1, "", "to_dummies"], [1297, 0, 1, "", "to_frame"], [1298, 0, 1, "", "to_init_repr"], [1299, 0, 1, "", "to_list"], [1300, 0, 1, "", "to_numpy"], [1301, 0, 1, "", "to_pandas"], [1302, 0, 1, "", "to_physical"], [1303, 0, 1, "", "top_k"], [1304, 0, 1, "", "unique"], [1305, 0, 1, "", "unique_counts"], [1306, 0, 1, "", "upper_bound"], [1307, 0, 1, "", "value_counts"], [1308, 0, 1, "", "var"], [1309, 0, 1, "", "view"], [1310, 0, 1, "", "zip_with"]], "polars.Series.arr": [[948, 0, 1, "", "all"], [949, 0, 1, "", "any"], [950, 0, 1, "", "arg_max"], [951, 0, 1, "", "arg_min"], [952, 0, 1, "", "contains"], [953, 0, 1, "", "count_matches"], [954, 0, 1, "", "explode"], [955, 0, 1, "", "first"], [956, 0, 1, "", "get"], [957, 0, 1, "", "join"], [958, 0, 1, "", "last"], [959, 0, 1, "", "max"], [960, 0, 1, "", "median"], [961, 0, 1, "", "min"], [962, 0, 1, "", "n_unique"], [963, 0, 1, "", "reverse"], [964, 0, 1, "", "shift"], [965, 0, 1, "", "sort"], [966, 0, 1, "", "std"], [967, 0, 1, "", "sum"], [968, 0, 1, "", "to_list"], [969, 0, 1, "", "to_struct"], [970, 0, 1, "", "unique"], [971, 0, 1, "", "var"]], "polars.Series.bin": [[972, 0, 1, "", "contains"], [973, 0, 1, "", "decode"], [974, 0, 1, "", "encode"], [975, 0, 1, "", "ends_with"], [976, 0, 1, "", "starts_with"]], "polars.Series.cat": [[979, 0, 1, "", "get_categories"], [980, 0, 1, "", "is_local"], [981, 0, 1, "", "set_ordering"], [982, 0, 1, "", "to_local"], [983, 0, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[1010, 0, 1, "", "add_business_days"], [1011, 0, 1, "", "base_utc_offset"], [1012, 0, 1, "", "cast_time_unit"], [1013, 0, 1, "", "century"], [1014, 0, 1, "", "combine"], [1015, 0, 1, "", "convert_time_zone"], [1016, 0, 1, "", "date"], [1017, 0, 1, "", "datetime"], [1018, 0, 1, "", "day"], [1019, 0, 1, "", "days"], [1020, 0, 1, "", "dst_offset"], [1021, 0, 1, "", "epoch"], [1022, 0, 1, "", "hour"], [1023, 0, 1, "", "hours"], [1024, 0, 1, "", "is_leap_year"], [1025, 0, 1, "", "iso_year"], [1026, 0, 1, "", "max"], [1027, 0, 1, "", "mean"], [1028, 0, 1, "", "median"], [1029, 0, 1, "", "microsecond"], [1030, 0, 1, "", "microseconds"], [1031, 0, 1, "", "millennium"], [1032, 0, 1, "", "millisecond"], [1033, 0, 1, "", "milliseconds"], [1034, 0, 1, "", "min"], [1035, 0, 1, "", "minute"], [1036, 0, 1, "", "minutes"], [1037, 0, 1, "", "month"], [1038, 0, 1, "", "month_end"], [1039, 0, 1, "", "month_start"], [1040, 0, 1, "", "nanosecond"], [1041, 0, 1, "", "nanoseconds"], [1042, 0, 1, "", "offset_by"], [1043, 0, 1, "", "ordinal_day"], [1044, 0, 1, "", "quarter"], [1045, 0, 1, "", "replace_time_zone"], [1046, 0, 1, "", "round"], [1047, 0, 1, "", "second"], [1048, 0, 1, "", "seconds"], [1049, 0, 1, "", "strftime"], [1050, 0, 1, "", "time"], [1051, 0, 1, "", "timestamp"], [1052, 0, 1, "", "to_string"], [1053, 0, 1, "", "total_days"], [1054, 0, 1, "", "total_hours"], [1055, 0, 1, "", "total_microseconds"], [1056, 0, 1, "", "total_milliseconds"], [1057, 0, 1, "", "total_minutes"], [1058, 0, 1, "", "total_nanoseconds"], [1059, 0, 1, "", "total_seconds"], [1060, 0, 1, "", "truncate"], [1061, 0, 1, "", "week"], [1062, 0, 1, "", "weekday"], [1063, 0, 1, "", "with_time_unit"], [1064, 0, 1, "", "year"]], "polars.Series.list": [[1118, 0, 1, "", "all"], [1119, 0, 1, "", "any"], [1120, 0, 1, "", "arg_max"], [1121, 0, 1, "", "arg_min"], [1122, 0, 1, "", "concat"], [1123, 0, 1, "", "contains"], [1124, 0, 1, "", "count_match"], [1125, 0, 1, "", "count_matches"], [1126, 0, 1, "", "diff"], [1127, 0, 1, "", "drop_nulls"], [1128, 0, 1, "", "eval"], [1129, 0, 1, "", "explode"], [1130, 0, 1, "", "first"], [1131, 0, 1, "", "gather"], [1132, 0, 1, "", "gather_every"], [1133, 0, 1, "", "get"], [1134, 0, 1, "", "head"], [1135, 0, 1, "", "join"], [1136, 0, 1, "", "last"], [1137, 0, 1, "", "len"], [1138, 0, 1, "", "lengths"], [1139, 0, 1, "", "max"], [1140, 0, 1, "", "mean"], [1141, 0, 1, "", "median"], [1142, 0, 1, "", "min"], [1143, 0, 1, "", "n_unique"], [1144, 0, 1, "", "reverse"], [1145, 0, 1, "", "sample"], [1146, 0, 1, "", "set_difference"], [1147, 0, 1, "", "set_intersection"], [1148, 0, 1, "", "set_symmetric_difference"], [1149, 0, 1, "", "set_union"], [1150, 0, 1, "", "shift"], [1151, 0, 1, "", "slice"], [1152, 0, 1, "", "sort"], [1153, 0, 1, "", "std"], [1154, 0, 1, "", "sum"], [1155, 0, 1, "", "tail"], [1156, 0, 1, "", "take"], [1157, 0, 1, "", "to_array"], [1158, 0, 1, "", "to_struct"], [1159, 0, 1, "", "unique"], [1160, 0, 1, "", "var"]], "polars.Series.str": [[1229, 0, 1, "", "concat"], [1230, 0, 1, "", "contains"], [1231, 0, 1, "", "contains_any"], [1232, 0, 1, "", "count_match"], [1233, 0, 1, "", "count_matches"], [1234, 0, 1, "", "decode"], [1235, 0, 1, "", "encode"], [1236, 0, 1, "", "ends_with"], [1237, 0, 1, "", "explode"], [1238, 0, 1, "", "extract"], [1239, 0, 1, "", "extract_all"], [1240, 0, 1, "", "extract_groups"], [1241, 0, 1, "", "find"], [1242, 0, 1, "", "head"], [1243, 0, 1, "", "json_decode"], [1244, 0, 1, "", "json_extract"], [1245, 0, 1, "", "json_path_match"], [1246, 0, 1, "", "len_bytes"], [1247, 0, 1, "", "len_chars"], [1248, 0, 1, "", "lengths"], [1249, 0, 1, "", "ljust"], [1250, 0, 1, "", "lstrip"], [1251, 0, 1, "", "n_chars"], [1252, 0, 1, "", "pad_end"], [1253, 0, 1, "", "pad_start"], [1254, 0, 1, "", "parse_int"], [1255, 0, 1, "", "replace"], [1256, 0, 1, "", "replace_all"], [1257, 0, 1, "", "replace_many"], [1258, 0, 1, "", "reverse"], [1259, 0, 1, "", "rjust"], [1260, 0, 1, "", "rstrip"], [1261, 0, 1, "", "slice"], [1262, 0, 1, "", "split"], [1263, 0, 1, "", "split_exact"], [1264, 0, 1, "", "splitn"], [1265, 0, 1, "", "starts_with"], [1266, 0, 1, "", "strip"], [1267, 0, 1, "", "strip_chars"], [1268, 0, 1, "", "strip_chars_end"], [1269, 0, 1, "", "strip_chars_start"], [1270, 0, 1, "", "strip_prefix"], [1271, 0, 1, "", "strip_suffix"], [1272, 0, 1, "", "strptime"], [1273, 0, 1, "", "tail"], [1274, 0, 1, "", "to_date"], [1275, 0, 1, "", "to_datetime"], [1276, 0, 1, "", "to_decimal"], [1277, 0, 1, "", "to_integer"], [1278, 0, 1, "", "to_lowercase"], [1279, 0, 1, "", "to_time"], [1280, 0, 1, "", "to_titlecase"], [1281, 0, 1, "", "to_uppercase"], [1282, 0, 1, "", "zfill"]], "polars.Series.struct": [[1283, 0, 1, "", "field"], [1284, 3, 1, "", "fields"], [1285, 0, 1, "", "json_encode"], [1286, 0, 1, "", "rename_fields"], [1287, 3, 1, "", "schema"], [1288, 0, 1, "", "unnest"]], "polars.StringCache": [[53, 0, 1, "", "__init__"]], "polars.api": [[55, 4, 1, "", "register_dataframe_namespace"], [56, 4, 1, "", "register_expr_namespace"], [57, 4, 1, "", "register_lazyframe_namespace"], [58, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[285, 0, 1, "", "__iter__"], [286, 0, 1, "", "agg"], [287, 0, 1, "", "all"], [288, 0, 1, "", "apply"], [289, 0, 1, "", "count"], [290, 0, 1, "", "first"], [291, 0, 1, "", "head"], [292, 0, 1, "", "last"], [293, 0, 1, "", "len"], [294, 0, 1, "", "map_groups"], [295, 0, 1, "", "max"], [296, 0, 1, "", "mean"], [297, 0, 1, "", "median"], [298, 0, 1, "", "min"], [299, 0, 1, "", "n_unique"], [300, 0, 1, "", "quantile"], [301, 0, 1, "", "sum"], [302, 0, 1, "", "tail"]], "polars.datatypes": [[63, 2, 1, "", "Array"], [64, 2, 1, "", "Binary"], [65, 2, 1, "", "Boolean"], [66, 2, 1, "", "Categorical"], [67, 2, 1, "", "DataType"], [68, 2, 1, "", "Date"], [69, 2, 1, "", "Datetime"], [70, 2, 1, "", "Decimal"], [71, 2, 1, "", "Duration"], [72, 2, 1, "", "Enum"], [73, 2, 1, "", "Float32"], [74, 2, 1, "", "Float64"], [75, 2, 1, "", "Int16"], [76, 2, 1, "", "Int32"], [77, 2, 1, "", "Int64"], [78, 2, 1, "", "Int8"], [79, 2, 1, "", "List"], [80, 2, 1, "", "Null"], [81, 2, 1, "", "Object"], [82, 2, 1, "", "String"], [83, 2, 1, "", "Struct"], [84, 2, 1, "", "Time"], [85, 2, 1, "", "UInt16"], [86, 2, 1, "", "UInt32"], [87, 2, 1, "", "UInt64"], [88, 2, 1, "", "UInt8"], [89, 2, 1, "", "Unknown"], [90, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[63, 0, 1, "", "__init__"]], "polars.datatypes.Binary": [[64, 0, 1, "", "__init__"]], "polars.datatypes.Boolean": [[65, 0, 1, "", "__init__"]], "polars.datatypes.Categorical": [[66, 0, 1, "", "__init__"]], "polars.datatypes.DataType": [[67, 0, 1, "", "__init__"]], "polars.datatypes.Date": [[68, 0, 1, "", "__init__"]], "polars.datatypes.Datetime": [[69, 0, 1, "", "__init__"]], "polars.datatypes.Decimal": [[70, 0, 1, "", "__init__"]], "polars.datatypes.Duration": [[71, 0, 1, "", "__init__"]], "polars.datatypes.Enum": [[72, 0, 1, "", "__init__"]], "polars.datatypes.Float32": [[73, 0, 1, "", "__init__"]], "polars.datatypes.Float64": [[74, 0, 1, "", "__init__"]], "polars.datatypes.Int16": [[75, 0, 1, "", "__init__"]], "polars.datatypes.Int32": [[76, 0, 1, "", "__init__"]], "polars.datatypes.Int64": [[77, 0, 1, "", "__init__"]], "polars.datatypes.Int8": [[78, 0, 1, "", "__init__"]], "polars.datatypes.List": [[79, 0, 1, "", "__init__"]], "polars.datatypes.Null": [[80, 0, 1, "", "__init__"]], "polars.datatypes.Object": [[81, 0, 1, "", "__init__"]], "polars.datatypes.String": [[82, 0, 1, "", "__init__"]], "polars.datatypes.Struct": [[83, 0, 1, "", "__init__"]], "polars.datatypes.Time": [[84, 0, 1, "", "__init__"]], "polars.datatypes.UInt16": [[85, 0, 1, "", "__init__"]], "polars.datatypes.UInt32": [[86, 0, 1, "", "__init__"]], "polars.datatypes.UInt64": [[87, 0, 1, "", "__init__"]], "polars.datatypes.UInt8": [[88, 0, 1, "", "__init__"]], "polars.datatypes.Unknown": [[89, 0, 1, "", "__init__"]], "polars.exceptions": [[93, 5, 1, "", "ArrowError"], [94, 5, 1, "", "ColumnNotFoundError"], [95, 5, 1, "", "ComputeError"], [96, 5, 1, "", "DuplicateError"], [97, 5, 1, "", "InvalidOperationError"], [98, 5, 1, "", "NoDataError"], [99, 5, 1, "", "NoRowsReturnedError"], [100, 5, 1, "", "PolarsError"], [101, 5, 1, "", "PolarsPanicError"], [102, 5, 1, "", "RowsError"], [103, 5, 1, "", "SchemaError"], [104, 5, 1, "", "SchemaFieldNotFoundError"], [105, 5, 1, "", "ShapeError"], [106, 5, 1, "", "StructFieldNotFoundError"], [107, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[117, 0, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[904, 0, 1, "", "agg"], [905, 0, 1, "", "all"], [906, 0, 1, "", "apply"], [907, 0, 1, "", "count"], [908, 0, 1, "", "first"], [909, 0, 1, "", "head"], [910, 0, 1, "", "last"], [911, 0, 1, "", "len"], [912, 0, 1, "", "map_groups"], [913, 0, 1, "", "max"], [914, 0, 1, "", "mean"], [915, 0, 1, "", "median"], [916, 0, 1, "", "min"], [917, 0, 1, "", "n_unique"], [918, 0, 1, "", "quantile"], [919, 0, 1, "", "sum"], [920, 0, 1, "", "tail"]], "polars.plugins": [[928, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[929, 4, 1, "", "all"], [929, 4, 1, "", "by_dtype"], [929, 4, 1, "", "by_name"], [929, 4, 1, "", "categorical"], [929, 4, 1, "", "contains"], [929, 4, 1, "", "date"], [929, 4, 1, "", "datetime"], [929, 4, 1, "", "duration"], [929, 4, 1, "", "ends_with"], [929, 4, 1, "", "expand_selector"], [929, 4, 1, "", "first"], [929, 4, 1, "", "float"], [929, 4, 1, "", "integer"], [929, 4, 1, "", "is_selector"], [929, 4, 1, "", "last"], [929, 4, 1, "", "matches"], [929, 4, 1, "", "numeric"], [929, 4, 1, "", "starts_with"], [929, 4, 1, "", "string"], [929, 4, 1, "", "temporal"], [929, 4, 1, "", "time"]], "polars.testing": [[143, 4, 1, "", "assert_frame_equal"], [144, 4, 1, "", "assert_frame_not_equal"], [145, 4, 1, "", "assert_series_equal"], [146, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[147, 2, 1, "", "column"], [148, 4, 1, "", "columns"], [149, 4, 1, "", "create_list_strategy"], [150, 4, 1, "", "dataframes"], [151, 4, 1, "", "dtypes"], [152, 4, 1, "", "lists"], [153, 4, 1, "", "load_profile"], [154, 4, 1, "", "series"], [155, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[147, 0, 1, "", "__init__"]]}, "objtypes": {"0": "py:method", "1": "py:property", "2": "py:class", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "property", "Python property"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"index": 0, "extend": [1, 179, 1075], "api": [1, 55, 56, 57, 58, 823], "provid": 1, "new": 1, "function": [1, 810, 822, 929], "avail": 1, "registr": 1, "exampl": [1, 311, 929, 1323, 1328], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 807, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1328], "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 159], "activate_decim": 2, "load": [3, 159], "load_from_fil": 4, "restore_default": 5, "save": [6, 159], "save_to_fil": 7, "set_ascii_t": 8, "set_auto_structifi": 9, "set_decimal_separ": 10, "set_float_precis": 11, "set_fmt_float": 12, "set_fmt_str_length": 13, "set_fmt_table_cell_list_len": 14, "set_streaming_chunk_s": 15, "set_tbl_cell_align": 16, "set_tbl_cell_numeric_align": 17, "set_tbl_col": 18, "set_tbl_column_data_type_inlin": 19, "set_tbl_dataframe_shape_below": 20, "set_tbl_format": 21, "set_tbl_hide_column_data_typ": 22, "set_tbl_hide_column_nam": 23, "set_tbl_hide_dataframe_shap": 24, "set_tbl_hide_dtype_separ": 25, "set_tbl_row": 26, "set_tbl_width_char": 27, "set_thousands_separ": 28, "set_trim_decimal_zero": 29, "set_verbos": 30, "state": [31, 159], "datafram": [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 150, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 308], "write_avro": 32, "write_clipboard": 33, "write_csv": 34, "write_databas": 35, "write_delta": 36, "write_excel": 37, "write_ipc": 38, "write_ipc_stream": 39, "write_json": [40, 567], "write_ndjson": 41, "write_parquet": 42, "lazyfram": [43, 44, 45, 46, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 924], "sink_csv": 43, "sink_ipc": 44, "sink_ndjson": 45, "sink_parquet": 46, "sqlcontext": [47, 48, 49, 50, 51, 52], "execut": 47, "regist": 48, "register_glob": 49, "register_mani": 50, "tabl": 51, "unregist": 52, "stringcach": [53, 822], "align_fram": 54, "register_dataframe_namespac": 55, "register_expr_namespac": 56, "register_lazyframe_namespac": 57, "register_series_namespac": 58, "build_info": 59, "collect_al": 60, "collect_all_async": 61, "concat": [62, 505, 648, 1122, 1229], "datatyp": [63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 312], "arrai": [63, 803, 1311], "binari": [64, 804, 817, 1313], "boolean": [65, 805, 1314], "categor": 66, "date": [68, 404, 751, 1016], "datetim": [69, 405, 754, 1017], "decim": 70, "durat": [71, 757], "enum": 72, "float32": 73, "float64": 74, "int16": 75, "int32": 76, "int64": 77, "int8": 78, "list": [79, 152, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 812, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1320], "null": 80, "object": 81, "string": [82, 312, 818, 1324], "struct": [83, 702, 703, 704, 793, 819, 1283, 1284, 1285, 1286, 1287, 1288, 1325], "time": [84, 434, 797, 1050], "uint16": 85, "uint32": 86, "uint64": 87, "uint8": 88, "unknown": 89, "utf8": 90, "disable_string_cach": 91, "enable_string_cach": 92, "except": [93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 313], "arrowerror": 93, "columnnotfounderror": 94, "computeerror": 95, "duplicateerror": 96, "invalidoperationerror": 97, "nodataerror": 98, "norowsreturnederror": 99, "polarserror": 100, "polarspanicerror": 101, "rowserror": 102, "schemaerror": 103, "schemafieldnotfounderror": 104, "shapeerror": 105, "structfieldnotfounderror": 106, "toomanyrowsreturnederror": 107, "from_arrow": 108, "from_datafram": 109, "from_dict": [110, 111], "from_numpi": 112, "from_panda": 113, "from_record": 114, "from_repr": 115, "get_index_typ": 116, "io": 117, "csv": [117, 824], "batched_read": 117, "batchedcsvread": 117, "next_batch": 117, "read_avro": 118, "read_clipboard": 119, "read_csv": 120, "read_csv_batch": 121, "read_databas": 122, "read_database_uri": 123, "read_delta": 124, "read_excel": 125, "read_ipc": 126, "read_ipc_schema": 127, "read_ipc_stream": 128, "read_json": 129, "read_ndjson": 130, "read_od": 131, "read_parquet": 132, "read_parquet_schema": 133, "scan_csv": 134, "scan_delta": 135, "scan_iceberg": 136, "scan_ipc": 137, "scan_ndjson": 138, "scan_parquet": 139, "scan_pyarrow_dataset": 140, "set_random_se": 141, "show_vers": 142, "test": [143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 1328], "assert_frame_equ": 143, "assert_frame_not_equ": 144, "assert_series_equ": 145, "assert_series_not_equ": 146, "parametr": [147, 148, 149, 150, 151, 152, 153, 154, 155, 1328], "column": [147, 148, 168, 808, 834], "create_list_strategi": 149, "dtype": [151, 175, 840, 1065], "load_profil": 153, "seri": [154, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1319], "set_profil": 155, "thread_pool_s": 156, "threadpool_s": 157, "using_string_cach": 158, "option": 159, "us": 159, "context": 159, "manag": 159, "decor": 159, "aggreg": [160, 314, 825, 930], "__dataframe__": 161, "appli": [162, 288, 323, 728, 906, 936], "approx_n_uniqu": [163, 324, 729, 826], "bottom_k": [164, 366, 827, 977], "cast": [165, 368, 829, 978], "clear": [166, 830, 987], "clone": [167, 831, 991], "corr": [169, 739], "count": [170, 289, 379, 740, 835, 907], "describ": [171, 836, 1005], "drop": [172, 838], "drop_in_plac": 173, "drop_nul": [174, 397, 510, 839, 1009, 1127], "equal": [176, 1067], "estimated_s": [177, 1068], "explod": [178, 342, 458, 512, 656, 842, 954, 1074, 1129, 1237], "fill_nan": [180, 460, 844, 1077], "fill_nul": [181, 461, 845, 1078], "filter": [182, 462, 846, 1079], "find_idx_by_nam": 183, "flag": [184, 1080], "fold": [185, 761], "frame_equ": 186, "gather_everi": [187, 470, 515, 848, 1083, 1132], "get_column": [188, 190], "get_column_index": 189, "glimps": 191, "group_bi": [192, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 849, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920], "group_by_dynam": [193, 850], "group_by_rol": [194, 851], "groupbi": [195, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 307, 852, 923], "groupby_dynam": [196, 853], "groupby_rol": [197, 854], "hash_row": 198, "head": [199, 291, 475, 517, 661, 765, 855, 909, 1087, 1134, 1242], "height": 200, "hstack": 201, "insert_at_idx": 202, "insert_column": 203, "interpol": [204, 479, 857, 1091], "is_dupl": [205, 481, 1094], "is_empti": [206, 1095], "is_uniqu": [207, 494, 1112], "item": [208, 1114], "iter_column": 209, "iter_row": 210, "iter_slic": 211, "join": [212, 345, 518, 858, 957, 1135], "join_asof": [213, 859], "lazi": [214, 861], "limit": [215, 500, 862, 1117], "map_row": 216, "max": [217, 295, 347, 522, 554, 775, 865, 913, 959, 1026, 1139, 1167], "max_horizont": [218, 776], "mean": [219, 296, 523, 555, 777, 866, 914, 1027, 1140, 1168], "mean_horizont": [220, 778], "median": [221, 297, 348, 524, 556, 779, 867, 915, 960, 1028, 1141, 1169], "melt": [222, 868], "merge_sort": [223, 869], "min": [224, 298, 349, 525, 568, 780, 870, 916, 961, 1034, 1142, 1170], "min_horizont": [225, 781], "n_chunk": [226, 1172], "n_uniqu": [227, 299, 350, 526, 572, 782, 917, 962, 1143, 1173], "null_count": [228, 588, 871, 1179], "partition_bi": 229, "pipe": [230, 594, 872], "pivot": 231, "product": [232, 597, 1183], "quantil": [233, 300, 599, 785, 874, 918, 1185], "rechunk": [234, 602, 1187], "renam": [235, 875, 1189], "replac": [236, 605, 674, 1190, 1255], "replace_at_idx": 237, "replace_column": 238, "revers": [239, 351, 527, 607, 677, 876, 963, 1144, 1192, 1258], "roll": [240, 610, 877], "row": [241, 242], "rows_by_kei": 243, "sampl": [244, 528, 632, 1145, 1208], "schema": [245, 878, 1287], "select": [246, 310, 790, 815, 879, 926, 1322], "select_seq": [247, 880], "set_sort": [248, 634, 882, 1214], "shape": [249, 1215], "shift": [250, 352, 533, 635, 883, 964, 1150, 1216], "shift_and_fil": [251, 636, 884, 1217], "shrink_to_fit": [252, 1219], "slice": [253, 534, 643, 680, 886, 1151, 1225, 1261], "sort": [254, 353, 535, 644, 887, 965, 1152, 1226], "sql": [255, 888, 1327], "std": [256, 354, 536, 647, 792, 889, 966, 1153, 1228], "sum": [257, 301, 355, 537, 707, 794, 890, 919, 967, 1154, 1289], "sum_horizont": [258, 795], "tail": [259, 302, 538, 692, 708, 796, 891, 920, 1155, 1273, 1290], "take_everi": [260, 710, 892, 1292], "to_arrow": [261, 1295], "to_dict": [262, 263], "to_dummi": [264, 1296], "to_init_repr": [265, 1298], "to_numpi": [266, 1300], "to_panda": [267, 1301], "to_seri": 268, "to_struct": [269, 357, 541, 969, 1158], "to_torch": 270, "top_k": [271, 714, 893, 1303], "transpos": 272, "uniqu": [273, 358, 542, 717, 894, 970, 1159, 1304], "unnest": [274, 895, 1288], "unstack": 275, "updat": [276, 896], "upsampl": 277, "var": [278, 359, 543, 721, 800, 897, 971, 1160, 1308], "vstack": 279, "width": [280, 898], "with_column": [281, 899], "with_columns_seq": [282, 900], "with_row_count": [283, 902], "with_row_index": [284, 903], "__iter__": 285, "agg": [286, 904], "all": [287, 319, 336, 501, 724, 905, 933, 948, 1118], "first": [290, 343, 463, 513, 760, 847, 908, 955, 1130], "last": [292, 346, 497, 519, 769, 860, 910, 958, 1136], "len": [293, 499, 520, 770, 911, 1116, 1137], "map_group": [294, 774, 912], "attribut": [303, 921, 1312], "comput": [304, 809, 1316], "descript": [305, 922, 1317], "export": [306, 1318], "miscellan": [309, 814, 822, 925, 1321], "manipul": [310, 815, 926, 1322], "plot": [311, 1323], "data": 312, "type": 312, "numer": [312, 817], "tempor": [312, 820, 1326], "nest": 312, "other": 312, "expr": [315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723], "ab": [315, 931], "add": 316, "agg_group": 317, "alia": [318, 932], "and_": 320, "ani": [321, 337, 502, 726, 934, 949, 1119], "append": [322, 935], "arcco": [325, 937], "arccosh": [326, 938], "arcsin": [327, 939], "arcsinh": [328, 940], "arctan": [329, 941], "arctanh": [330, 942], "arg_max": [331, 338, 503, 943, 950, 1120], "arg_min": [332, 339, 504, 944, 951, 1121], "arg_sort": [333, 945], "arg_tru": [334, 946], "arg_uniqu": [335, 947], "arr": [336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971], "contain": [340, 361, 506, 649, 952, 972, 1123, 1230], "count_match": [341, 507, 508, 651, 652, 953, 1124, 1125, 1232, 1233], "get": [344, 472, 516, 956, 1133], "to_list": [356, 968, 1299], "backward_fil": 360, "bin": [361, 362, 363, 364, 365, 972, 973, 974, 975, 976], "decod": [362, 653, 973, 1234], "encod": [363, 654, 974, 1235], "ends_with": [364, 655, 975, 1236], "starts_with": [365, 684, 976, 1265], "bottom_k_bi": 367, "cat": [369, 370, 979, 980, 981, 982, 983], "get_categori": [369, 979], "set_ord": [370, 981], "cbrt": [371, 984], "ceil": [372, 985], "clip": [373, 988], "clip_max": [374, 989], "clip_min": [375, 990], "co": [376, 992], "cosh": [377, 993], "cot": [378, 994], "cum_count": [380, 742], "cum_max": [381, 995], "cum_min": [382, 996], "cum_prod": [383, 997], "cum_sum": [384, 745, 998], "cumcount": 385, "cummax": [386, 999], "cummin": [387, 1000], "cumprod": [388, 1001], "cumsum": [389, 749, 1002], "cumulative_ev": [390, 1003], "cut": [391, 1004], "degre": 392, "deseri": [393, 837], "diff": [394, 509, 1006, 1126], "dot": [395, 1007], "drop_nan": [396, 1008], "dt": [398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064], "add_business_dai": [398, 1010], "base_utc_offset": [399, 1011], "cast_time_unit": [400, 1012], "centuri": [401, 1013], "combin": [402, 1014], "convert_time_zon": [403, 1015], "dai": [406, 407, 1018, 1019], "dst_offset": [408, 1020], "epoch": [409, 1021], "hour": [410, 411, 1022, 1023], "is_leap_year": [412, 1024], "iso_year": [413, 1025], "microsecond": [414, 415, 1029, 1030], "millennium": [416, 1031], "millisecond": [417, 418, 1032, 1033], "minut": [419, 420, 1035, 1036], "month": [421, 1037], "month_end": [422, 1038], "month_start": [423, 1039], "nanosecond": [424, 425, 1040, 1041], "offset_bi": [426, 1042], "ordinal_dai": [427, 1043], "quarter": [428, 1044], "replace_time_zon": [429, 1045], "round": [430, 630, 1046, 1206], "second": [431, 432, 1047, 1048], "strftime": [433, 1049], "timestamp": [435, 1051], "to_str": [436, 1052], "total_dai": [437, 1053], "total_hour": [438, 1054], "total_microsecond": [439, 1055], "total_millisecond": [440, 1056], "total_minut": [441, 1057], "total_nanosecond": [442, 1058], "total_second": [443, 1059], "truncat": [444, 1060], "week": [445, 1061], "weekdai": [446, 1062], "with_time_unit": [447, 1063], "year": [448, 1064], "entropi": [449, 1066], "eq": [450, 557], "eq_miss": 451, "ewm_mean": [452, 1069], "ewm_mean_bi": [453, 1070], "ewm_std": [454, 1071], "ewm_var": [455, 1072], "exclud": [456, 759], "exp": [457, 1073], "extend_const": [459, 1076], "flatten": 464, "floor": [465, 1081], "floordiv": 466, "forward_fil": 467, "from_json": 468, "gather": [469, 514, 1082, 1131], "ge": 471, "gt": 473, "hash": [474, 1086], "hist": [476, 1088], "implod": [477, 766, 1089], "inspect": [478, 856], "is_between": [480, 1092], "is_finit": [482, 1096], "is_first": [483, 1097], "is_first_distinct": [484, 1098], "is_in": [485, 1100], "is_infinit": [486, 1101], "is_last": [487, 1103], "is_last_distinct": [488, 1104], "is_nan": [489, 1105], "is_not": 490, "is_not_nan": [491, 1106], "is_not_nul": [492, 1107], "is_nul": [493, 1108], "keep_nam": 495, "kurtosi": [496, 1115], "le": 498, "eval": [511, 1128], "length": [521, 667, 1138, 1248], "set_differ": [529, 1146], "set_intersect": [530, 1147], "set_symmetric_differ": [531, 1148], "set_union": [532, 1149], "take": [539, 709, 1156, 1291], "to_arrai": [540, 1157], "log": [544, 1161], "log10": [545, 1162], "log1p": [546, 1163], "lower_bound": [547, 1164], "lt": 548, "map": [549, 574, 772, 863], "map_alia": 550, "map_batch": [551, 773, 864], "map_dict": [552, 1165], "map_el": [553, 1166], "meta": [557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 813], "has_multiple_output": 558, "is_regex_project": 559, "ne": [560, 584], "output_nam": 561, "pop": 562, "root_nam": 563, "serial": [564, 881], "tree_format": 565, "undo_alias": 566, "mod": 569, "mode": [570, 1171], "mul": 571, "name": [573, 574, 575, 576, 577, 578, 579, 580, 581, 808, 816, 1174], "keep": 573, "map_field": 575, "prefix": [576, 596], "prefix_field": 577, "suffix": [578, 706], "suffix_field": 579, "to_lowercas": [580, 697, 1278], "to_uppercas": [581, 700, 1281], "nan_max": [582, 1175], "nan_min": [583, 1176], "ne_miss": 585, "neg": 586, "not_": [587, 1178], "or_": 589, "over": 590, "pct_chang": [591, 1180], "peak_max": [592, 1181], "peak_min": [593, 1182], "pow": 595, "qcut": [598, 1184], "radian": 600, "rank": [601, 1186], "reinterpret": [603, 1188], "repeat_bi": 604, "reshap": [606, 1191], "rle": [608, 1193], "rle_id": [609, 1194], "rolling_appli": [611, 1195], "rolling_map": [612, 1196], "rolling_max": [613, 1197], "rolling_max_bi": 614, "rolling_mean": [615, 1198], "rolling_mean_bi": 616, "rolling_median": [617, 1199], "rolling_median_bi": 618, "rolling_min": [619, 1200], "rolling_min_bi": 620, "rolling_quantil": [621, 1201], "rolling_quantile_bi": 622, "rolling_skew": [623, 1202], "rolling_std": [624, 1203], "rolling_std_bi": 625, "rolling_sum": [626, 1204], "rolling_sum_bi": 627, "rolling_var": [628, 1205], "rolling_var_bi": 629, "round_sig_fig": [631, 1207], "search_sort": [633, 1210], "shrink_dtyp": [637, 1218], "shuffl": [638, 1220], "sign": [639, 1221], "sin": [640, 1222], "sinh": [641, 1223], "skew": [642, 1224], "sort_bi": 645, "sqrt": [646, 1227], "str": [648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282], "contains_ani": [650, 1231], "extract": [657, 1238], "extract_al": [658, 1239], "extract_group": [659, 1240], "find": [660, 1241], "json_decod": [662, 1243], "json_extract": [663, 1244], "json_path_match": [664, 1245], "len_byt": [665, 1246], "len_char": [666, 1247], "ljust": [668, 1249], "lstrip": [669, 1250], "n_char": [670, 1251], "pad_end": [671, 1252], "pad_start": [672, 1253], "parse_int": [673, 1254], "replace_al": [675, 1256], "replace_mani": [676, 1257], "rjust": [678, 1259], "rstrip": [679, 1260], "split": [681, 1262], "split_exact": [682, 1263], "splitn": [683, 1264], "strip": [685, 1266], "strip_char": [686, 1267], "strip_chars_end": [687, 1268], "strip_chars_start": [688, 1269], "strip_prefix": [689, 1270], "strip_suffix": [690, 1271], "strptime": [691, 1272], "to_dat": [693, 1274], "to_datetim": [694, 1275], "to_decim": [695, 1276], "to_integ": [696, 1277], "to_tim": [698, 1279], "to_titlecas": [699, 1280], "zfill": [701, 1282], "field": [702, 1283, 1284], "json_encod": [703, 1285], "rename_field": [704, 1286], "sub": 705, "tan": [711, 1293], "tanh": [712, 1294], "to_phys": [713, 1302], "top_k_bi": 715, "truediv": 716, "unique_count": [718, 1305], "upper_bound": [719, 1306], "value_count": [720, 1307], "where": 722, "xor": 723, "all_horizont": 725, "any_horizont": 727, "arang": 730, "arctan2": 731, "arctan2d": 732, "arg_sort_bi": 733, "arg_wher": 734, "business_day_count": 735, "coalesc": 736, "concat_list": 737, "concat_str": 738, "cov": 741, "cum_fold": 743, "cum_reduc": 744, "cum_sum_horizont": 746, "cumfold": 747, "cumreduc": 748, "cumsum_horizont": 750, "date_rang": [752, 753], "datetime_rang": [755, 756], "element": 758, "format": 762, "from_epoch": 763, "group": 764, "int_rang": [767, 768], "lit": 771, "nth": 783, "ones": 784, "reduc": 786, "repeat": 787, "rolling_corr": 788, "rolling_cov": 789, "sql_expr": 791, "time_rang": [798, 799], "when": 801, "zero": 802, "categori": [806, 1315], "col": 807, "express": 811, "oper": [817, 929], "conjunct": 817, "comparison": 817, "window": 821, "convers": 822, "parallel": 822, "random": 822, "python": 823, "refer": 823, "input": 824, "output": 824, "avro": 824, "clipboard": 824, "databas": 824, "delta": 824, "lake": 824, "excel": 824, "od": 824, "feather": 824, "ipc": 824, "iceberg": 824, "json": 824, "parquet": 824, "pyarrow": 824, "dataset": 824, "cach": 828, "collect": 832, "collect_async": 833, "explain": 841, "fetch": 843, "profil": [873, 1328], "show_graph": 885, "with_context": 901, "lazygroupbi": [904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920], "read": 925, "write": 925, "logic": 925, "plan": 925, "metadata": 927, "plugin": 928, "selector": 929, "import": 929, "set": [929, 1212], "is_loc": 980, "to_loc": 982, "uses_lexical_ord": 983, "chunk_length": 986, "get_chunk": 1084, "has_valid": 1085, "inner_dtyp": 1090, "is_boolean": 1093, "is_float": 1099, "is_integ": 1102, "is_numer": 1109, "is_sort": 1110, "is_tempor": 1111, "is_utf8": 1113, "new_from_index": 1177, "scatter": 1209, "series_equ": 1211, "set_at_idx": 1213, "to_fram": 1297, "view": 1309, "zip_with": 1310, "interfac": 1327, "method": 1327, "assert": 1328, "strategi": 1328, "helper": 1328}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"polars.DataFrame.group_by_dynamic": [[193, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.min_horizontal": [[225, "polars-dataframe-min-horizontal"]], "polars.DataFrame.fill_null": [[181, "polars-dataframe-fill-null"]], "polars.DataFrame.fill_nan": [[180, "polars-dataframe-fill-nan"]], "polars.DataFrame.groupby_dynamic": [[196, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.is_unique": [[207, "polars-dataframe-is-unique"]], "polars.DataFrame.max_horizontal": [[218, "polars-dataframe-max-horizontal"]], "polars.DataFrame.equals": [[176, "polars-dataframe-equals"]], "polars.DataFrame.iter_columns": [[209, "polars-dataframe-iter-columns"]], "polars.DataFrame.n_chunks": [[226, "polars-dataframe-n-chunks"]], "polars.DataFrame.hstack": [[201, "polars-dataframe-hstack"]], "polars.DataFrame.is_duplicated": [[205, "polars-dataframe-is-duplicated"]], "polars.DataFrame.item": [[208, "polars-dataframe-item"]], "polars.DataFrame.get_column": [[188, "polars-dataframe-get-column"]], "polars.DataFrame.get_columns": [[190, "polars-dataframe-get-columns"]], "polars.DataFrame.gather_every": [[187, "polars-dataframe-gather-every"]], "polars.DataFrame.interpolate": [[204, "polars-dataframe-interpolate"]], "polars.DataFrame.is_empty": [[206, "polars-dataframe-is-empty"]], "polars.DataFrame.extend": [[179, "polars-dataframe-extend"]], "polars.DataFrame.map_rows": [[216, "polars-dataframe-map-rows"]], "polars.DataFrame.filter": [[182, "polars-dataframe-filter"]], "polars.DataFrame.drop_nulls": [[174, "polars-dataframe-drop-nulls"]], "polars.DataFrame.group_by": [[192, "polars-dataframe-group-by"]], "polars.DataFrame.lazy": [[214, "polars-dataframe-lazy"]], "polars.DataFrame.median": [[221, "polars-dataframe-median"]], "polars.DataFrame.melt": [[222, "polars-dataframe-melt"]], "polars.DataFrame.insert_at_idx": [[202, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.hash_rows": [[198, "polars-dataframe-hash-rows"]], "polars.DataFrame.join": [[212, "polars-dataframe-join"]], "polars.DataFrame.estimated_size": [[177, "polars-dataframe-estimated-size"]], "polars.DataFrame.groupby_rolling": [[197, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.fold": [[185, "polars-dataframe-fold"]], "polars.DataFrame.groupby": [[195, "polars-dataframe-groupby"]], "polars.DataFrame.group_by_rolling": [[194, "polars-dataframe-group-by-rolling"]], "polars.DataFrame.min": [[224, "polars-dataframe-min"]], "polars.DataFrame.frame_equal": [[186, "polars-dataframe-frame-equal"]], "polars.DataFrame.iter_rows": [[210, "polars-dataframe-iter-rows"]], "polars.DataFrame.join_asof": [[213, "polars-dataframe-join-asof"]], "polars.DataFrame.describe": [[171, "polars-dataframe-describe"]], "polars.DataFrame.flags": [[184, "polars-dataframe-flags"]], "polars.DataFrame.drop": [[172, "polars-dataframe-drop"]], "polars.DataFrame.head": [[199, "polars-dataframe-head"]], "polars.DataFrame.limit": [[215, "polars-dataframe-limit"]], "polars.DataFrame.glimpse": [[191, "polars-dataframe-glimpse"]], "polars.DataFrame.mean": [[219, "polars-dataframe-mean"]], "polars.DataFrame.merge_sorted": [[223, "polars-dataframe-merge-sorted"]], "polars.DataFrame.insert_column": [[203, "polars-dataframe-insert-column"]], "polars.DataFrame.height": [[200, "polars-dataframe-height"]], "polars.DataFrame.explode": [[178, "polars-dataframe-explode"]], "polars.DataFrame.dtypes": [[175, "polars-dataframe-dtypes"]], "polars.DataFrame.get_column_index": [[189, "polars-dataframe-get-column-index"]], "polars.DataFrame.find_idx_by_name": [[183, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.iter_slices": [[211, "polars-dataframe-iter-slices"]], "polars.DataFrame.max": [[217, "polars-dataframe-max"]], "polars.DataFrame.n_unique": [[227, "polars-dataframe-n-unique"]], "polars.DataFrame.mean_horizontal": [[220, "polars-dataframe-mean-horizontal"]], "polars.DataFrame.drop_in_place": [[173, "polars-dataframe-drop-in-place"]], "polars.Config.set_decimal_separator": [[10, "polars-config-set-decimal-separator"]], "polars.Config.load_from_file": [[4, "polars-config-load-from-file"]], "polars.DataFrame.write_delta": [[36, "polars-dataframe-write-delta"]], "polars.Config.state": [[31, "polars-config-state"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [929, "examples"], [1323, "examples"], [1328, "examples"], [311, "examples"]], "polars.Config.set_tbl_column_data_type_inline": [[19, "polars-config-set-tbl-column-data-type-inline"]], "polars.Config.set_float_precision": [[11, "polars-config-set-float-precision"]], "polars.Config.set_fmt_str_lengths": [[13, "polars-config-set-fmt-str-lengths"]], "polars.StringCache": [[53, "polars-stringcache"]], "polars.Config.set_tbl_width_chars": [[27, "polars-config-set-tbl-width-chars"]], "polars.Config.set_tbl_hide_column_data_types": [[22, "polars-config-set-tbl-hide-column-data-types"]], "polars.DataFrame.write_avro": [[32, "polars-dataframe-write-avro"]], "polars.LazyFrame.sink_ipc": [[44, "polars-lazyframe-sink-ipc"]], "polars.SQLContext.unregister": [[52, "polars-sqlcontext-unregister"]], "polars.DataFrame.write_excel": [[37, "polars-dataframe-write-excel"]], "polars.SQLContext.execute": [[47, "polars-sqlcontext-execute"]], "polars.Config.load": [[3, "polars-config-load"]], "polars.Config.set_tbl_cell_alignment": [[16, "polars-config-set-tbl-cell-alignment"]], "polars.DataFrame.write_ipc": [[38, "polars-dataframe-write-ipc"]], "polars.DataFrame.write_ipc_stream": [[39, "polars-dataframe-write-ipc-stream"]], "polars.Config.set_trim_decimal_zeros": [[29, "polars-config-set-trim-decimal-zeros"]], "polars.Config.set_auto_structify": [[9, "polars-config-set-auto-structify"]], "polars.LazyFrame.sink_ndjson": [[45, "polars-lazyframe-sink-ndjson"]], "polars.Config.set_streaming_chunk_size": [[15, "polars-config-set-streaming-chunk-size"]], "polars.SQLContext.register_many": [[50, "polars-sqlcontext-register-many"]], "polars.Config.set_tbl_hide_column_names": [[23, "polars-config-set-tbl-hide-column-names"]], "polars.DataFrame.write_json": [[40, "polars-dataframe-write-json"]], "polars.align_frames": [[54, "polars-align-frames"]], "polars.SQLContext.register": [[48, "polars-sqlcontext-register"]], "polars.Config.set_tbl_cols": [[18, "polars-config-set-tbl-cols"]], "polars.Config.set_fmt_table_cell_list_len": [[14, "polars-config-set-fmt-table-cell-list-len"]], "polars.Config.set_tbl_cell_numeric_alignment": [[17, "polars-config-set-tbl-cell-numeric-alignment"]], "polars.Config.set_tbl_rows": [[26, "polars-config-set-tbl-rows"]], "polars.DataFrame.write_clipboard": [[33, "polars-dataframe-write-clipboard"]], "polars.DataFrame.write_csv": [[34, "polars-dataframe-write-csv"]], "polars.Config.restore_defaults": [[5, "polars-config-restore-defaults"]], "polars.Config.activate_decimals": [[2, "polars-config-activate-decimals"]], "polars.DataFrame.write_parquet": [[42, "polars-dataframe-write-parquet"]], "polars.api.register_expr_namespace": [[56, "polars-api-register-expr-namespace"]], "polars.Config.set_tbl_hide_dataframe_shape": [[24, "polars-config-set-tbl-hide-dataframe-shape"]], "Index": [[0, "index"]], "polars.Config.set_tbl_formatting": [[21, "polars-config-set-tbl-formatting"]], "polars.DataFrame.write_ndjson": [[41, "polars-dataframe-write-ndjson"]], "polars.api.register_dataframe_namespace": [[55, "polars-api-register-dataframe-namespace"]], "polars.SQLContext.tables": [[51, "polars-sqlcontext-tables"]], "polars.Config.set_ascii_tables": [[8, "polars-config-set-ascii-tables"]], "polars.Config.set_tbl_dataframe_shape_below": [[20, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.set_thousands_separator": [[28, "polars-config-set-thousands-separator"]], "polars.DataFrame.write_database": [[35, "polars-dataframe-write-database"]], "polars.Config.set_tbl_hide_dtype_separator": [[25, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.save_to_file": [[7, "polars-config-save-to-file"]], "polars.Config.set_verbose": [[30, "polars-config-set-verbose"]], "polars.Config.set_fmt_float": [[12, "polars-config-set-fmt-float"]], "polars.Config.save": [[6, "polars-config-save"]], "polars.LazyFrame.sink_csv": [[43, "polars-lazyframe-sink-csv"]], "polars.SQLContext.register_globals": [[49, "polars-sqlcontext-register-globals"]], "polars.LazyFrame.sink_parquet": [[46, "polars-lazyframe-sink-parquet"]], "polars.read_json": [[129, "polars-read-json"]], "polars.scan_iceberg": [[136, "polars-scan-iceberg"]], "polars.read_ndjson": [[130, "polars-read-ndjson"]], "polars.testing.parametric.load_profile": [[153, "polars-testing-parametric-load-profile"]], "polars.read_ipc_stream": [[128, "polars-read-ipc-stream"]], "polars.DataFrame.count": [[170, "polars-dataframe-count"]], "polars.DataFrame.__dataframe__": [[161, "polars-dataframe-dataframe"]], "polars.DataFrame.approx_n_unique": [[163, "polars-dataframe-approx-n-unique"]], "polars.show_versions": [[142, "polars-show-versions"]], "polars.read_database": [[122, "polars-read-database"]], "Config": [[159, "config"]], "Config options": [[159, "config-options"]], "Config load, save, state": [[159, "config-load-save-state"]], "Use as a context manager": [[159, "use-as-a-context-manager"]], "Use as a decorator": [[159, "use-as-a-decorator"]], "Aggregation": [[160, "aggregation"], [930, "aggregation"], [825, "aggregation"], [314, "aggregation"]], "polars.testing.parametric.column": [[147, "polars-testing-parametric-column"]], "polars.testing.parametric.columns": [[148, "polars-testing-parametric-columns"]], "polars.read_delta": [[124, "polars-read-delta"]], "polars.DataFrame.corr": [[169, "polars-dataframe-corr"]], "polars.read_ipc": [[126, "polars-read-ipc"]], "polars.from_repr": [[115, "polars-from-repr"]], "polars.scan_ipc": [[137, "polars-scan-ipc"]], "polars.threadpool_size": [[157, "polars-threadpool-size"]], "polars.testing.parametric.lists": [[152, "polars-testing-parametric-lists"]], "polars.set_random_seed": [[141, "polars-set-random-seed"]], "polars.DataFrame.cast": [[165, "polars-dataframe-cast"]], "polars.testing.assert_series_equal": [[145, "polars-testing-assert-series-equal"]], "polars.testing.assert_frame_equal": [[143, "polars-testing-assert-frame-equal"]], "polars.testing.parametric.dataframes": [[150, "polars-testing-parametric-dataframes"]], "polars.using_string_cache": [[158, "polars-using-string-cache"]], "polars.read_csv": [[120, "polars-read-csv"]], "polars.testing.parametric.set_profile": [[155, "polars-testing-parametric-set-profile"]], "polars.DataFrame.apply": [[162, "polars-dataframe-apply"]], "polars.DataFrame.columns": [[168, "polars-dataframe-columns"]], "polars.read_csv_batched": [[121, "polars-read-csv-batched"]], "polars.scan_ndjson": [[138, "polars-scan-ndjson"]], "polars.DataFrame.clone": [[167, "polars-dataframe-clone"]], "polars.read_database_uri": [[123, "polars-read-database-uri"]], "polars.testing.parametric.series": [[154, "polars-testing-parametric-series"]], "polars.testing.parametric.create_list_strategy": [[149, "polars-testing-parametric-create-list-strategy"]], "polars.read_parquet": [[132, "polars-read-parquet"]], "polars.read_avro": [[118, "polars-read-avro"]], "polars.from_records": [[114, "polars-from-records"]], "polars.read_excel": [[125, "polars-read-excel"]], "polars.testing.assert_series_not_equal": [[146, "polars-testing-assert-series-not-equal"]], "polars.read_clipboard": [[119, "polars-read-clipboard"]], "polars.scan_delta": [[135, "polars-scan-delta"]], "polars.read_ipc_schema": [[127, "polars-read-ipc-schema"]], "polars.scan_pyarrow_dataset": [[140, "polars-scan-pyarrow-dataset"]], "polars.testing.parametric.dtypes": [[151, "polars-testing-parametric-dtypes"]], "polars.scan_parquet": [[139, "polars-scan-parquet"]], "polars.DataFrame.bottom_k": [[164, "polars-dataframe-bottom-k"]], "polars.get_index_type": [[116, "polars-get-index-type"]], "polars.testing.assert_frame_not_equal": [[144, "polars-testing-assert-frame-not-equal"]], "polars.DataFrame.clear": [[166, "polars-dataframe-clear"]], "polars.scan_csv": [[134, "polars-scan-csv"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[117, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.read_ods": [[131, "polars-read-ods"]], "polars.read_parquet_schema": [[133, "polars-read-parquet-schema"]], "polars.thread_pool_size": [[156, "polars-thread-pool-size"]], "polars.Series.rolling_quantile": [[1201, "polars-series-rolling-quantile"]], "polars.Series.set": [[1212, "polars-series-set"]], "polars.Series.sign": [[1221, "polars-series-sign"]], "polars.Series.rolling_median": [[1199, "polars-series-rolling-median"]], "polars.Series.search_sorted": [[1210, "polars-series-search-sorted"]], "polars.Series.str.pad_start": [[1253, "polars-series-str-pad-start"]], "polars.Series.skew": [[1224, "polars-series-skew"]], "polars.Series.round_sig_figs": [[1207, "polars-series-round-sig-figs"]], "polars.Series.shrink_to_fit": [[1219, "polars-series-shrink-to-fit"]], "polars.Series.rolling_std": [[1203, "polars-series-rolling-std"]], "polars.Series.str.json_extract": [[1244, "polars-series-str-json-extract"]], "polars.Series.shrink_dtype": [[1218, "polars-series-shrink-dtype"]], "polars.Series.series_equal": [[1211, "polars-series-series-equal"]], "polars.Series.rolling_sum": [[1204, "polars-series-rolling-sum"]], "polars.Series.str.explode": [[1237, "polars-series-str-explode"]], "polars.Series.str.ends_with": [[1236, "polars-series-str-ends-with"]], "polars.Series.str.decode": [[1234, "polars-series-str-decode"]], "polars.Series.str.json_path_match": [[1245, "polars-series-str-json-path-match"]], "polars.Series.sin": [[1222, "polars-series-sin"]], "polars.Series.str.extract_all": [[1239, "polars-series-str-extract-all"]], "polars.Series.str.lstrip": [[1250, "polars-series-str-lstrip"]], "polars.Series.str.len_bytes": [[1246, "polars-series-str-len-bytes"]], "polars.Series.str.n_chars": [[1251, "polars-series-str-n-chars"]], "polars.Series.rolling_max": [[1197, "polars-series-rolling-max"]], "polars.Series.str.extract_groups": [[1240, "polars-series-str-extract-groups"]], "polars.Series.scatter": [[1209, "polars-series-scatter"]], "polars.Series.str.len_chars": [[1247, "polars-series-str-len-chars"]], "polars.Series.sinh": [[1223, "polars-series-sinh"]], "polars.Series.shift_and_fill": [[1217, "polars-series-shift-and-fill"]], "polars.Series.shuffle": [[1220, "polars-series-shuffle"]], "polars.Series.rolling_mean": [[1198, "polars-series-rolling-mean"]], "polars.Series.str.lengths": [[1248, "polars-series-str-lengths"]], "polars.Series.sort": [[1226, "polars-series-sort"]], "polars.Series.str.concat": [[1229, "polars-series-str-concat"]], "polars.Series.set_sorted": [[1214, "polars-series-set-sorted"]], "polars.Series.shape": [[1215, "polars-series-shape"]], "polars.Series.str.encode": [[1235, "polars-series-str-encode"]], "polars.Series.slice": [[1225, "polars-series-slice"]], "polars.Series.str.contains_any": [[1231, "polars-series-str-contains-any"]], "polars.Series.str.find": [[1241, "polars-series-str-find"]], "polars.Series.str.ljust": [[1249, "polars-series-str-ljust"]], "polars.Series.str.count_match": [[1232, "polars-series-str-count-match"]], "polars.Series.str.extract": [[1238, "polars-series-str-extract"]], "polars.Series.shift": [[1216, "polars-series-shift"]], "polars.Series.str.pad_end": [[1252, "polars-series-str-pad-end"]], "polars.Series.set_at_idx": [[1213, "polars-series-set-at-idx"]], "polars.Series.str.contains": [[1230, "polars-series-str-contains"]], "polars.Series.rolling_min": [[1200, "polars-series-rolling-min"]], "polars.Series.round": [[1206, "polars-series-round"]], "polars.Series.str.head": [[1242, "polars-series-str-head"]], "polars.Series.rolling_var": [[1205, "polars-series-rolling-var"]], "polars.Series.str.count_matches": [[1233, "polars-series-str-count-matches"]], "polars.Series.rolling_skew": [[1202, "polars-series-rolling-skew"]], "polars.Series.str.json_decode": [[1243, "polars-series-str-json-decode"]], "polars.Series.std": [[1228, "polars-series-std"]], "polars.Series.sample": [[1208, "polars-series-sample"]], "polars.Series.sqrt": [[1227, "polars-series-sqrt"]], "polars.Series.str.zfill": [[1282, "polars-series-str-zfill"]], "polars.Series.struct.json_encode": [[1285, "polars-series-struct-json-encode"]], "polars.Series.to_frame": [[1297, "polars-series-to-frame"]], "polars.Series.str.splitn": [[1264, "polars-series-str-splitn"]], "polars.Series.top_k": [[1303, "polars-series-top-k"]], "polars.Series.take": [[1291, "polars-series-take"]], "polars.Series.to_numpy": [[1300, "polars-series-to-numpy"]], "polars.Series.str.strip_chars_end": [[1268, "polars-series-str-strip-chars-end"]], "polars.Series.to_pandas": [[1301, "polars-series-to-pandas"]], "polars.Series.str.starts_with": [[1265, "polars-series-str-starts-with"]], "polars.Series.str.replace_all": [[1256, "polars-series-str-replace-all"]], "polars.Series.struct.fields": [[1284, "polars-series-struct-fields"]], "polars.Series.str.reverse": [[1258, "polars-series-str-reverse"]], "polars.Series.tan": [[1293, "polars-series-tan"]], "polars.Series.str.slice": [[1261, "polars-series-str-slice"]], "polars.Series.str.replace_many": [[1257, "polars-series-str-replace-many"]], "polars.Series.str.split": [[1262, "polars-series-str-split"]], "polars.Series.str.to_titlecase": [[1280, "polars-series-str-to-titlecase"]], "polars.Series.str.strip": [[1266, "polars-series-str-strip"]], "polars.Series.str.rjust": [[1259, "polars-series-str-rjust"]], "polars.Series.str.to_datetime": [[1275, "polars-series-str-to-datetime"]], "polars.Series.str.to_date": [[1274, "polars-series-str-to-date"]], "polars.Series.str.to_lowercase": [[1278, "polars-series-str-to-lowercase"]], "polars.Series.struct.field": [[1283, "polars-series-struct-field"]], "polars.Series.var": [[1308, "polars-series-var"]], "polars.Series.str.to_time": [[1279, "polars-series-str-to-time"]], "polars.Series.str.replace": [[1255, "polars-series-str-replace"]], "polars.Series.str.tail": [[1273, "polars-series-str-tail"]], "polars.Series.str.strptime": [[1272, "polars-series-str-strptime"]], "polars.Series.str.strip_prefix": [[1270, "polars-series-str-strip-prefix"]], "polars.Series.str.to_uppercase": [[1281, "polars-series-str-to-uppercase"]], "polars.Series.sum": [[1289, "polars-series-sum"]], "polars.Series.str.parse_int": [[1254, "polars-series-str-parse-int"]], "polars.Series.struct.unnest": [[1288, "polars-series-struct-unnest"]], "polars.Series.tail": [[1290, "polars-series-tail"]], "polars.Series.to_list": [[1299, "polars-series-to-list"]], "polars.Series.tanh": [[1294, "polars-series-tanh"]], "polars.Series.upper_bound": [[1306, "polars-series-upper-bound"]], "polars.Series.to_init_repr": [[1298, "polars-series-to-init-repr"]], "polars.Series.str.rstrip": [[1260, "polars-series-str-rstrip"]], "polars.Series.str.strip_chars_start": [[1269, "polars-series-str-strip-chars-start"]], "polars.Series.view": [[1309, "polars-series-view"]], "polars.Series.to_arrow": [[1295, "polars-series-to-arrow"]], "polars.Series.str.strip_chars": [[1267, "polars-series-str-strip-chars"]], "polars.Series.str.strip_suffix": [[1271, "polars-series-str-strip-suffix"]], "polars.Series.str.to_decimal": [[1276, "polars-series-str-to-decimal"]], "polars.Series.to_dummies": [[1296, "polars-series-to-dummies"]], "polars.Series.struct.schema": [[1287, "polars-series-struct-schema"]], "polars.Series.unique": [[1304, "polars-series-unique"]], "polars.Series.to_physical": [[1302, "polars-series-to-physical"]], "polars.Series.str.split_exact": [[1263, "polars-series-str-split-exact"]], "polars.Series.unique_counts": [[1305, "polars-series-unique-counts"]], "polars.Series.value_counts": [[1307, "polars-series-value-counts"]], "polars.Series.str.to_integer": [[1277, "polars-series-str-to-integer"]], "polars.Series.zip_with": [[1310, "polars-series-zip-with"]], "polars.Series.take_every": [[1292, "polars-series-take-every"]], "polars.Series.struct.rename_fields": [[1286, "polars-series-struct-rename-fields"]], "polars.Series.peak_max": [[1181, "polars-series-peak-max"]], "polars.Series.n_chunks": [[1172, "polars-series-n-chunks"]], "polars.Series.list.take": [[1156, "polars-series-list-take"]], "polars.Series.pct_change": [[1180, "polars-series-pct-change"]], "polars.Series.list.to_struct": [[1158, "polars-series-list-to-struct"]], "polars.Series.list.median": [[1141, "polars-series-list-median"]], "polars.Series.list.sum": [[1154, "polars-series-list-sum"]], "polars.Series.product": [[1183, "polars-series-product"]], "polars.Series.quantile": [[1185, "polars-series-quantile"]], "polars.Series.not_": [[1178, "polars-series-not"]], "polars.Series.max": [[1167, "polars-series-max"]], "polars.Series.log": [[1161, "polars-series-log"]], "polars.Series.peak_min": [[1182, "polars-series-peak-min"]], "polars.Series.list.reverse": [[1144, "polars-series-list-reverse"]], "polars.Series.reinterpret": [[1188, "polars-series-reinterpret"]], "polars.Series.list.set_symmetric_difference": [[1148, "polars-series-list-set-symmetric-difference"]], "polars.Series.list.set_intersection": [[1147, "polars-series-list-set-intersection"]], "polars.Series.lower_bound": [[1164, "polars-series-lower-bound"]], "polars.Series.rechunk": [[1187, "polars-series-rechunk"]], "polars.Series.list.tail": [[1155, "polars-series-list-tail"]], "polars.Series.list.n_unique": [[1143, "polars-series-list-n-unique"]], "polars.Series.name": [[1174, "polars-series-name"]], "polars.Series.nan_max": [[1175, "polars-series-nan-max"]], "polars.Series.list.unique": [[1159, "polars-series-list-unique"]], "polars.Series.qcut": [[1184, "polars-series-qcut"]], "polars.Series.mode": [[1171, "polars-series-mode"]], "polars.Series.rename": [[1189, "polars-series-rename"]], "polars.Series.rank": [[1186, "polars-series-rank"]], "polars.Series.list.min": [[1142, "polars-series-list-min"]], "polars.Series.reverse": [[1192, "polars-series-reverse"]], "polars.Series.log10": [[1162, "polars-series-log10"]], "polars.Series.list.mean": [[1140, "polars-series-list-mean"]], "polars.Series.list.slice": [[1151, "polars-series-list-slice"]], "polars.Series.rolling_map": [[1196, "polars-series-rolling-map"]], "polars.Series.reshape": [[1191, "polars-series-reshape"]], "polars.Series.min": [[1170, "polars-series-min"]], "polars.Series.rle_id": [[1194, "polars-series-rle-id"]], "polars.Series.replace": [[1190, "polars-series-replace"]], "polars.Series.log1p": [[1163, "polars-series-log1p"]], "polars.Series.nan_min": [[1176, "polars-series-nan-min"]], "polars.Series.null_count": [[1179, "polars-series-null-count"]], "polars.Series.list.to_array": [[1157, "polars-series-list-to-array"]], "polars.Series.map_dict": [[1165, "polars-series-map-dict"]], "polars.Series.map_elements": [[1166, "polars-series-map-elements"]], "polars.Series.rle": [[1193, "polars-series-rle"]], "polars.Series.list.shift": [[1150, "polars-series-list-shift"]], "polars.Series.list.sort": [[1152, "polars-series-list-sort"]], "polars.Series.list.set_difference": [[1146, "polars-series-list-set-difference"]], "polars.Series.list.set_union": [[1149, "polars-series-list-set-union"]], "polars.Series.median": [[1169, "polars-series-median"]], "polars.Series.list.var": [[1160, "polars-series-list-var"]], "polars.Series.rolling_apply": [[1195, "polars-series-rolling-apply"]], "polars.Series.list.std": [[1153, "polars-series-list-std"]], "polars.Series.new_from_index": [[1177, "polars-series-new-from-index"]], "polars.Series.mean": [[1168, "polars-series-mean"]], "polars.Series.list.sample": [[1145, "polars-series-list-sample"]], "polars.Series.n_unique": [[1173, "polars-series-n-unique"]], "polars.Series.is_infinite": [[1101, "polars-series-is-infinite"]], "polars.Series.gather_every": [[1083, "polars-series-gather-every"]], "polars.Series.list.diff": [[1126, "polars-series-list-diff"]], "polars.Series.is_between": [[1092, "polars-series-is-between"]], "polars.Series.hash": [[1086, "polars-series-hash"]], "polars.Series.is_float": [[1099, "polars-series-is-float"]], "polars.Series.is_first_distinct": [[1098, "polars-series-is-first-distinct"]], "polars.Series.list.count_matches": [[1125, "polars-series-list-count-matches"]], "polars.Series.is_not_null": [[1107, "polars-series-is-not-null"]], "polars.Series.list.explode": [[1129, "polars-series-list-explode"]], "polars.Series.list.gather_every": [[1132, "polars-series-list-gather-every"]], "polars.Series.is_not_nan": [[1106, "polars-series-is-not-nan"]], "polars.Series.is_duplicated": [[1094, "polars-series-is-duplicated"]], "polars.Series.interpolate": [[1091, "polars-series-interpolate"]], "polars.Series.is_integer": [[1102, "polars-series-is-integer"]], "polars.Series.is_empty": [[1095, "polars-series-is-empty"]], "polars.Series.is_null": [[1108, "polars-series-is-null"]], "polars.Series.len": [[1116, "polars-series-len"]], "polars.Series.limit": [[1117, "polars-series-limit"]], "polars.Series.list.join": [[1135, "polars-series-list-join"]], "polars.Series.item": [[1114, "polars-series-item"]], "polars.Series.get_chunks": [[1084, "polars-series-get-chunks"]], "polars.Series.is_finite": [[1096, "polars-series-is-finite"]], "polars.Series.is_first": [[1097, "polars-series-is-first"]], "polars.Series.has_validity": [[1085, "polars-series-has-validity"]], "polars.Series.is_numeric": [[1109, "polars-series-is-numeric"]], "polars.Series.list.any": [[1119, "polars-series-list-any"]], "polars.Series.list.last": [[1136, "polars-series-list-last"]], "polars.Series.list.max": [[1139, "polars-series-list-max"]], "polars.Series.is_boolean": [[1093, "polars-series-is-boolean"]], "polars.Series.list.arg_min": [[1121, "polars-series-list-arg-min"]], "polars.Series.is_nan": [[1105, "polars-series-is-nan"]], "polars.Series.list.get": [[1133, "polars-series-list-get"]], "polars.Series.list.eval": [[1128, "polars-series-list-eval"]], "polars.Series.list.head": [[1134, "polars-series-list-head"]], "polars.Series.list.first": [[1130, "polars-series-list-first"]], "polars.Series.inner_dtype": [[1090, "polars-series-inner-dtype"]], "polars.Series.is_last": [[1103, "polars-series-is-last"]], "polars.Series.is_last_distinct": [[1104, "polars-series-is-last-distinct"]], "polars.Series.list.concat": [[1122, "polars-series-list-concat"]], "polars.Series.list.len": [[1137, "polars-series-list-len"]], "polars.Series.is_utf8": [[1113, "polars-series-is-utf8"]], "polars.Series.implode": [[1089, "polars-series-implode"]], "polars.Series.kurtosis": [[1115, "polars-series-kurtosis"]], "polars.Series.list.count_match": [[1124, "polars-series-list-count-match"]], "polars.Series.hist": [[1088, "polars-series-hist"]], "polars.Series.list.all": [[1118, "polars-series-list-all"]], "polars.Series.list.drop_nulls": [[1127, "polars-series-list-drop-nulls"]], "polars.Series.list.gather": [[1131, "polars-series-list-gather"]], "polars.Series.list.lengths": [[1138, "polars-series-list-lengths"]], "polars.Series.is_in": [[1100, "polars-series-is-in"]], "polars.Series.list.contains": [[1123, "polars-series-list-contains"]], "polars.Series.is_sorted": [[1110, "polars-series-is-sorted"]], "polars.Series.is_temporal": [[1111, "polars-series-is-temporal"]], "polars.Series.list.arg_max": [[1120, "polars-series-list-arg-max"]], "polars.Series.is_unique": [[1112, "polars-series-is-unique"]], "polars.Series.head": [[1087, "polars-series-head"]], "polars.exceptions.ShapeError": [[105, "polars-exceptions-shapeerror"]], "polars.exceptions.PolarsPanicError": [[101, "polars-exceptions-polarspanicerror"]], "polars.datatypes.Int32": [[76, "polars-datatypes-int32"]], "polars.datatypes.Int8": [[78, "polars-datatypes-int8"]], "polars.datatypes.Array": [[63, "polars-datatypes-array"]], "polars.datatypes.Duration": [[71, "polars-datatypes-duration"]], "polars.exceptions.ArrowError": [[93, "polars-exceptions-arrowerror"]], "polars.enable_string_cache": [[92, "polars-enable-string-cache"]], "polars.datatypes.Object": [[81, "polars-datatypes-object"]], "polars.datatypes.Int64": [[77, "polars-datatypes-int64"]], "polars.exceptions.NoRowsReturnedError": [[99, "polars-exceptions-norowsreturnederror"]], "polars.datatypes.Float32": [[73, "polars-datatypes-float32"]], "polars.datatypes.List": [[79, "polars-datatypes-list"]], "polars.exceptions.ColumnNotFoundError": [[94, "polars-exceptions-columnnotfounderror"]], "polars.datatypes.Enum": [[72, "polars-datatypes-enum"]], "polars.exceptions.SchemaError": [[103, "polars-exceptions-schemaerror"]], "polars.collect_all_async": [[61, "polars-collect-all-async"]], "polars.build_info": [[59, "polars-build-info"]], "polars.from_pandas": [[113, "polars-from-pandas"]], "polars.api.register_series_namespace": [[58, "polars-api-register-series-namespace"]], "polars.exceptions.DuplicateError": [[96, "polars-exceptions-duplicateerror"]], "polars.concat": [[62, "polars-concat"]], "polars.datatypes.Boolean": [[65, "polars-datatypes-boolean"]], "polars.datatypes.UInt64": [[87, "polars-datatypes-uint64"]], "polars.datatypes.Float64": [[74, "polars-datatypes-float64"]], "polars.datatypes.Binary": [[64, "polars-datatypes-binary"]], "polars.datatypes.DataType": [[67, "polars-datatypes-datatype"]], "polars.datatypes.Time": [[84, "polars-datatypes-time"]], "polars.exceptions.TooManyRowsReturnedError": [[107, "polars-exceptions-toomanyrowsreturnederror"]], "polars.disable_string_cache": [[91, "polars-disable-string-cache"]], "polars.datatypes.UInt32": [[86, "polars-datatypes-uint32"]], "polars.exceptions.PolarsError": [[100, "polars-exceptions-polarserror"]], "polars.collect_all": [[60, "polars-collect-all"]], "polars.exceptions.SchemaFieldNotFoundError": [[104, "polars-exceptions-schemafieldnotfounderror"]], "polars.datatypes.String": [[82, "polars-datatypes-string"]], "polars.datatypes.Unknown": [[89, "polars-datatypes-unknown"]], "polars.exceptions.StructFieldNotFoundError": [[106, "polars-exceptions-structfieldnotfounderror"]], "polars.from_numpy": [[112, "polars-from-numpy"]], "polars.datatypes.UInt8": [[88, "polars-datatypes-uint8"]], "polars.datatypes.Utf8": [[90, "polars-datatypes-utf8"]], "polars.exceptions.InvalidOperationError": [[97, "polars-exceptions-invalidoperationerror"]], "polars.datatypes.Int16": [[75, "polars-datatypes-int16"]], "polars.datatypes.Date": [[68, "polars-datatypes-date"]], "polars.datatypes.Null": [[80, "polars-datatypes-null"]], "polars.datatypes.Decimal": [[70, "polars-datatypes-decimal"]], "polars.from_dataframe": [[109, "polars-from-dataframe"]], "polars.from_dict": [[110, "polars-from-dict"]], "polars.datatypes.Datetime": [[69, "polars-datatypes-datetime"]], "polars.exceptions.ComputeError": [[95, "polars-exceptions-computeerror"]], "polars.datatypes.Categorical": [[66, "polars-datatypes-categorical"]], "polars.exceptions.RowsError": [[102, "polars-exceptions-rowserror"]], "polars.from_dicts": [[111, "polars-from-dicts"]], "polars.datatypes.Struct": [[83, "polars-datatypes-struct"]], "polars.from_arrow": [[108, "polars-from-arrow"]], "polars.exceptions.NoDataError": [[98, "polars-exceptions-nodataerror"]], "polars.api.register_lazyframe_namespace": [[57, "polars-api-register-lazyframe-namespace"]], "polars.datatypes.UInt16": [[85, "polars-datatypes-uint16"]], "polars.Series.dt.month": [[1037, "polars-series-dt-month"]], "polars.Series.dt.weekday": [[1062, "polars-series-dt-weekday"]], "polars.Series.dt.truncate": [[1060, "polars-series-dt-truncate"]], "polars.Series.dt.microseconds": [[1030, "polars-series-dt-microseconds"]], "polars.Series.dt.millennium": [[1031, "polars-series-dt-millennium"]], "polars.Series.dt.max": [[1026, "polars-series-dt-max"]], "polars.Series.dt.seconds": [[1048, "polars-series-dt-seconds"]], "polars.Series.dt.nanoseconds": [[1041, "polars-series-dt-nanoseconds"]], "polars.Series.entropy": [[1066, "polars-series-entropy"]], "polars.Series.ewm_mean": [[1069, "polars-series-ewm-mean"]], "polars.Series.dt.time": [[1050, "polars-series-dt-time"]], "polars.Series.ewm_std": [[1071, "polars-series-ewm-std"]], "polars.Series.exp": [[1073, "polars-series-exp"]], "polars.Series.dt.to_string": [[1052, "polars-series-dt-to-string"]], "polars.Series.dt.millisecond": [[1032, "polars-series-dt-millisecond"]], "polars.Series.dt.with_time_unit": [[1063, "polars-series-dt-with-time-unit"]], "polars.Series.dt.week": [[1061, "polars-series-dt-week"]], "polars.Series.dt.year": [[1064, "polars-series-dt-year"]], "polars.Series.dt.total_nanoseconds": [[1058, "polars-series-dt-total-nanoseconds"]], "polars.Series.dt.milliseconds": [[1033, "polars-series-dt-milliseconds"]], "polars.Series.dt.month_end": [[1038, "polars-series-dt-month-end"]], "polars.Series.dt.strftime": [[1049, "polars-series-dt-strftime"]], "polars.Series.ewm_mean_by": [[1070, "polars-series-ewm-mean-by"]], "polars.Series.extend": [[1075, "polars-series-extend"]], "polars.Series.flags": [[1080, "polars-series-flags"]], "polars.Series.dt.timestamp": [[1051, "polars-series-dt-timestamp"]], "polars.Series.dt.second": [[1047, "polars-series-dt-second"]], "polars.Series.equals": [[1067, "polars-series-equals"]], "polars.Series.dt.median": [[1028, "polars-series-dt-median"]], "polars.Series.dt.round": [[1046, "polars-series-dt-round"]], "polars.Series.dt.total_microseconds": [[1055, "polars-series-dt-total-microseconds"]], "polars.Series.fill_null": [[1078, "polars-series-fill-null"]], "polars.Series.dt.quarter": [[1044, "polars-series-dt-quarter"]], "polars.Series.dt.total_hours": [[1054, "polars-series-dt-total-hours"]], "polars.Series.estimated_size": [[1068, "polars-series-estimated-size"]], "polars.Series.dt.total_days": [[1053, "polars-series-dt-total-days"]], "polars.Series.dt.minute": [[1035, "polars-series-dt-minute"]], "polars.Series.dt.microsecond": [[1029, "polars-series-dt-microsecond"]], "polars.Series.dt.total_seconds": [[1059, "polars-series-dt-total-seconds"]], "polars.Series.dt.offset_by": [[1042, "polars-series-dt-offset-by"]], "polars.Series.fill_nan": [[1077, "polars-series-fill-nan"]], "polars.Series.explode": [[1074, "polars-series-explode"]], "polars.Series.dt.min": [[1034, "polars-series-dt-min"]], "polars.Series.dt.month_start": [[1039, "polars-series-dt-month-start"]], "polars.Series.gather": [[1082, "polars-series-gather"]], "polars.Series.dt.replace_time_zone": [[1045, "polars-series-dt-replace-time-zone"]], "polars.Series.ewm_var": [[1072, "polars-series-ewm-var"]], "polars.Series.dt.minutes": [[1036, "polars-series-dt-minutes"]], "polars.Series.filter": [[1079, "polars-series-filter"]], "polars.Series.extend_constant": [[1076, "polars-series-extend-constant"]], "polars.Series.floor": [[1081, "polars-series-floor"]], "polars.Series.dt.total_milliseconds": [[1056, "polars-series-dt-total-milliseconds"]], "polars.Series.dt.ordinal_day": [[1043, "polars-series-dt-ordinal-day"]], "polars.Series.dtype": [[1065, "polars-series-dtype"]], "polars.Series.dt.nanosecond": [[1040, "polars-series-dt-nanosecond"]], "polars.Series.dt.mean": [[1027, "polars-series-dt-mean"]], "polars.Series.dt.total_minutes": [[1057, "polars-series-dt-total-minutes"]], "polars.Series.cat.to_local": [[982, "polars-series-cat-to-local"]], "polars.Series.chunk_lengths": [[986, "polars-series-chunk-lengths"]], "polars.Series.drop_nans": [[1008, "polars-series-drop-nans"]], "polars.Series.cumsum": [[1002, "polars-series-cumsum"]], "polars.Series.cummin": [[1000, "polars-series-cummin"]], "polars.Series.describe": [[1005, "polars-series-describe"]], "polars.Series.cat.set_ordering": [[981, "polars-series-cat-set-ordering"]], "polars.Series.dt.days": [[1019, "polars-series-dt-days"]], "polars.Series.dt.hour": [[1022, "polars-series-dt-hour"]], "polars.Series.bin.starts_with": [[976, "polars-series-bin-starts-with"]], "polars.Series.arr.var": [[971, "polars-series-arr-var"]], "polars.Series.cot": [[994, "polars-series-cot"]], "polars.Series.dot": [[1007, "polars-series-dot"]], "polars.Series.cosh": [[993, "polars-series-cosh"]], "polars.Series.cast": [[978, "polars-series-cast"]], "polars.Series.cat.is_local": [[980, "polars-series-cat-is-local"]], "polars.Series.dt.day": [[1018, "polars-series-dt-day"]], "polars.Series.diff": [[1006, "polars-series-diff"]], "polars.Series.arr.unique": [[970, "polars-series-arr-unique"]], "polars.Series.dt.convert_time_zone": [[1015, "polars-series-dt-convert-time-zone"]], "polars.Series.bin.ends_with": [[975, "polars-series-bin-ends-with"]], "polars.Series.clip": [[988, "polars-series-clip"]], "polars.Series.bin.contains": [[972, "polars-series-bin-contains"]], "polars.Series.clip_max": [[989, "polars-series-clip-max"]], "polars.Series.dt.date": [[1016, "polars-series-dt-date"]], "polars.Series.cummax": [[999, "polars-series-cummax"]], "polars.Series.cos": [[992, "polars-series-cos"]], "polars.Series.dt.epoch": [[1021, "polars-series-dt-epoch"]], "polars.Series.dt.combine": [[1014, "polars-series-dt-combine"]], "polars.Series.cbrt": [[984, "polars-series-cbrt"]], "polars.Series.dt.cast_time_unit": [[1012, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.hours": [[1023, "polars-series-dt-hours"]], "polars.Series.clear": [[987, "polars-series-clear"]], "polars.Series.cum_min": [[996, "polars-series-cum-min"]], "polars.Series.arr.to_struct": [[969, "polars-series-arr-to-struct"]], "polars.Series.ceil": [[985, "polars-series-ceil"]], "polars.Series.bin.encode": [[974, "polars-series-bin-encode"]], "polars.Series.clone": [[991, "polars-series-clone"]], "polars.Series.cum_max": [[995, "polars-series-cum-max"]], "polars.Series.cum_prod": [[997, "polars-series-cum-prod"]], "polars.Series.dt.base_utc_offset": [[1011, "polars-series-dt-base-utc-offset"]], "polars.Series.dt.century": [[1013, "polars-series-dt-century"]], "polars.Series.cut": [[1004, "polars-series-cut"]], "polars.Series.bottom_k": [[977, "polars-series-bottom-k"]], "polars.Series.cumprod": [[1001, "polars-series-cumprod"]], "polars.Series.dt.dst_offset": [[1020, "polars-series-dt-dst-offset"]], "polars.Series.clip_min": [[990, "polars-series-clip-min"]], "polars.Series.dt.is_leap_year": [[1024, "polars-series-dt-is-leap-year"]], "polars.Series.dt.add_business_days": [[1010, "polars-series-dt-add-business-days"]], "polars.Series.cat.uses_lexical_ordering": [[983, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.cum_sum": [[998, "polars-series-cum-sum"]], "polars.Series.cumulative_eval": [[1003, "polars-series-cumulative-eval"]], "polars.Series.dt.iso_year": [[1025, "polars-series-dt-iso-year"]], "polars.Series.bin.decode": [[973, "polars-series-bin-decode"]], "polars.Series.cat.get_categories": [[979, "polars-series-cat-get-categories"]], "polars.Series.dt.datetime": [[1017, "polars-series-dt-datetime"]], "polars.Series.drop_nulls": [[1009, "polars-series-drop-nulls"]], "polars.LazyFrame.interpolate": [[857, "polars-lazyframe-interpolate"]], "polars.LazyFrame.min": [[870, "polars-lazyframe-min"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[909, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.LazyFrame.rename": [[875, "polars-lazyframe-rename"]], "polars.LazyFrame.median": [[867, "polars-lazyframe-median"]], "polars.LazyFrame.select": [[879, "polars-lazyframe-select"]], "polars.LazyFrame.unnest": [[895, "polars-lazyframe-unnest"]], "polars.LazyFrame.select_seq": [[880, "polars-lazyframe-select-seq"]], "polars.LazyFrame.sql": [[888, "polars-lazyframe-sql"]], "polars.LazyFrame.map_batches": [[864, "polars-lazyframe-map-batches"]], "polars.LazyFrame.var": [[897, "polars-lazyframe-var"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[907, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.LazyFrame.melt": [[868, "polars-lazyframe-melt"]], "polars.LazyFrame.top_k": [[893, "polars-lazyframe-top-k"]], "polars.LazyFrame.with_columns_seq": [[900, "polars-lazyframe-with-columns-seq"]], "polars.LazyFrame.slice": [[886, "polars-lazyframe-slice"]], "polars.LazyFrame.unique": [[894, "polars-lazyframe-unique"]], "polars.LazyFrame.rolling": [[877, "polars-lazyframe-rolling"]], "polars.LazyFrame.with_row_count": [[902, "polars-lazyframe-with-row-count"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[904, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[910, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.LazyFrame.show_graph": [[885, "polars-lazyframe-show-graph"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[908, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.LazyFrame.update": [[896, "polars-lazyframe-update"]], "polars.LazyFrame.take_every": [[892, "polars-lazyframe-take-every"]], "polars.lazyframe.group_by.LazyGroupBy.len": [[911, "polars-lazyframe-group-by-lazygroupby-len"]], "polars.LazyFrame.map": [[863, "polars-lazyframe-map"]], "polars.LazyFrame.schema": [[878, "polars-lazyframe-schema"]], "polars.LazyFrame.mean": [[866, "polars-lazyframe-mean"]], "polars.lazyframe.group_by.LazyGroupBy.apply": [[906, "polars-lazyframe-group-by-lazygroupby-apply"]], "polars.LazyFrame.head": [[855, "polars-lazyframe-head"]], "polars.LazyFrame.shift": [[883, "polars-lazyframe-shift"]], "polars.LazyFrame.with_row_index": [[903, "polars-lazyframe-with-row-index"]], "polars.LazyFrame.shift_and_fill": [[884, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.with_context": [[901, "polars-lazyframe-with-context"]], "polars.LazyFrame.set_sorted": [[882, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.profile": [[873, "polars-lazyframe-profile"]], "polars.LazyFrame.limit": [[862, "polars-lazyframe-limit"]], "polars.LazyFrame.quantile": [[874, "polars-lazyframe-quantile"]], "polars.LazyFrame.std": [[889, "polars-lazyframe-std"]], "polars.LazyFrame.null_count": [[871, "polars-lazyframe-null-count"]], "polars.LazyFrame.inspect": [[856, "polars-lazyframe-inspect"]], "polars.LazyFrame.pipe": [[872, "polars-lazyframe-pipe"]], "polars.LazyFrame.width": [[898, "polars-lazyframe-width"]], "polars.LazyFrame.join": [[858, "polars-lazyframe-join"]], "polars.LazyFrame.merge_sorted": [[869, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.lazy": [[861, "polars-lazyframe-lazy"]], "polars.LazyFrame.max": [[865, "polars-lazyframe-max"]], "polars.LazyFrame.serialize": [[881, "polars-lazyframe-serialize"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[905, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.LazyFrame.reverse": [[876, "polars-lazyframe-reverse"]], "polars.LazyFrame.tail": [[891, "polars-lazyframe-tail"]], "polars.LazyFrame.join_asof": [[859, "polars-lazyframe-join-asof"]], "polars.LazyFrame.sum": [[890, "polars-lazyframe-sum"]], "polars.LazyFrame.with_columns": [[899, "polars-lazyframe-with-columns"]], "polars.LazyFrame.last": [[860, "polars-lazyframe-last"]], "polars.LazyFrame.sort": [[887, "polars-lazyframe-sort"]], "polars.select": [[790, "polars-select"]], "polars.quantile": [[785, "polars-quantile"]], "polars.rolling_corr": [[788, "polars-rolling-corr"]], "polars.cumsum_horizontal": [[750, "polars-cumsum-horizontal"]], "polars.time": [[797, "polars-time"]], "polars.cumfold": [[747, "polars-cumfold"]], "polars.cum_fold": [[743, "polars-cum-fold"]], "polars.cum_sum": [[745, "polars-cum-sum"]], "polars.date_ranges": [[753, "polars-date-ranges"]], "polars.min": [[780, "polars-min"]], "polars.lit": [[771, "polars-lit"]], "polars.fold": [[761, "polars-fold"]], "polars.first": [[760, "polars-first"]], "polars.map_groups": [[774, "polars-map-groups"]], "polars.std": [[792, "polars-std"]], "polars.element": [[758, "polars-element"]], "polars.cum_reduce": [[744, "polars-cum-reduce"]], "polars.sql_expr": [[791, "polars-sql-expr"]], "polars.mean": [[777, "polars-mean"]], "polars.cov": [[741, "polars-cov"]], "polars.min_horizontal": [[781, "polars-min-horizontal"]], "polars.sum_horizontal": [[795, "polars-sum-horizontal"]], "polars.format": [[762, "polars-format"]], "polars.head": [[765, "polars-head"]], "polars.exclude": [[759, "polars-exclude"]], "polars.date": [[751, "polars-date"]], "polars.len": [[770, "polars-len"]], "polars.sum": [[794, "polars-sum"]], "polars.n_unique": [[782, "polars-n-unique"]], "polars.cum_count": [[742, "polars-cum-count"]], "polars.ones": [[784, "polars-ones"]], "polars.cumsum": [[749, "polars-cumsum"]], "polars.duration": [[757, "polars-duration"]], "polars.max_horizontal": [[776, "polars-max-horizontal"]], "polars.median": [[779, "polars-median"]], "polars.last": [[769, "polars-last"]], "polars.map": [[772, "polars-map"]], "polars.datetime_range": [[755, "polars-datetime-range"]], "polars.int_ranges": [[768, "polars-int-ranges"]], "polars.cum_sum_horizontal": [[746, "polars-cum-sum-horizontal"]], "polars.groups": [[764, "polars-groups"]], "polars.max": [[775, "polars-max"]], "polars.mean_horizontal": [[778, "polars-mean-horizontal"]], "polars.datetime_ranges": [[756, "polars-datetime-ranges"]], "polars.tail": [[796, "polars-tail"]], "polars.rolling_cov": [[789, "polars-rolling-cov"]], "polars.date_range": [[752, "polars-date-range"]], "polars.datetime": [[754, "polars-datetime"]], "polars.repeat": [[787, "polars-repeat"]], "polars.cumreduce": [[748, "polars-cumreduce"]], "polars.from_epoch": [[763, "polars-from-epoch"]], "polars.struct": [[793, "polars-struct"]], "polars.map_batches": [[773, "polars-map-batches"]], "polars.reduce": [[786, "polars-reduce"]], "polars.implode": [[766, "polars-implode"]], "polars.int_range": [[767, "polars-int-range"]], "polars.nth": [[783, "polars-nth"]], "polars.Expr.str.strip_suffix": [[690, "polars-expr-str-strip-suffix"]], "polars.Expr.str.to_titlecase": [[699, "polars-expr-str-to-titlecase"]], "polars.Expr.str.to_time": [[698, "polars-expr-str-to-time"]], "polars.Expr.str.strptime": [[691, "polars-expr-str-strptime"]], "polars.Expr.str.to_decimal": [[695, "polars-expr-str-to-decimal"]], "polars.Expr.unique_counts": [[718, "polars-expr-unique-counts"]], "polars.business_day_count": [[735, "polars-business-day-count"]], "polars.all": [[724, "polars-all"]], "polars.apply": [[728, "polars-apply"]], "polars.any": [[726, "polars-any"]], "polars.arctan2": [[731, "polars-arctan2"]], "polars.Expr.sub": [[705, "polars-expr-sub"]], "polars.approx_n_unique": [[729, "polars-approx-n-unique"]], "polars.arctan2d": [[732, "polars-arctan2d"]], "polars.concat_list": [[737, "polars-concat-list"]], "polars.Expr.top_k_by": [[715, "polars-expr-top-k-by"]], "polars.Expr.truediv": [[716, "polars-expr-truediv"]], "polars.Expr.to_physical": [[713, "polars-expr-to-physical"]], "polars.Expr.take_every": [[710, "polars-expr-take-every"]], "polars.Expr.str.to_integer": [[696, "polars-expr-str-to-integer"]], "polars.Expr.upper_bound": [[719, "polars-expr-upper-bound"]], "polars.Expr.str.starts_with": [[684, "polars-expr-str-starts-with"]], "polars.Expr.unique": [[717, "polars-expr-unique"]], "polars.Expr.take": [[709, "polars-expr-take"]], "polars.Expr.struct.json_encode": [[703, "polars-expr-struct-json-encode"]], "polars.Expr.str.strip_chars": [[686, "polars-expr-str-strip-chars"]], "polars.Expr.str.strip": [[685, "polars-expr-str-strip"]], "polars.Expr.str.to_datetime": [[694, "polars-expr-str-to-datetime"]], "polars.arange": [[730, "polars-arange"]], "polars.Expr.struct.rename_fields": [[704, "polars-expr-struct-rename-fields"]], "polars.Expr.suffix": [[706, "polars-expr-suffix"]], "polars.arg_where": [[734, "polars-arg-where"]], "polars.Expr.sum": [[707, "polars-expr-sum"]], "polars.Expr.str.strip_chars_end": [[687, "polars-expr-str-strip-chars-end"]], "polars.Expr.str.strip_prefix": [[689, "polars-expr-str-strip-prefix"]], "polars.Expr.where": [[722, "polars-expr-where"]], "polars.Expr.tan": [[711, "polars-expr-tan"]], "polars.Expr.str.to_uppercase": [[700, "polars-expr-str-to-uppercase"]], "polars.Expr.tanh": [[712, "polars-expr-tanh"]], "polars.Expr.struct.field": [[702, "polars-expr-struct-field"]], "polars.count": [[740, "polars-count"]], "polars.arg_sort_by": [[733, "polars-arg-sort-by"]], "polars.Expr.str.strip_chars_start": [[688, "polars-expr-str-strip-chars-start"]], "polars.Expr.var": [[721, "polars-expr-var"]], "polars.any_horizontal": [[727, "polars-any-horizontal"]], "polars.Expr.value_counts": [[720, "polars-expr-value-counts"]], "polars.Expr.top_k": [[714, "polars-expr-top-k"]], "polars.Expr.tail": [[708, "polars-expr-tail"]], "polars.concat_str": [[738, "polars-concat-str"]], "polars.Expr.str.tail": [[692, "polars-expr-str-tail"]], "polars.Expr.str.zfill": [[701, "polars-expr-str-zfill"]], "polars.coalesce": [[736, "polars-coalesce"]], "polars.corr": [[739, "polars-corr"]], "polars.Expr.xor": [[723, "polars-expr-xor"]], "polars.Expr.str.to_lowercase": [[697, "polars-expr-str-to-lowercase"]], "polars.all_horizontal": [[725, "polars-all-horizontal"]], "polars.Expr.str.to_date": [[693, "polars-expr-str-to-date"]], "Attributes": [[921, "attributes"], [1312, "attributes"], [303, "attributes"]], "polars.Series.arr.median": [[960, "polars-series-arr-median"]], "Descriptive": [[922, "descriptive"], [1317, "descriptive"], [305, "descriptive"]], "polars.Series.abs": [[931, "polars-series-abs"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[913, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.Series.arr.get": [[956, "polars-series-arr-get"]], "polars.Series.arcsinh": [[940, "polars-series-arcsinh"]], "Metadata": [[927, "metadata"]], "polars.Series.arr.first": [[955, "polars-series-arr-first"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[918, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[917, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "Manipulation/selection": [[926, "manipulation-selection"], [1322, "manipulation-selection"], [815, "manipulation-selection"], [310, "manipulation-selection"]], "polars.Series.arr.shift": [[964, "polars-series-arr-shift"]], "polars.Series.arg_min": [[944, "polars-series-arg-min"]], "polars.Series.arr.to_list": [[968, "polars-series-arr-to-list"]], "polars.Series.alias": [[932, "polars-series-alias"]], "GroupBy": [[923, "groupby"], [307, "groupby"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[915, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.Series.arr.arg_min": [[951, "polars-series-arr-arg-min"]], "Plugins": [[928, "plugins"]], "Selectors": [[929, "selectors"]], "Importing": [[929, "importing"]], "Set operations": [[929, "set-operations"]], "Functions": [[929, "functions"], [822, "functions"], [810, "functions"]], "polars.Series.arg_true": [[946, "polars-series-arg-true"]], "polars.Series.arctanh": [[942, "polars-series-arctanh"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[919, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.Series.arccosh": [[938, "polars-series-arccosh"]], "polars.Series.arg_sort": [[945, "polars-series-arg-sort"]], "Miscellaneous": [[925, "miscellaneous"], [1321, "miscellaneous"], [822, "miscellaneous"], [814, "miscellaneous"], [309, "miscellaneous"]], "Read/write logical plan": [[925, "read-write-logical-plan"]], "polars.Series.arccos": [[937, "polars-series-arccos"]], "polars.Series.arr.count_matches": [[953, "polars-series-arr-count-matches"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[912, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.Series.arr.all": [[948, "polars-series-arr-all"]], "polars.Series.arr.last": [[958, "polars-series-arr-last"]], "polars.Series.arr.any": [[949, "polars-series-arr-any"]], "polars.Series.arr.n_unique": [[962, "polars-series-arr-n-unique"]], "polars.Series.arr.reverse": [[963, "polars-series-arr-reverse"]], "polars.Series.arr.sum": [[967, "polars-series-arr-sum"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[914, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.Series.arr.sort": [[965, "polars-series-arr-sort"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[916, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.Series.apply": [[936, "polars-series-apply"]], "polars.Series.all": [[933, "polars-series-all"]], "polars.Series.arg_unique": [[947, "polars-series-arg-unique"]], "polars.Series.arr.contains": [[952, "polars-series-arr-contains"]], "polars.Series.arctan": [[941, "polars-series-arctan"]], "polars.Series.arg_max": [[943, "polars-series-arg-max"]], "polars.Series.arcsin": [[939, "polars-series-arcsin"]], "polars.Series.arr.min": [[961, "polars-series-arr-min"]], "LazyFrame": [[924, "lazyframe"]], "polars.Series.arr.max": [[959, "polars-series-arr-max"]], "polars.Series.arr.join": [[957, "polars-series-arr-join"]], "polars.Series.arr.std": [[966, "polars-series-arr-std"]], "polars.Series.any": [[934, "polars-series-any"]], "polars.Series.arr.explode": [[954, "polars-series-arr-explode"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[920, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.Series.append": [[935, "polars-series-append"]], "polars.Series.arr.arg_max": [[950, "polars-series-arr-arg-max"]], "Temporal": [[1326, "temporal"], [820, "temporal"], [312, "temporal"]], "Plot": [[1323, "plot"], [311, "plot"]], "Binary": [[1313, "binary"], [817, "binary"], [804, "binary"]], "List": [[1320, "list"], [812, "list"]], "Struct": [[1325, "struct"], [819, "struct"]], "Testing": [[1328, "testing"]], "Asserts": [[1328, "asserts"]], "Parametric testing": [[1328, "parametric-testing"]], "Polars strategies": [[1328, "polars-strategies"]], "Strategy helpers": [[1328, "strategy-helpers"]], "Profiles": [[1328, "profiles"]], "Computation": [[1316, "computation"], [809, "computation"], [304, "computation"]], "Categories": [[1315, "categories"], [806, "categories"]], "Series": [[1319, "series"]], "String": [[1324, "string"], [818, "string"], [312, "string"]], "Array": [[1311, "array"], [803, "array"]], "Boolean": [[1314, "boolean"], [805, "boolean"]], "SQL Interface": [[1327, "sql-interface"]], "Methods": [[1327, "methods"]], "Export": [[1318, "export"], [306, "export"]], "polars.Expr.str.extract": [[657, "polars-expr-str-extract"]], "polars.Expr.search_sorted": [[633, "polars-expr-search-sorted"]], "polars.Expr.rolling_sum_by": [[627, "polars-expr-rolling-sum-by"]], "polars.Expr.str.rstrip": [[679, "polars-expr-str-rstrip"]], "polars.Expr.str.json_path_match": [[664, "polars-expr-str-json-path-match"]], "polars.Expr.round": [[630, "polars-expr-round"]], "polars.Expr.str.count_matches": [[652, "polars-expr-str-count-matches"]], "polars.Expr.shift_and_fill": [[636, "polars-expr-shift-and-fill"]], "polars.Expr.std": [[647, "polars-expr-std"]], "polars.Expr.str.reverse": [[677, "polars-expr-str-reverse"]], "polars.Expr.str.lengths": [[667, "polars-expr-str-lengths"]], "polars.Expr.str.count_match": [[651, "polars-expr-str-count-match"]], "polars.Expr.str.splitn": [[683, "polars-expr-str-splitn"]], "polars.Expr.str.decode": [[653, "polars-expr-str-decode"]], "polars.Expr.str.replace": [[674, "polars-expr-str-replace"]], "polars.Expr.rolling_var_by": [[629, "polars-expr-rolling-var-by"]], "polars.Expr.shuffle": [[638, "polars-expr-shuffle"]], "polars.Expr.skew": [[642, "polars-expr-skew"]], "polars.Expr.round_sig_figs": [[631, "polars-expr-round-sig-figs"]], "polars.Expr.str.contains": [[649, "polars-expr-str-contains"]], "polars.Expr.str.len_bytes": [[665, "polars-expr-str-len-bytes"]], "polars.Expr.str.ljust": [[668, "polars-expr-str-ljust"]], "polars.Expr.str.n_chars": [[670, "polars-expr-str-n-chars"]], "polars.Expr.slice": [[643, "polars-expr-slice"]], "polars.Expr.sort_by": [[645, "polars-expr-sort-by"]], "polars.Expr.sqrt": [[646, "polars-expr-sqrt"]], "polars.Expr.str.head": [[661, "polars-expr-str-head"]], "polars.Expr.str.replace_all": [[675, "polars-expr-str-replace-all"]], "polars.Expr.str.slice": [[680, "polars-expr-str-slice"]], "polars.Expr.str.split_exact": [[682, "polars-expr-str-split-exact"]], "polars.Expr.sign": [[639, "polars-expr-sign"]], "polars.Expr.str.json_extract": [[663, "polars-expr-str-json-extract"]], "polars.Expr.str.explode": [[656, "polars-expr-str-explode"]], "polars.Expr.str.pad_end": [[671, "polars-expr-str-pad-end"]], "polars.Expr.str.find": [[660, "polars-expr-str-find"]], "polars.Expr.str.lstrip": [[669, "polars-expr-str-lstrip"]], "polars.Expr.sort": [[644, "polars-expr-sort"]], "polars.Expr.sin": [[640, "polars-expr-sin"]], "polars.Expr.str.encode": [[654, "polars-expr-str-encode"]], "polars.Expr.str.json_decode": [[662, "polars-expr-str-json-decode"]], "polars.Expr.shift": [[635, "polars-expr-shift"]], "polars.Expr.rolling_var": [[628, "polars-expr-rolling-var"]], "polars.Expr.str.extract_groups": [[659, "polars-expr-str-extract-groups"]], "polars.Expr.str.parse_int": [[673, "polars-expr-str-parse-int"]], "polars.Expr.str.replace_many": [[676, "polars-expr-str-replace-many"]], "polars.Expr.sample": [[632, "polars-expr-sample"]], "polars.Expr.sinh": [[641, "polars-expr-sinh"]], "polars.Expr.str.extract_all": [[658, "polars-expr-str-extract-all"]], "polars.Expr.str.ends_with": [[655, "polars-expr-str-ends-with"]], "polars.Expr.str.len_chars": [[666, "polars-expr-str-len-chars"]], "polars.Expr.str.pad_start": [[672, "polars-expr-str-pad-start"]], "polars.Expr.str.rjust": [[678, "polars-expr-str-rjust"]], "polars.Expr.shrink_dtype": [[637, "polars-expr-shrink-dtype"]], "polars.Expr.str.concat": [[648, "polars-expr-str-concat"]], "polars.Expr.str.split": [[681, "polars-expr-str-split"]], "polars.Expr.set_sorted": [[634, "polars-expr-set-sorted"]], "polars.Expr.str.contains_any": [[650, "polars-expr-str-contains-any"]], "polars.Expr.list.get": [[516, "polars-expr-list-get"]], "polars.Expr.list.join": [[518, "polars-expr-list-join"]], "polars.Expr.map_alias": [[550, "polars-expr-map-alias"]], "polars.Expr.meta.has_multiple_outputs": [[558, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.list.set_difference": [[529, "polars-expr-list-set-difference"]], "polars.Expr.meta.ne": [[560, "polars-expr-meta-ne"]], "polars.Expr.meta.serialize": [[564, "polars-expr-meta-serialize"]], "polars.Expr.list.tail": [[538, "polars-expr-list-tail"]], "polars.Expr.list.unique": [[542, "polars-expr-list-unique"]], "polars.Expr.map_elements": [[553, "polars-expr-map-elements"]], "polars.Expr.list.min": [[525, "polars-expr-list-min"]], "polars.Expr.list.take": [[539, "polars-expr-list-take"]], "polars.Expr.map_batches": [[551, "polars-expr-map-batches"]], "polars.Expr.meta.eq": [[557, "polars-expr-meta-eq"]], "polars.Expr.list.len": [[520, "polars-expr-list-len"]], "polars.Expr.meta.tree_format": [[565, "polars-expr-meta-tree-format"]], "polars.Expr.median": [[556, "polars-expr-median"]], "polars.Expr.meta.undo_aliases": [[566, "polars-expr-meta-undo-aliases"]], "polars.Expr.list.to_struct": [[541, "polars-expr-list-to-struct"]], "polars.Expr.log10": [[545, "polars-expr-log10"]], "polars.Expr.meta.pop": [[562, "polars-expr-meta-pop"]], "polars.Expr.list.set_symmetric_difference": [[531, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.list.std": [[536, "polars-expr-list-std"]], "polars.Expr.list.max": [[522, "polars-expr-list-max"]], "polars.Expr.list.shift": [[533, "polars-expr-list-shift"]], "polars.Expr.log": [[544, "polars-expr-log"]], "polars.Expr.lower_bound": [[547, "polars-expr-lower-bound"]], "polars.Expr.map_dict": [[552, "polars-expr-map-dict"]], "polars.Expr.list.to_array": [[540, "polars-expr-list-to-array"]], "polars.Expr.list.sort": [[535, "polars-expr-list-sort"]], "polars.Expr.meta.output_name": [[561, "polars-expr-meta-output-name"]], "polars.Expr.mod": [[569, "polars-expr-mod"]], "polars.Expr.list.last": [[519, "polars-expr-list-last"]], "polars.Expr.list.reverse": [[527, "polars-expr-list-reverse"]], "polars.Expr.list.var": [[543, "polars-expr-list-var"]], "polars.Expr.list.gather": [[514, "polars-expr-list-gather"]], "polars.Expr.log1p": [[546, "polars-expr-log1p"]], "polars.Expr.list.head": [[517, "polars-expr-list-head"]], "polars.Expr.lt": [[548, "polars-expr-lt"]], "polars.Expr.min": [[568, "polars-expr-min"]], "polars.Expr.map": [[549, "polars-expr-map"]], "polars.Expr.list.median": [[524, "polars-expr-list-median"]], "polars.Expr.list.lengths": [[521, "polars-expr-list-lengths"]], "polars.Expr.list.gather_every": [[515, "polars-expr-list-gather-every"]], "polars.Expr.max": [[554, "polars-expr-max"]], "polars.Expr.list.n_unique": [[526, "polars-expr-list-n-unique"]], "polars.Expr.list.mean": [[523, "polars-expr-list-mean"]], "polars.Expr.mean": [[555, "polars-expr-mean"]], "polars.Expr.list.slice": [[534, "polars-expr-list-slice"]], "polars.Expr.list.first": [[513, "polars-expr-list-first"]], "polars.Expr.meta.root_names": [[563, "polars-expr-meta-root-names"]], "polars.Expr.list.set_intersection": [[530, "polars-expr-list-set-intersection"]], "polars.Expr.list.sum": [[537, "polars-expr-list-sum"]], "polars.Expr.meta.write_json": [[567, "polars-expr-meta-write-json"]], "polars.Expr.list.sample": [[528, "polars-expr-list-sample"]], "polars.Expr.list.set_union": [[532, "polars-expr-list-set-union"]], "polars.Expr.meta.is_regex_projection": [[559, "polars-expr-meta-is-regex-projection"]], "polars.Expr.rolling_max": [[613, "polars-expr-rolling-max"]], "polars.Expr.quantile": [[599, "polars-expr-quantile"]], "polars.Expr.rolling_max_by": [[614, "polars-expr-rolling-max-by"]], "polars.Expr.name.to_lowercase": [[580, "polars-expr-name-to-lowercase"]], "polars.Expr.rank": [[601, "polars-expr-rank"]], "polars.Expr.null_count": [[588, "polars-expr-null-count"]], "polars.Expr.rle": [[608, "polars-expr-rle"]], "polars.Expr.rolling_median": [[617, "polars-expr-rolling-median"]], "polars.Expr.rolling_min_by": [[620, "polars-expr-rolling-min-by"]], "polars.Expr.rolling_apply": [[611, "polars-expr-rolling-apply"]], "polars.Expr.rolling_sum": [[626, "polars-expr-rolling-sum"]], "polars.Expr.rolling_skew": [[623, "polars-expr-rolling-skew"]], "polars.Expr.nan_max": [[582, "polars-expr-nan-max"]], "polars.Expr.reinterpret": [[603, "polars-expr-reinterpret"]], "polars.Expr.rechunk": [[602, "polars-expr-rechunk"]], "polars.Expr.pct_change": [[591, "polars-expr-pct-change"]], "polars.Expr.rolling_quantile_by": [[622, "polars-expr-rolling-quantile-by"]], "polars.Expr.mul": [[571, "polars-expr-mul"]], "polars.Expr.rolling_std": [[624, "polars-expr-rolling-std"]], "polars.Expr.name.suffix_fields": [[579, "polars-expr-name-suffix-fields"]], "polars.Expr.ne_missing": [[585, "polars-expr-ne-missing"]], "polars.Expr.over": [[590, "polars-expr-over"]], "polars.Expr.name.prefix_fields": [[577, "polars-expr-name-prefix-fields"]], "polars.Expr.rolling_min": [[619, "polars-expr-rolling-min"]], "polars.Expr.mode": [[570, "polars-expr-mode"]], "polars.Expr.not_": [[587, "polars-expr-not"]], "polars.Expr.pow": [[595, "polars-expr-pow"]], "polars.Expr.qcut": [[598, "polars-expr-qcut"]], "polars.Expr.name.map": [[574, "polars-expr-name-map"]], "polars.Expr.peak_min": [[593, "polars-expr-peak-min"]], "polars.Expr.prefix": [[596, "polars-expr-prefix"]], "polars.Expr.name.map_fields": [[575, "polars-expr-name-map-fields"]], "polars.Expr.pipe": [[594, "polars-expr-pipe"]], "polars.Expr.repeat_by": [[604, "polars-expr-repeat-by"]], "polars.Expr.nan_min": [[583, "polars-expr-nan-min"]], "polars.Expr.or_": [[589, "polars-expr-or"]], "polars.Expr.rolling_mean": [[615, "polars-expr-rolling-mean"]], "polars.Expr.rolling": [[610, "polars-expr-rolling"]], "polars.Expr.product": [[597, "polars-expr-product"]], "polars.Expr.replace": [[605, "polars-expr-replace"]], "polars.Expr.reverse": [[607, "polars-expr-reverse"]], "polars.Expr.n_unique": [[572, "polars-expr-n-unique"]], "polars.Expr.name.keep": [[573, "polars-expr-name-keep"]], "polars.Expr.rolling_map": [[612, "polars-expr-rolling-map"]], "polars.Expr.peak_max": [[592, "polars-expr-peak-max"]], "polars.Expr.rolling_quantile": [[621, "polars-expr-rolling-quantile"]], "polars.Expr.rolling_mean_by": [[616, "polars-expr-rolling-mean-by"]], "polars.Expr.name.prefix": [[576, "polars-expr-name-prefix"]], "polars.Expr.rle_id": [[609, "polars-expr-rle-id"]], "polars.Expr.ne": [[584, "polars-expr-ne"]], "polars.Expr.reshape": [[606, "polars-expr-reshape"]], "polars.Expr.rolling_median_by": [[618, "polars-expr-rolling-median-by"]], "polars.Expr.name.suffix": [[578, "polars-expr-name-suffix"]], "polars.Expr.rolling_std_by": [[625, "polars-expr-rolling-std-by"]], "polars.Expr.name.to_uppercase": [[581, "polars-expr-name-to-uppercase"]], "polars.Expr.radians": [[600, "polars-expr-radians"]], "polars.Expr.neg": [[586, "polars-expr-neg"]], "polars.Expr.list.arg_max": [[503, "polars-expr-list-arg-max"]], "polars.Expr.list.arg_min": [[504, "polars-expr-list-arg-min"]], "polars.Expr.list.contains": [[506, "polars-expr-list-contains"]], "polars.Expr.get": [[472, "polars-expr-get"]], "polars.Expr.list.count_matches": [[508, "polars-expr-list-count-matches"]], "polars.Expr.is_nan": [[489, "polars-expr-is-nan"]], "polars.Expr.is_first_distinct": [[484, "polars-expr-is-first-distinct"]], "polars.Expr.list.all": [[501, "polars-expr-list-all"]], "polars.Expr.filter": [[462, "polars-expr-filter"]], "polars.Expr.is_last_distinct": [[488, "polars-expr-is-last-distinct"]], "polars.Expr.is_first": [[483, "polars-expr-is-first"]], "polars.Expr.is_not": [[490, "polars-expr-is-not"]], "polars.Expr.interpolate": [[479, "polars-expr-interpolate"]], "polars.Expr.hash": [[474, "polars-expr-hash"]], "polars.Expr.floor": [[465, "polars-expr-floor"]], "polars.Expr.list.concat": [[505, "polars-expr-list-concat"]], "polars.Expr.head": [[475, "polars-expr-head"]], "polars.Expr.exp": [[457, "polars-expr-exp"]], "polars.Expr.list.diff": [[509, "polars-expr-list-diff"]], "polars.Expr.keep_name": [[495, "polars-expr-keep-name"]], "polars.Expr.list.any": [[502, "polars-expr-list-any"]], "polars.Expr.list.eval": [[511, "polars-expr-list-eval"]], "polars.Expr.le": [[498, "polars-expr-le"]], "polars.Expr.is_between": [[480, "polars-expr-is-between"]], "polars.Expr.hist": [[476, "polars-expr-hist"]], "polars.Expr.list.explode": [[512, "polars-expr-list-explode"]], "polars.Expr.flatten": [[464, "polars-expr-flatten"]], "polars.Expr.extend_constant": [[459, "polars-expr-extend-constant"]], "polars.Expr.kurtosis": [[496, "polars-expr-kurtosis"]], "polars.Expr.inspect": [[478, "polars-expr-inspect"]], "polars.Expr.list.count_match": [[507, "polars-expr-list-count-match"]], "polars.Expr.ge": [[471, "polars-expr-ge"]], "polars.Expr.last": [[497, "polars-expr-last"]], "polars.Expr.list.drop_nulls": [[510, "polars-expr-list-drop-nulls"]], "polars.Expr.is_duplicated": [[481, "polars-expr-is-duplicated"]], "polars.Expr.is_infinite": [[486, "polars-expr-is-infinite"]], "polars.Expr.is_not_nan": [[491, "polars-expr-is-not-nan"]], "polars.Expr.forward_fill": [[467, "polars-expr-forward-fill"]], "polars.Expr.fill_null": [[461, "polars-expr-fill-null"]], "polars.Expr.gt": [[473, "polars-expr-gt"]], "polars.Expr.exclude": [[456, "polars-expr-exclude"]], "polars.Expr.gather": [[469, "polars-expr-gather"]], "polars.Expr.is_unique": [[494, "polars-expr-is-unique"]], "polars.Expr.first": [[463, "polars-expr-first"]], "polars.Expr.explode": [[458, "polars-expr-explode"]], "polars.Expr.is_not_null": [[492, "polars-expr-is-not-null"]], "polars.Expr.implode": [[477, "polars-expr-implode"]], "polars.Expr.is_last": [[487, "polars-expr-is-last"]], "polars.Expr.is_in": [[485, "polars-expr-is-in"]], "polars.Expr.floordiv": [[466, "polars-expr-floordiv"]], "polars.Expr.fill_nan": [[460, "polars-expr-fill-nan"]], "polars.Expr.is_finite": [[482, "polars-expr-is-finite"]], "polars.Expr.gather_every": [[470, "polars-expr-gather-every"]], "polars.Expr.limit": [[500, "polars-expr-limit"]], "polars.Expr.len": [[499, "polars-expr-len"]], "polars.Expr.is_null": [[493, "polars-expr-is-null"]], "polars.Expr.from_json": [[468, "polars-expr-from-json"]], "polars.Expr.dt.total_hours": [[438, "polars-expr-dt-total-hours"]], "polars.Expr.dt.days": [[407, "polars-expr-dt-days"]], "polars.Expr.dt.total_seconds": [[443, "polars-expr-dt-total-seconds"]], "polars.Expr.dt.second": [[431, "polars-expr-dt-second"]], "polars.Expr.dt.with_time_unit": [[447, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.year": [[448, "polars-expr-dt-year"]], "polars.Expr.dt.month": [[421, "polars-expr-dt-month"]], "polars.Expr.dt.month_start": [[423, "polars-expr-dt-month-start"]], "polars.Expr.dt.time": [[434, "polars-expr-dt-time"]], "polars.Expr.dt.week": [[445, "polars-expr-dt-week"]], "polars.Expr.dt.microsecond": [[414, "polars-expr-dt-microsecond"]], "polars.Expr.dt.total_nanoseconds": [[442, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.dt.round": [[430, "polars-expr-dt-round"]], "polars.Expr.dt.is_leap_year": [[412, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.hour": [[410, "polars-expr-dt-hour"]], "polars.Expr.ewm_std": [[454, "polars-expr-ewm-std"]], "polars.Expr.dt.combine": [[402, "polars-expr-dt-combine"]], "polars.Expr.dt.weekday": [[446, "polars-expr-dt-weekday"]], "polars.Expr.dt.hours": [[411, "polars-expr-dt-hours"]], "polars.Expr.dt.convert_time_zone": [[403, "polars-expr-dt-convert-time-zone"]], "polars.Expr.entropy": [[449, "polars-expr-entropy"]], "polars.Expr.dt.base_utc_offset": [[399, "polars-expr-dt-base-utc-offset"]], "polars.Expr.dt.replace_time_zone": [[429, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.truncate": [[444, "polars-expr-dt-truncate"]], "polars.Expr.dt.month_end": [[422, "polars-expr-dt-month-end"]], "polars.Expr.dt.offset_by": [[426, "polars-expr-dt-offset-by"]], "polars.Expr.dt.strftime": [[433, "polars-expr-dt-strftime"]], "polars.Expr.dt.quarter": [[428, "polars-expr-dt-quarter"]], "polars.Expr.dt.microseconds": [[415, "polars-expr-dt-microseconds"]], "polars.Expr.dt.minute": [[419, "polars-expr-dt-minute"]], "polars.Expr.dt.datetime": [[405, "polars-expr-dt-datetime"]], "polars.Expr.ewm_mean": [[452, "polars-expr-ewm-mean"]], "polars.Expr.dt.total_milliseconds": [[440, "polars-expr-dt-total-milliseconds"]], "polars.Expr.dt.dst_offset": [[408, "polars-expr-dt-dst-offset"]], "polars.Expr.dt.iso_year": [[413, "polars-expr-dt-iso-year"]], "polars.Expr.dt.epoch": [[409, "polars-expr-dt-epoch"]], "polars.Expr.dt.seconds": [[432, "polars-expr-dt-seconds"]], "polars.Expr.dt.total_days": [[437, "polars-expr-dt-total-days"]], "polars.Expr.ewm_mean_by": [[453, "polars-expr-ewm-mean-by"]], "polars.Expr.ewm_var": [[455, "polars-expr-ewm-var"]], "polars.Expr.dt.date": [[404, "polars-expr-dt-date"]], "polars.Expr.dt.milliseconds": [[418, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.to_string": [[436, "polars-expr-dt-to-string"]], "polars.Expr.dt.minutes": [[420, "polars-expr-dt-minutes"]], "polars.Expr.dt.total_minutes": [[441, "polars-expr-dt-total-minutes"]], "polars.Expr.dt.cast_time_unit": [[400, "polars-expr-dt-cast-time-unit"]], "polars.Expr.dt.millisecond": [[417, "polars-expr-dt-millisecond"]], "polars.Expr.dt.ordinal_day": [[427, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.nanoseconds": [[425, "polars-expr-dt-nanoseconds"]], "polars.Expr.eq_missing": [[451, "polars-expr-eq-missing"]], "polars.Expr.dt.timestamp": [[435, "polars-expr-dt-timestamp"]], "polars.Expr.dt.century": [[401, "polars-expr-dt-century"]], "polars.Expr.dt.millennium": [[416, "polars-expr-dt-millennium"]], "polars.Expr.dt.day": [[406, "polars-expr-dt-day"]], "polars.Expr.dt.total_microseconds": [[439, "polars-expr-dt-total-microseconds"]], "polars.Expr.eq": [[450, "polars-expr-eq"]], "polars.Expr.dt.nanosecond": [[424, "polars-expr-dt-nanosecond"]], "polars.Expr.cum_max": [[381, "polars-expr-cum-max"]], "polars.Expr.cum_prod": [[383, "polars-expr-cum-prod"]], "polars.Expr.arr.explode": [[342, "polars-expr-arr-explode"]], "polars.Expr.arr.join": [[345, "polars-expr-arr-join"]], "polars.Expr.bin.ends_with": [[364, "polars-expr-bin-ends-with"]], "polars.Expr.cumcount": [[385, "polars-expr-cumcount"]], "polars.Expr.bottom_k_by": [[367, "polars-expr-bottom-k-by"]], "polars.Expr.arr.to_struct": [[357, "polars-expr-arr-to-struct"]], "polars.Expr.cum_sum": [[384, "polars-expr-cum-sum"]], "polars.Expr.cum_count": [[380, "polars-expr-cum-count"]], "polars.Expr.arr.shift": [[352, "polars-expr-arr-shift"]], "polars.Expr.bin.encode": [[363, "polars-expr-bin-encode"]], "polars.Expr.arr.to_list": [[356, "polars-expr-arr-to-list"]], "polars.Expr.diff": [[394, "polars-expr-diff"]], "polars.Expr.arr.unique": [[358, "polars-expr-arr-unique"]], "polars.Expr.bin.decode": [[362, "polars-expr-bin-decode"]], "polars.Expr.ceil": [[372, "polars-expr-ceil"]], "polars.Expr.backward_fill": [[360, "polars-expr-backward-fill"]], "polars.Expr.arr.get": [[344, "polars-expr-arr-get"]], "polars.Expr.arr.n_unique": [[350, "polars-expr-arr-n-unique"]], "polars.Expr.cummin": [[387, "polars-expr-cummin"]], "polars.Expr.arr.std": [[354, "polars-expr-arr-std"]], "polars.Expr.bottom_k": [[366, "polars-expr-bottom-k"]], "polars.Expr.cumprod": [[388, "polars-expr-cumprod"]], "polars.Expr.cast": [[368, "polars-expr-cast"]], "polars.Expr.cos": [[376, "polars-expr-cos"]], "polars.Expr.cat.set_ordering": [[370, "polars-expr-cat-set-ordering"]], "polars.Expr.clip": [[373, "polars-expr-clip"]], "polars.Expr.count": [[379, "polars-expr-count"]], "polars.Expr.cumsum": [[389, "polars-expr-cumsum"]], "polars.Expr.arr.reverse": [[351, "polars-expr-arr-reverse"]], "polars.Expr.cumulative_eval": [[390, "polars-expr-cumulative-eval"]], "polars.Expr.arr.max": [[347, "polars-expr-arr-max"]], "polars.Expr.arr.first": [[343, "polars-expr-arr-first"]], "polars.Expr.cat.get_categories": [[369, "polars-expr-cat-get-categories"]], "polars.Expr.arr.min": [[349, "polars-expr-arr-min"]], "polars.Expr.arr.last": [[346, "polars-expr-arr-last"]], "polars.Expr.clip_min": [[375, "polars-expr-clip-min"]], "polars.Expr.deserialize": [[393, "polars-expr-deserialize"]], "polars.Expr.cummax": [[386, "polars-expr-cummax"]], "polars.Expr.cbrt": [[371, "polars-expr-cbrt"]], "polars.Expr.arr.sort": [[353, "polars-expr-arr-sort"]], "polars.Expr.arr.sum": [[355, "polars-expr-arr-sum"]], "polars.Expr.bin.contains": [[361, "polars-expr-bin-contains"]], "polars.Expr.clip_max": [[374, "polars-expr-clip-max"]], "polars.Expr.cum_min": [[382, "polars-expr-cum-min"]], "polars.Expr.degrees": [[392, "polars-expr-degrees"]], "polars.Expr.cut": [[391, "polars-expr-cut"]], "polars.Expr.dt.add_business_days": [[398, "polars-expr-dt-add-business-days"]], "polars.Expr.drop_nans": [[396, "polars-expr-drop-nans"]], "polars.Expr.arr.median": [[348, "polars-expr-arr-median"]], "polars.Expr.arr.var": [[359, "polars-expr-arr-var"]], "polars.Expr.cosh": [[377, "polars-expr-cosh"]], "polars.Expr.cot": [[378, "polars-expr-cot"]], "polars.Expr.drop_nulls": [[397, "polars-expr-drop-nulls"]], "polars.Expr.dot": [[395, "polars-expr-dot"]], "polars.Expr.bin.starts_with": [[365, "polars-expr-bin-starts-with"]], "polars.DataFrame.transpose": [[272, "polars-dataframe-transpose"]], "polars.DataFrame.with_columns": [[281, "polars-dataframe-with-columns"]], "polars.DataFrame.replace_at_idx": [[237, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.sum_horizontal": [[258, "polars-dataframe-sum-horizontal"]], "polars.DataFrame.select_seq": [[247, "polars-dataframe-select-seq"]], "polars.DataFrame.to_dict": [[262, "polars-dataframe-to-dict"]], "polars.DataFrame.unnest": [[274, "polars-dataframe-unnest"]], "polars.DataFrame.vstack": [[279, "polars-dataframe-vstack"]], "polars.DataFrame.shrink_to_fit": [[252, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.sql": [[255, "polars-dataframe-sql"]], "polars.DataFrame.with_row_index": [[284, "polars-dataframe-with-row-index"]], "polars.DataFrame.replace": [[236, "polars-dataframe-replace"]], "polars.DataFrame.to_arrow": [[261, "polars-dataframe-to-arrow"]], "polars.DataFrame.replace_column": [[238, "polars-dataframe-replace-column"]], "polars.DataFrame.rename": [[235, "polars-dataframe-rename"]], "polars.DataFrame.sample": [[244, "polars-dataframe-sample"]], "polars.DataFrame.to_dicts": [[263, "polars-dataframe-to-dicts"]], "polars.DataFrame.to_struct": [[269, "polars-dataframe-to-struct"]], "polars.DataFrame.upsample": [[277, "polars-dataframe-upsample"]], "polars.DataFrame.to_dummies": [[264, "polars-dataframe-to-dummies"]], "polars.DataFrame.rechunk": [[234, "polars-dataframe-rechunk"]], "polars.DataFrame.reverse": [[239, "polars-dataframe-reverse"]], "polars.DataFrame.to_torch": [[270, "polars-dataframe-to-torch"]], "polars.DataFrame.shift": [[250, "polars-dataframe-shift"]], "polars.DataFrame.unstack": [[275, "polars-dataframe-unstack"]], "polars.DataFrame.pivot": [[231, "polars-dataframe-pivot"]], "polars.DataFrame.select": [[246, "polars-dataframe-select"]], "polars.DataFrame.top_k": [[271, "polars-dataframe-top-k"]], "polars.DataFrame.quantile": [[233, "polars-dataframe-quantile"]], "polars.DataFrame.to_pandas": [[267, "polars-dataframe-to-pandas"]], "polars.DataFrame.null_count": [[228, "polars-dataframe-null-count"]], "polars.DataFrame.rows": [[242, "polars-dataframe-rows"]], "polars.DataFrame.to_numpy": [[266, "polars-dataframe-to-numpy"]], "polars.DataFrame.partition_by": [[229, "polars-dataframe-partition-by"]], "polars.DataFrame.shape": [[249, "polars-dataframe-shape"]], "polars.DataFrame.unique": [[273, "polars-dataframe-unique"]], "polars.DataFrame.update": [[276, "polars-dataframe-update"]], "polars.DataFrame.schema": [[245, "polars-dataframe-schema"]], "polars.DataFrame.slice": [[253, "polars-dataframe-slice"]], "polars.DataFrame.take_every": [[260, "polars-dataframe-take-every"]], "polars.DataFrame.var": [[278, "polars-dataframe-var"]], "polars.DataFrame.tail": [[259, "polars-dataframe-tail"]], "polars.DataFrame.rolling": [[240, "polars-dataframe-rolling"]], "polars.DataFrame.shift_and_fill": [[251, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.width": [[280, "polars-dataframe-width"]], "polars.DataFrame.with_row_count": [[283, "polars-dataframe-with-row-count"]], "polars.DataFrame.row": [[241, "polars-dataframe-row"]], "polars.DataFrame.set_sorted": [[248, "polars-dataframe-set-sorted"]], "polars.DataFrame.sort": [[254, "polars-dataframe-sort"]], "polars.DataFrame.pipe": [[230, "polars-dataframe-pipe"]], "polars.DataFrame.to_series": [[268, "polars-dataframe-to-series"]], "polars.DataFrame.product": [[232, "polars-dataframe-product"]], "polars.DataFrame.std": [[256, "polars-dataframe-std"]], "polars.DataFrame.to_init_repr": [[265, "polars-dataframe-to-init-repr"]], "polars.DataFrame.sum": [[257, "polars-dataframe-sum"]], "polars.DataFrame.rows_by_key": [[243, "polars-dataframe-rows-by-key"]], "polars.DataFrame.with_columns_seq": [[282, "polars-dataframe-with-columns-seq"]], "polars.var": [[800, "polars-var"]], "polars.LazyFrame.group_by": [[849, "polars-lazyframe-group-by"]], "polars.LazyFrame.cache": [[828, "polars-lazyframe-cache"]], "polars.LazyFrame.describe": [[836, "polars-lazyframe-describe"]], "polars.LazyFrame.fill_null": [[845, "polars-lazyframe-fill-null"]], "polars.when": [[801, "polars-when"]], "polars.LazyFrame.fill_nan": [[844, "polars-lazyframe-fill-nan"]], "Conversion": [[822, "conversion"]], "Parallelization": [[822, "parallelization"]], "Random": [[822, "random"]], "StringCache": [[822, "stringcache"]], "polars.LazyFrame.first": [[847, "polars-lazyframe-first"]], "polars.LazyFrame.group_by_dynamic": [[850, "polars-lazyframe-group-by-dynamic"]], "Operators": [[817, "operators"]], "Conjunction": [[817, "conjunction"]], "Comparison": [[817, "comparison"]], "Numeric": [[817, "numeric"], [312, "numeric"]], "Name": [[816, "name"]], "polars.time_ranges": [[799, "polars-time-ranges"]], "Columns / names": [[808, "columns-names"]], "polars.LazyFrame.group_by_rolling": [[851, "polars-lazyframe-group-by-rolling"]], "polars.LazyFrame.collect": [[832, "polars-lazyframe-collect"]], "Input/output": [[824, "input-output"]], "Avro": [[824, "avro"]], "Clipboard": [[824, "clipboard"]], "CSV": [[824, "csv"]], "Database": [[824, "database"]], "Delta Lake": [[824, "delta-lake"]], "Excel / ODS": [[824, "excel-ods"]], "Feather / IPC": [[824, "feather-ipc"]], "Iceberg": [[824, "iceberg"]], "JSON": [[824, "json"]], "Parquet": [[824, "parquet"]], "PyArrow Datasets": [[824, "pyarrow-datasets"]], "polars.LazyFrame.bottom_k": [[827, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.cast": [[829, "polars-lazyframe-cast"]], "polars.LazyFrame.groupby": [[852, "polars-lazyframe-groupby"]], "polars.LazyFrame.drop_nulls": [[839, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.columns": [[834, "polars-lazyframe-columns"]], "Window": [[821, "window"]], "polars.LazyFrame.explain": [[841, "polars-lazyframe-explain"]], "polars.LazyFrame.approx_n_unique": [[826, "polars-lazyframe-approx-n-unique"]], "polars.LazyFrame.fetch": [[843, "polars-lazyframe-fetch"]], "polars.LazyFrame.groupby_dynamic": [[853, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.clone": [[831, "polars-lazyframe-clone"]], "polars.LazyFrame.filter": [[846, "polars-lazyframe-filter"]], "polars.LazyFrame.clear": [[830, "polars-lazyframe-clear"]], "polars.time_range": [[798, "polars-time-range"]], "polars.LazyFrame.drop": [[838, "polars-lazyframe-drop"]], "polars.LazyFrame.gather_every": [[848, "polars-lazyframe-gather-every"]], "polars.col": [[807, "polars-col"]], "Expressions": [[811, "expressions"]], "Meta": [[813, "meta"]], "polars.LazyFrame.deserialize": [[837, "polars-lazyframe-deserialize"]], "polars.zeros": [[802, "polars-zeros"]], "polars.LazyFrame.groupby_rolling": [[854, "polars-lazyframe-groupby-rolling"]], "Python API reference": [[823, "python-api-reference"]], "polars.LazyFrame.collect_async": [[833, "polars-lazyframe-collect-async"]], "polars.LazyFrame.explode": [[842, "polars-lazyframe-explode"]], "polars.LazyFrame.dtypes": [[840, "polars-lazyframe-dtypes"]], "polars.LazyFrame.count": [[835, "polars-lazyframe-count"]], "polars.Expr.append": [[322, "polars-expr-append"]], "polars.Expr.arctan": [[329, "polars-expr-arctan"]], "polars.Expr.arcsin": [[327, "polars-expr-arcsin"]], "polars.Expr.arg_true": [[334, "polars-expr-arg-true"]], "polars.Expr.and_": [[320, "polars-expr-and"]], "polars.dataframe.group_by.GroupBy.max": [[295, "polars-dataframe-group-by-groupby-max"]], "polars.dataframe.group_by.GroupBy.median": [[297, "polars-dataframe-group-by-groupby-median"]], "polars.dataframe.group_by.GroupBy.min": [[298, "polars-dataframe-group-by-groupby-min"]], "DataFrame": [[308, "dataframe"]], "polars.Expr.arg_unique": [[335, "polars-expr-arg-unique"]], "polars.dataframe.group_by.GroupBy.__iter__": [[285, "polars-dataframe-group-by-groupby-iter"]], "polars.Expr.alias": [[318, "polars-expr-alias"]], "polars.Expr.approx_n_unique": [[324, "polars-expr-approx-n-unique"]], "polars.dataframe.group_by.GroupBy.quantile": [[300, "polars-dataframe-group-by-groupby-quantile"]], "Data types": [[312, "data-types"]], "DataType": [[312, "datatype"]], "Nested": [[312, "nested"]], "Other": [[312, "other"]], "polars.Expr.apply": [[323, "polars-expr-apply"]], "Exceptions": [[313, "exceptions"]], "polars.Expr.arg_min": [[332, "polars-expr-arg-min"]], "polars.dataframe.group_by.GroupBy.last": [[292, "polars-dataframe-group-by-groupby-last"]], "polars.Expr.arr.count_matches": [[341, "polars-expr-arr-count-matches"]], "polars.Expr.any": [[321, "polars-expr-any"]], "polars.Expr.add": [[316, "polars-expr-add"]], "polars.dataframe.group_by.GroupBy.first": [[290, "polars-dataframe-group-by-groupby-first"]], "polars.Expr.arccosh": [[326, "polars-expr-arccosh"]], "polars.dataframe.group_by.GroupBy.mean": [[296, "polars-dataframe-group-by-groupby-mean"]], "polars.dataframe.group_by.GroupBy.sum": [[301, "polars-dataframe-group-by-groupby-sum"]], "polars.Expr.arr.arg_max": [[338, "polars-expr-arr-arg-max"]], "polars.Expr.abs": [[315, "polars-expr-abs"]], "polars.dataframe.group_by.GroupBy.all": [[287, "polars-dataframe-group-by-groupby-all"]], "polars.Expr.all": [[319, "polars-expr-all"]], "polars.Expr.arcsinh": [[328, "polars-expr-arcsinh"]], "polars.Expr.arr.contains": [[340, "polars-expr-arr-contains"]], "polars.Expr.arr.any": [[337, "polars-expr-arr-any"]], "polars.Expr.arr.all": [[336, "polars-expr-arr-all"]], "polars.dataframe.group_by.GroupBy.agg": [[286, "polars-dataframe-group-by-groupby-agg"]], "polars.Expr.arr.arg_min": [[339, "polars-expr-arr-arg-min"]], "polars.dataframe.group_by.GroupBy.n_unique": [[299, "polars-dataframe-group-by-groupby-n-unique"]], "polars.Expr.arctanh": [[330, "polars-expr-arctanh"]], "polars.dataframe.group_by.GroupBy.apply": [[288, "polars-dataframe-group-by-groupby-apply"]], "polars.Expr.arg_sort": [[333, "polars-expr-arg-sort"]], "polars.dataframe.group_by.GroupBy.map_groups": [[294, "polars-dataframe-group-by-groupby-map-groups"]], "polars.dataframe.group_by.GroupBy.count": [[289, "polars-dataframe-group-by-groupby-count"]], "polars.dataframe.group_by.GroupBy.len": [[293, "polars-dataframe-group-by-groupby-len"]], "polars.Expr.arg_max": [[331, "polars-expr-arg-max"]], "polars.Expr.agg_groups": [[317, "polars-expr-agg-groups"]], "polars.Expr.arccos": [[325, "polars-expr-arccos"]], "polars.dataframe.group_by.GroupBy.head": [[291, "polars-dataframe-group-by-groupby-head"]], "polars.dataframe.group_by.GroupBy.tail": [[302, "polars-dataframe-group-by-groupby-tail"]]}, "indexentries": {"activate_decimals() (polars.config class method)": [[2, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[3, "polars.Config.load"]], "load_from_file() (polars.config class method)": [[4, "polars.Config.load_from_file"]], "restore_defaults() (polars.config class method)": [[5, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[6, "polars.Config.save"]], "save_to_file() (polars.config class method)": [[7, "polars.Config.save_to_file"]], "set_ascii_tables() (polars.config class method)": [[8, "polars.Config.set_ascii_tables"]], "set_auto_structify() (polars.config class method)": [[9, "polars.Config.set_auto_structify"]], "set_decimal_separator() (polars.config class method)": [[10, "polars.Config.set_decimal_separator"]], "set_float_precision() (polars.config class method)": [[11, "polars.Config.set_float_precision"]], "set_fmt_float() (polars.config class method)": [[12, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[13, "polars.Config.set_fmt_str_lengths"]], "set_fmt_table_cell_list_len() (polars.config class method)": [[14, "polars.Config.set_fmt_table_cell_list_len"]], "set_streaming_chunk_size() (polars.config class method)": [[15, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[17, "polars.Config.set_tbl_cell_numeric_alignment"]], "set_tbl_cols() (polars.config class method)": [[18, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[19, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[20, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[21, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[25, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[26, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[27, "polars.Config.set_tbl_width_chars"]], "set_thousands_separator() (polars.config class method)": [[28, "polars.Config.set_thousands_separator"]], "set_trim_decimal_zeros() (polars.config class method)": [[29, "polars.Config.set_trim_decimal_zeros"]], "set_verbose() (polars.config class method)": [[30, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[31, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[32, "polars.DataFrame.write_avro"]], "write_clipboard() (polars.dataframe method)": [[33, "polars.DataFrame.write_clipboard"]], "write_csv() (polars.dataframe method)": [[34, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[35, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[36, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[37, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[38, "polars.DataFrame.write_ipc"]], "write_ipc_stream() (polars.dataframe method)": [[39, "polars.DataFrame.write_ipc_stream"]], "write_json() (polars.dataframe method)": [[40, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[41, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[42, "polars.DataFrame.write_parquet"]], "sink_csv() (polars.lazyframe method)": [[43, "polars.LazyFrame.sink_csv"]], "sink_ipc() (polars.lazyframe method)": [[44, "polars.LazyFrame.sink_ipc"]], "sink_ndjson() (polars.lazyframe method)": [[45, "polars.LazyFrame.sink_ndjson"]], "sink_parquet() (polars.lazyframe method)": [[46, "polars.LazyFrame.sink_parquet"]], "execute() (polars.sqlcontext method)": [[47, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[48, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[49, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[50, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[51, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[52, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[53, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[53, "polars.StringCache.__init__"]], "align_frames() (in module polars)": [[54, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[55, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[56, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[57, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[58, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[59, "polars.build_info"]], "collect_all() (in module polars)": [[60, "polars.collect_all"]], "collect_all_async() (in module polars)": [[61, "polars.collect_all_async"]], "concat() (in module polars)": [[62, "polars.concat"]], "array (class in polars.datatypes)": [[63, "polars.datatypes.Array"]], "__init__() (polars.datatypes.array method)": [[63, "polars.datatypes.Array.__init__"]], "binary (class in polars.datatypes)": [[64, "polars.datatypes.Binary"]], "__init__() (polars.datatypes.binary method)": [[64, "polars.datatypes.Binary.__init__"]], "boolean (class in polars.datatypes)": [[65, "polars.datatypes.Boolean"]], "__init__() (polars.datatypes.boolean method)": [[65, "polars.datatypes.Boolean.__init__"]], "categorical (class in polars.datatypes)": [[66, "polars.datatypes.Categorical"]], "__init__() (polars.datatypes.categorical method)": [[66, "polars.datatypes.Categorical.__init__"]], "datatype (class in polars.datatypes)": [[67, "polars.datatypes.DataType"]], "__init__() (polars.datatypes.datatype method)": [[67, "polars.datatypes.DataType.__init__"]], "date (class in polars.datatypes)": [[68, "polars.datatypes.Date"]], "__init__() (polars.datatypes.date method)": [[68, "polars.datatypes.Date.__init__"]], "datetime (class in polars.datatypes)": [[69, "polars.datatypes.Datetime"]], "__init__() (polars.datatypes.datetime method)": [[69, "polars.datatypes.Datetime.__init__"]], "decimal (class in polars.datatypes)": [[70, "polars.datatypes.Decimal"]], "__init__() (polars.datatypes.decimal method)": [[70, "polars.datatypes.Decimal.__init__"]], "duration (class in polars.datatypes)": [[71, "polars.datatypes.Duration"]], "__init__() (polars.datatypes.duration method)": [[71, "polars.datatypes.Duration.__init__"]], "enum (class in polars.datatypes)": [[72, "polars.datatypes.Enum"]], "__init__() (polars.datatypes.enum method)": [[72, "polars.datatypes.Enum.__init__"]], "float32 (class in polars.datatypes)": [[73, "polars.datatypes.Float32"]], "__init__() (polars.datatypes.float32 method)": [[73, "polars.datatypes.Float32.__init__"]], "float64 (class in polars.datatypes)": [[74, "polars.datatypes.Float64"]], "__init__() (polars.datatypes.float64 method)": [[74, "polars.datatypes.Float64.__init__"]], "int16 (class in polars.datatypes)": [[75, "polars.datatypes.Int16"]], "__init__() (polars.datatypes.int16 method)": [[75, "polars.datatypes.Int16.__init__"]], "int32 (class in polars.datatypes)": [[76, "polars.datatypes.Int32"]], "__init__() (polars.datatypes.int32 method)": [[76, "polars.datatypes.Int32.__init__"]], "int64 (class in polars.datatypes)": [[77, "polars.datatypes.Int64"]], "__init__() (polars.datatypes.int64 method)": [[77, "polars.datatypes.Int64.__init__"]], "int8 (class in polars.datatypes)": [[78, "polars.datatypes.Int8"]], "__init__() (polars.datatypes.int8 method)": [[78, "polars.datatypes.Int8.__init__"]], "list (class in polars.datatypes)": [[79, "polars.datatypes.List"]], "__init__() (polars.datatypes.list method)": [[79, "polars.datatypes.List.__init__"]], "null (class in polars.datatypes)": [[80, "polars.datatypes.Null"]], "__init__() (polars.datatypes.null method)": [[80, "polars.datatypes.Null.__init__"]], "object (class in polars.datatypes)": [[81, "polars.datatypes.Object"]], "__init__() (polars.datatypes.object method)": [[81, "polars.datatypes.Object.__init__"]], "string (class in polars.datatypes)": [[82, "polars.datatypes.String"]], "__init__() (polars.datatypes.string method)": [[82, "polars.datatypes.String.__init__"]], "struct (class in polars.datatypes)": [[83, "polars.datatypes.Struct"]], "__init__() (polars.datatypes.struct method)": [[83, "polars.datatypes.Struct.__init__"]], "time (class in polars.datatypes)": [[84, "polars.datatypes.Time"]], "__init__() (polars.datatypes.time method)": [[84, "polars.datatypes.Time.__init__"]], "uint16 (class in polars.datatypes)": [[85, "polars.datatypes.UInt16"]], "__init__() (polars.datatypes.uint16 method)": [[85, "polars.datatypes.UInt16.__init__"]], "uint32 (class in polars.datatypes)": [[86, "polars.datatypes.UInt32"]], "__init__() (polars.datatypes.uint32 method)": [[86, "polars.datatypes.UInt32.__init__"]], "uint64 (class in polars.datatypes)": [[87, "polars.datatypes.UInt64"]], "__init__() (polars.datatypes.uint64 method)": [[87, "polars.datatypes.UInt64.__init__"]], "uint8 (class in polars.datatypes)": [[88, "polars.datatypes.UInt8"]], "__init__() (polars.datatypes.uint8 method)": [[88, "polars.datatypes.UInt8.__init__"]], "unknown (class in polars.datatypes)": [[89, "polars.datatypes.Unknown"]], "__init__() (polars.datatypes.unknown method)": [[89, "polars.datatypes.Unknown.__init__"]], "utf8 (in module polars.datatypes)": [[90, "polars.datatypes.Utf8"]], "disable_string_cache() (in module polars)": [[91, "polars.disable_string_cache"]], "enable_string_cache() (in module polars)": [[92, "polars.enable_string_cache"]], "arrowerror": [[93, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[94, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[95, "polars.exceptions.ComputeError"]], "duplicateerror": [[96, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[97, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[98, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[99, "polars.exceptions.NoRowsReturnedError"]], "polarserror": [[100, "polars.exceptions.PolarsError"]], "polarspanicerror": [[101, "polars.exceptions.PolarsPanicError"]], "rowserror": [[102, "polars.exceptions.RowsError"]], "schemaerror": [[103, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[104, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[105, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[106, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[107, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[108, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[109, "polars.from_dataframe"]], "from_dict() (in module polars)": [[110, "polars.from_dict"]], "from_dicts() (in module polars)": [[111, "polars.from_dicts"]], "from_numpy() (in module polars)": [[112, "polars.from_numpy"]], "from_pandas() (in module polars)": [[113, "polars.from_pandas"]], "from_records() (in module polars)": [[114, "polars.from_records"]], "from_repr() (in module polars)": [[115, "polars.from_repr"]], "get_index_type() (in module polars)": [[116, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[117, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[118, "polars.read_avro"]], "read_clipboard() (in module polars)": [[119, "polars.read_clipboard"]], "read_csv() (in module polars)": [[120, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[121, "polars.read_csv_batched"]], "read_database() (in module polars)": [[122, "polars.read_database"]], "read_database_uri() (in module polars)": [[123, "polars.read_database_uri"]], "read_delta() (in module polars)": [[124, "polars.read_delta"]], "read_excel() (in module polars)": [[125, "polars.read_excel"]], "read_ipc() (in module polars)": [[126, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[127, "polars.read_ipc_schema"]], "read_ipc_stream() (in module polars)": [[128, "polars.read_ipc_stream"]], "read_json() (in module polars)": [[129, "polars.read_json"]], "read_ndjson() (in module polars)": [[130, "polars.read_ndjson"]], "read_ods() (in module polars)": [[131, "polars.read_ods"]], "read_parquet() (in module polars)": [[132, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[133, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[134, "polars.scan_csv"]], "scan_delta() (in module polars)": [[135, "polars.scan_delta"]], "scan_iceberg() (in module polars)": [[136, "polars.scan_iceberg"]], "scan_ipc() (in module polars)": [[137, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[138, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[139, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[140, "polars.scan_pyarrow_dataset"]], "set_random_seed() (in module polars)": [[141, "polars.set_random_seed"]], "show_versions() (in module polars)": [[142, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[143, "polars.testing.assert_frame_equal"]], "assert_frame_not_equal() (in module polars.testing)": [[144, "polars.testing.assert_frame_not_equal"]], "assert_series_equal() (in module polars.testing)": [[145, "polars.testing.assert_series_equal"]], "assert_series_not_equal() (in module polars.testing)": [[146, "polars.testing.assert_series_not_equal"]], "__init__() (polars.testing.parametric.column method)": [[147, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[147, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[148, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[149, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[150, "polars.testing.parametric.dataframes"]], "dtypes() (in module polars.testing.parametric)": [[151, "polars.testing.parametric.dtypes"]], "lists() (in module polars.testing.parametric)": [[152, "polars.testing.parametric.lists"]], "load_profile() (in module polars.testing.parametric)": [[153, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[154, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[155, "polars.testing.parametric.set_profile"]], "thread_pool_size() (in module polars)": [[156, "polars.thread_pool_size"]], "threadpool_size() (in module polars)": [[157, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[158, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[161, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[162, "polars.DataFrame.apply"]], "approx_n_unique() (polars.dataframe method)": [[163, "polars.DataFrame.approx_n_unique"]], "bottom_k() (polars.dataframe method)": [[164, "polars.DataFrame.bottom_k"]], "cast() (polars.dataframe method)": [[165, "polars.DataFrame.cast"]], "clear() (polars.dataframe method)": [[166, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[167, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[168, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[169, "polars.DataFrame.corr"]], "count() (polars.dataframe method)": [[170, "polars.DataFrame.count"]], "describe() (polars.dataframe method)": [[171, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[172, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[173, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[174, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[175, "polars.DataFrame.dtypes"]], "equals() (polars.dataframe method)": [[176, "polars.DataFrame.equals"]], "estimated_size() (polars.dataframe method)": [[177, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[178, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[179, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[180, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[181, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[182, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[183, "polars.DataFrame.find_idx_by_name"]], "flags (polars.dataframe property)": [[184, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[185, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[186, "polars.DataFrame.frame_equal"]], "gather_every() (polars.dataframe method)": [[187, "polars.DataFrame.gather_every"]], "get_column() (polars.dataframe method)": [[188, "polars.DataFrame.get_column"]], "get_column_index() (polars.dataframe method)": [[189, "polars.DataFrame.get_column_index"]], "get_columns() (polars.dataframe method)": [[190, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[191, "polars.DataFrame.glimpse"]], "group_by() (polars.dataframe method)": [[192, "polars.DataFrame.group_by"]], "group_by_dynamic() (polars.dataframe method)": [[193, "polars.DataFrame.group_by_dynamic"]], "group_by_rolling() (polars.dataframe method)": [[194, "polars.DataFrame.group_by_rolling"]], "groupby() (polars.dataframe method)": [[195, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[196, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[197, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[198, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[199, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[200, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[201, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[202, "polars.DataFrame.insert_at_idx"]], "insert_column() (polars.dataframe method)": [[203, "polars.DataFrame.insert_column"]], "interpolate() (polars.dataframe method)": [[204, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[205, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[206, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[207, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[208, "polars.DataFrame.item"]], "iter_columns() (polars.dataframe method)": [[209, "polars.DataFrame.iter_columns"]], "iter_rows() (polars.dataframe method)": [[210, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[211, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[212, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[213, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[214, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[215, "polars.DataFrame.limit"]], "map_rows() (polars.dataframe method)": [[216, "polars.DataFrame.map_rows"]], "max() (polars.dataframe method)": [[217, "polars.DataFrame.max"]], "max_horizontal() (polars.dataframe method)": [[218, "polars.DataFrame.max_horizontal"]], "mean() (polars.dataframe method)": [[219, "polars.DataFrame.mean"]], "mean_horizontal() (polars.dataframe method)": [[220, "polars.DataFrame.mean_horizontal"]], "median() (polars.dataframe method)": [[221, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[222, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[223, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[224, "polars.DataFrame.min"]], "min_horizontal() (polars.dataframe method)": [[225, "polars.DataFrame.min_horizontal"]], "n_chunks() (polars.dataframe method)": [[226, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[227, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[228, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[229, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[230, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[231, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[232, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[233, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[234, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[235, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[236, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[237, "polars.DataFrame.replace_at_idx"]], "replace_column() (polars.dataframe method)": [[238, "polars.DataFrame.replace_column"]], "reverse() (polars.dataframe method)": [[239, "polars.DataFrame.reverse"]], "rolling() (polars.dataframe method)": [[240, "polars.DataFrame.rolling"]], "row() (polars.dataframe method)": [[241, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[242, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[243, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[244, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[245, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[246, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[247, "polars.DataFrame.select_seq"]], "set_sorted() (polars.dataframe method)": [[248, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[249, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[250, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[251, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[252, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[253, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[254, "polars.DataFrame.sort"]], "sql() (polars.dataframe method)": [[255, "polars.DataFrame.sql"]], "std() (polars.dataframe method)": [[256, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[257, "polars.DataFrame.sum"]], "sum_horizontal() (polars.dataframe method)": [[258, "polars.DataFrame.sum_horizontal"]], "tail() (polars.dataframe method)": [[259, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[260, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[261, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[262, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[263, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[264, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[265, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[266, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[267, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[268, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[269, "polars.DataFrame.to_struct"]], "to_torch() (polars.dataframe method)": [[270, "polars.DataFrame.to_torch"]], "top_k() (polars.dataframe method)": [[271, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[272, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[273, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[274, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[275, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[276, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[277, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[278, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[279, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[280, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[281, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[282, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[283, "polars.DataFrame.with_row_count"]], "with_row_index() (polars.dataframe method)": [[284, "polars.DataFrame.with_row_index"]], "__iter__() (polars.dataframe.group_by.groupby method)": [[285, "polars.dataframe.group_by.GroupBy.__iter__"]], "agg() (polars.dataframe.group_by.groupby method)": [[286, "polars.dataframe.group_by.GroupBy.agg"]], "all() (polars.dataframe.group_by.groupby method)": [[287, "polars.dataframe.group_by.GroupBy.all"]], "apply() (polars.dataframe.group_by.groupby method)": [[288, "polars.dataframe.group_by.GroupBy.apply"]], "count() (polars.dataframe.group_by.groupby method)": [[289, "polars.dataframe.group_by.GroupBy.count"]], "first() (polars.dataframe.group_by.groupby method)": [[290, "polars.dataframe.group_by.GroupBy.first"]], "head() (polars.dataframe.group_by.groupby method)": [[291, "polars.dataframe.group_by.GroupBy.head"]], "last() (polars.dataframe.group_by.groupby method)": [[292, "polars.dataframe.group_by.GroupBy.last"]], "len() (polars.dataframe.group_by.groupby method)": [[293, "polars.dataframe.group_by.GroupBy.len"]], "map_groups() (polars.dataframe.group_by.groupby method)": [[294, "polars.dataframe.group_by.GroupBy.map_groups"]], "max() (polars.dataframe.group_by.groupby method)": [[295, "polars.dataframe.group_by.GroupBy.max"]], "mean() (polars.dataframe.group_by.groupby method)": [[296, "polars.dataframe.group_by.GroupBy.mean"]], "median() (polars.dataframe.group_by.groupby method)": [[297, "polars.dataframe.group_by.GroupBy.median"]], "min() (polars.dataframe.group_by.groupby method)": [[298, "polars.dataframe.group_by.GroupBy.min"]], "n_unique() (polars.dataframe.group_by.groupby method)": [[299, "polars.dataframe.group_by.GroupBy.n_unique"]], "quantile() (polars.dataframe.group_by.groupby method)": [[300, "polars.dataframe.group_by.GroupBy.quantile"]], "sum() (polars.dataframe.group_by.groupby method)": [[301, "polars.dataframe.group_by.GroupBy.sum"]], "tail() (polars.dataframe.group_by.groupby method)": [[302, "polars.dataframe.group_by.GroupBy.tail"]], "abs() (polars.expr method)": [[315, "polars.Expr.abs"]], "add() (polars.expr method)": [[316, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[317, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[318, "polars.Expr.alias"]], "all() (polars.expr method)": [[319, "polars.Expr.all"]], "and_() (polars.expr method)": [[320, "polars.Expr.and_"]], "any() (polars.expr method)": [[321, "polars.Expr.any"]], "append() (polars.expr method)": [[322, "polars.Expr.append"]], "apply() (polars.expr method)": [[323, "polars.Expr.apply"]], "approx_n_unique() (polars.expr method)": [[324, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[325, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[326, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[327, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[328, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[329, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[330, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[331, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[332, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[333, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[334, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[335, "polars.Expr.arg_unique"]], "all() (polars.expr.arr method)": [[336, "polars.Expr.arr.all"]], "any() (polars.expr.arr method)": [[337, "polars.Expr.arr.any"]], "arg_max() (polars.expr.arr method)": [[338, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[339, "polars.Expr.arr.arg_min"]], "contains() (polars.expr.arr method)": [[340, "polars.Expr.arr.contains"]], "count_matches() (polars.expr.arr method)": [[341, "polars.Expr.arr.count_matches"]], "explode() (polars.expr.arr method)": [[342, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[343, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[344, "polars.Expr.arr.get"]], "join() (polars.expr.arr method)": [[345, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[346, "polars.Expr.arr.last"]], "max() (polars.expr.arr method)": [[347, "polars.Expr.arr.max"]], "median() (polars.expr.arr method)": [[348, "polars.Expr.arr.median"]], "min() (polars.expr.arr method)": [[349, "polars.Expr.arr.min"]], "n_unique() (polars.expr.arr method)": [[350, "polars.Expr.arr.n_unique"]], "reverse() (polars.expr.arr method)": [[351, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[352, "polars.Expr.arr.shift"]], "sort() (polars.expr.arr method)": [[353, "polars.Expr.arr.sort"]], "std() (polars.expr.arr method)": [[354, "polars.Expr.arr.std"]], "sum() (polars.expr.arr method)": [[355, "polars.Expr.arr.sum"]], "to_list() (polars.expr.arr method)": [[356, "polars.Expr.arr.to_list"]], "to_struct() (polars.expr.arr method)": [[357, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[358, "polars.Expr.arr.unique"]], "var() (polars.expr.arr method)": [[359, "polars.Expr.arr.var"]], "backward_fill() (polars.expr method)": [[360, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[361, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[362, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[363, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[364, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[365, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[366, "polars.Expr.bottom_k"]], "bottom_k_by() (polars.expr method)": [[367, "polars.Expr.bottom_k_by"]], "cast() (polars.expr method)": [[368, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[369, "polars.Expr.cat.get_categories"]], "set_ordering() (polars.expr.cat method)": [[370, "polars.Expr.cat.set_ordering"]], "cbrt() (polars.expr method)": [[371, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[372, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[373, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[374, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[375, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[376, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[377, "polars.Expr.cosh"]], "cot() (polars.expr method)": [[378, "polars.Expr.cot"]], "count() (polars.expr method)": [[379, "polars.Expr.count"]], "cum_count() (polars.expr method)": [[380, "polars.Expr.cum_count"]], "cum_max() (polars.expr method)": [[381, "polars.Expr.cum_max"]], "cum_min() (polars.expr method)": [[382, "polars.Expr.cum_min"]], "cum_prod() (polars.expr method)": [[383, "polars.Expr.cum_prod"]], "cum_sum() (polars.expr method)": [[384, "polars.Expr.cum_sum"]], "cumcount() (polars.expr method)": [[385, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[386, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[387, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[388, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[389, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[390, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[391, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[392, "polars.Expr.degrees"]], "deserialize() (polars.expr class method)": [[393, "polars.Expr.deserialize"]], "diff() (polars.expr method)": [[394, "polars.Expr.diff"]], "dot() (polars.expr method)": [[395, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[396, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[397, "polars.Expr.drop_nulls"]], "add_business_days() (polars.expr.dt method)": [[398, "polars.Expr.dt.add_business_days"]], "base_utc_offset() (polars.expr.dt method)": [[399, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[400, "polars.Expr.dt.cast_time_unit"]], "century() (polars.expr.dt method)": [[401, "polars.Expr.dt.century"]], "combine() (polars.expr.dt method)": [[402, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[403, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[404, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[405, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[406, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[407, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[408, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[409, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[410, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[411, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[412, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[413, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[414, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[415, "polars.Expr.dt.microseconds"]], "millennium() (polars.expr.dt method)": [[416, "polars.Expr.dt.millennium"]], "millisecond() (polars.expr.dt method)": [[417, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[418, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[419, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[420, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[421, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[422, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[423, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[424, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[425, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[426, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[427, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[428, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[429, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[430, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[431, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[432, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[433, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[434, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[435, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[436, "polars.Expr.dt.to_string"]], "total_days() (polars.expr.dt method)": [[437, "polars.Expr.dt.total_days"]], "total_hours() (polars.expr.dt method)": [[438, "polars.Expr.dt.total_hours"]], "total_microseconds() (polars.expr.dt method)": [[439, "polars.Expr.dt.total_microseconds"]], "total_milliseconds() (polars.expr.dt method)": [[440, "polars.Expr.dt.total_milliseconds"]], "total_minutes() (polars.expr.dt method)": [[441, "polars.Expr.dt.total_minutes"]], "total_nanoseconds() (polars.expr.dt method)": [[442, "polars.Expr.dt.total_nanoseconds"]], "total_seconds() (polars.expr.dt method)": [[443, "polars.Expr.dt.total_seconds"]], "truncate() (polars.expr.dt method)": [[444, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[445, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[446, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[447, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[448, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[449, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[450, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[451, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[452, "polars.Expr.ewm_mean"]], "ewm_mean_by() (polars.expr method)": [[453, "polars.Expr.ewm_mean_by"]], "ewm_std() (polars.expr method)": [[454, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[455, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[456, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[457, "polars.Expr.exp"]], "explode() (polars.expr method)": [[458, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[459, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[460, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[461, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[462, "polars.Expr.filter"]], "first() (polars.expr method)": [[463, "polars.Expr.first"]], "flatten() (polars.expr method)": [[464, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[465, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[466, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[467, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[468, "polars.Expr.from_json"]], "gather() (polars.expr method)": [[469, "polars.Expr.gather"]], "gather_every() (polars.expr method)": [[470, "polars.Expr.gather_every"]], "ge() (polars.expr method)": [[471, "polars.Expr.ge"]], "get() (polars.expr method)": [[472, "polars.Expr.get"]], "gt() (polars.expr method)": [[473, "polars.Expr.gt"]], "hash() (polars.expr method)": [[474, "polars.Expr.hash"]], "head() (polars.expr method)": [[475, "polars.Expr.head"]], "hist() (polars.expr method)": [[476, "polars.Expr.hist"]], "implode() (polars.expr method)": [[477, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[478, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[479, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[480, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[481, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[482, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[483, "polars.Expr.is_first"]], "is_first_distinct() (polars.expr method)": [[484, "polars.Expr.is_first_distinct"]], "is_in() (polars.expr method)": [[485, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[486, "polars.Expr.is_infinite"]], "is_last() (polars.expr method)": [[487, "polars.Expr.is_last"]], "is_last_distinct() (polars.expr method)": [[488, "polars.Expr.is_last_distinct"]], "is_nan() (polars.expr method)": [[489, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[490, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[491, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[492, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[493, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[494, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[495, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[496, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[497, "polars.Expr.last"]], "le() (polars.expr method)": [[498, "polars.Expr.le"]], "len() (polars.expr method)": [[499, "polars.Expr.len"]], "limit() (polars.expr method)": [[500, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[501, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[502, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[503, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[504, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[505, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[506, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[507, "polars.Expr.list.count_match"]], "count_matches() (polars.expr.list method)": [[508, "polars.Expr.list.count_matches"]], "diff() (polars.expr.list method)": [[509, "polars.Expr.list.diff"]], "drop_nulls() (polars.expr.list method)": [[510, "polars.Expr.list.drop_nulls"]], "eval() (polars.expr.list method)": [[511, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[512, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[513, "polars.Expr.list.first"]], "gather() (polars.expr.list method)": [[514, "polars.Expr.list.gather"]], "gather_every() (polars.expr.list method)": [[515, "polars.Expr.list.gather_every"]], "get() (polars.expr.list method)": [[516, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[517, "polars.Expr.list.head"]], "join() (polars.expr.list method)": [[518, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[519, "polars.Expr.list.last"]], "len() (polars.expr.list method)": [[520, "polars.Expr.list.len"]], "lengths() (polars.expr.list method)": [[521, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[522, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[523, "polars.Expr.list.mean"]], "median() (polars.expr.list method)": [[524, "polars.Expr.list.median"]], "min() (polars.expr.list method)": [[525, "polars.Expr.list.min"]], "n_unique() (polars.expr.list method)": [[526, "polars.Expr.list.n_unique"]], "reverse() (polars.expr.list method)": [[527, "polars.Expr.list.reverse"]], "sample() (polars.expr.list method)": [[528, "polars.Expr.list.sample"]], "set_difference() (polars.expr.list method)": [[529, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[530, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[531, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[532, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[533, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[534, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[535, "polars.Expr.list.sort"]], "std() (polars.expr.list method)": [[536, "polars.Expr.list.std"]], "sum() (polars.expr.list method)": [[537, "polars.Expr.list.sum"]], "tail() (polars.expr.list method)": [[538, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[539, "polars.Expr.list.take"]], "to_array() (polars.expr.list method)": [[540, "polars.Expr.list.to_array"]], "to_struct() (polars.expr.list method)": [[541, "polars.Expr.list.to_struct"]], "unique() (polars.expr.list method)": [[542, "polars.Expr.list.unique"]], "var() (polars.expr.list method)": [[543, "polars.Expr.list.var"]], "log() (polars.expr method)": [[544, "polars.Expr.log"]], "log10() (polars.expr method)": [[545, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[546, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[547, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[548, "polars.Expr.lt"]], "map() (polars.expr method)": [[549, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[550, "polars.Expr.map_alias"]], "map_batches() (polars.expr method)": [[551, "polars.Expr.map_batches"]], "map_dict() (polars.expr method)": [[552, "polars.Expr.map_dict"]], "map_elements() (polars.expr method)": [[553, "polars.Expr.map_elements"]], "max() (polars.expr method)": [[554, "polars.Expr.max"]], "mean() (polars.expr method)": [[555, "polars.Expr.mean"]], "median() (polars.expr method)": [[556, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[557, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[558, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[559, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[560, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[561, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[562, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[563, "polars.Expr.meta.root_names"]], "serialize() (polars.expr.meta method)": [[564, "polars.Expr.meta.serialize"]], "tree_format() (polars.expr.meta method)": [[565, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[566, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[567, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[568, "polars.Expr.min"]], "mod() (polars.expr method)": [[569, "polars.Expr.mod"]], "mode() (polars.expr method)": [[570, "polars.Expr.mode"]], "mul() (polars.expr method)": [[571, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[572, "polars.Expr.n_unique"]], "keep() (polars.expr.name method)": [[573, "polars.Expr.name.keep"]], "map() (polars.expr.name method)": [[574, "polars.Expr.name.map"]], "map_fields() (polars.expr.name method)": [[575, "polars.Expr.name.map_fields"]], "prefix() (polars.expr.name method)": [[576, "polars.Expr.name.prefix"]], "prefix_fields() (polars.expr.name method)": [[577, "polars.Expr.name.prefix_fields"]], "suffix() (polars.expr.name method)": [[578, "polars.Expr.name.suffix"]], "suffix_fields() (polars.expr.name method)": [[579, "polars.Expr.name.suffix_fields"]], "to_lowercase() (polars.expr.name method)": [[580, "polars.Expr.name.to_lowercase"]], "to_uppercase() (polars.expr.name method)": [[581, "polars.Expr.name.to_uppercase"]], "nan_max() (polars.expr method)": [[582, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[583, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[584, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[585, "polars.Expr.ne_missing"]], "neg() (polars.expr method)": [[586, "polars.Expr.neg"]], "not_() (polars.expr method)": [[587, "polars.Expr.not_"]], "null_count() (polars.expr method)": [[588, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[589, "polars.Expr.or_"]], "over() (polars.expr method)": [[590, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[591, "polars.Expr.pct_change"]], "peak_max() (polars.expr method)": [[592, "polars.Expr.peak_max"]], "peak_min() (polars.expr method)": [[593, "polars.Expr.peak_min"]], "pipe() (polars.expr method)": [[594, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[595, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[596, "polars.Expr.prefix"]], "product() (polars.expr method)": [[597, "polars.Expr.product"]], "qcut() (polars.expr method)": [[598, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[599, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[600, "polars.Expr.radians"]], "rank() (polars.expr method)": [[601, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[602, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[603, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[604, "polars.Expr.repeat_by"]], "replace() (polars.expr method)": [[605, "polars.Expr.replace"]], "reshape() (polars.expr method)": [[606, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[607, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[608, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[609, "polars.Expr.rle_id"]], "rolling() (polars.expr method)": [[610, "polars.Expr.rolling"]], "rolling_apply() (polars.expr method)": [[611, "polars.Expr.rolling_apply"]], "rolling_map() (polars.expr method)": [[612, "polars.Expr.rolling_map"]], "rolling_max() (polars.expr method)": [[613, "polars.Expr.rolling_max"]], "rolling_max_by() (polars.expr method)": [[614, "polars.Expr.rolling_max_by"]], "rolling_mean() (polars.expr method)": [[615, "polars.Expr.rolling_mean"]], "rolling_mean_by() (polars.expr method)": [[616, "polars.Expr.rolling_mean_by"]], "rolling_median() (polars.expr method)": [[617, "polars.Expr.rolling_median"]], "rolling_median_by() (polars.expr method)": [[618, "polars.Expr.rolling_median_by"]], "rolling_min() (polars.expr method)": [[619, "polars.Expr.rolling_min"]], "rolling_min_by() (polars.expr method)": [[620, "polars.Expr.rolling_min_by"]], "rolling_quantile() (polars.expr method)": [[621, "polars.Expr.rolling_quantile"]], "rolling_quantile_by() (polars.expr method)": [[622, "polars.Expr.rolling_quantile_by"]], "rolling_skew() (polars.expr method)": [[623, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[624, "polars.Expr.rolling_std"]], "rolling_std_by() (polars.expr method)": [[625, "polars.Expr.rolling_std_by"]], "rolling_sum() (polars.expr method)": [[626, "polars.Expr.rolling_sum"]], "rolling_sum_by() (polars.expr method)": [[627, "polars.Expr.rolling_sum_by"]], "rolling_var() (polars.expr method)": [[628, "polars.Expr.rolling_var"]], "rolling_var_by() (polars.expr method)": [[629, "polars.Expr.rolling_var_by"]], "round() (polars.expr method)": [[630, "polars.Expr.round"]], "round_sig_figs() (polars.expr method)": [[631, "polars.Expr.round_sig_figs"]], "sample() (polars.expr method)": [[632, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[633, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[634, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[635, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[636, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[637, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[638, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[639, "polars.Expr.sign"]], "sin() (polars.expr method)": [[640, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[641, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[642, "polars.Expr.skew"]], "slice() (polars.expr method)": [[643, "polars.Expr.slice"]], "sort() (polars.expr method)": [[644, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[645, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[646, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[647, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[648, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[649, "polars.Expr.str.contains"]], "contains_any() (polars.expr.str method)": [[650, "polars.Expr.str.contains_any"]], "count_match() (polars.expr.str method)": [[651, "polars.Expr.str.count_match"]], "count_matches() (polars.expr.str method)": [[652, "polars.Expr.str.count_matches"]], "decode() (polars.expr.str method)": [[653, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[654, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[655, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[656, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[657, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[658, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[659, "polars.Expr.str.extract_groups"]], "find() (polars.expr.str method)": [[660, "polars.Expr.str.find"]], "head() (polars.expr.str method)": [[661, "polars.Expr.str.head"]], "json_decode() (polars.expr.str method)": [[662, "polars.Expr.str.json_decode"]], "json_extract() (polars.expr.str method)": [[663, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[664, "polars.Expr.str.json_path_match"]], "len_bytes() (polars.expr.str method)": [[665, "polars.Expr.str.len_bytes"]], "len_chars() (polars.expr.str method)": [[666, "polars.Expr.str.len_chars"]], "lengths() (polars.expr.str method)": [[667, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[668, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[669, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[670, "polars.Expr.str.n_chars"]], "pad_end() (polars.expr.str method)": [[671, "polars.Expr.str.pad_end"]], "pad_start() (polars.expr.str method)": [[672, "polars.Expr.str.pad_start"]], "parse_int() (polars.expr.str method)": [[673, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[674, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[675, "polars.Expr.str.replace_all"]], "replace_many() (polars.expr.str method)": [[676, "polars.Expr.str.replace_many"]], "reverse() (polars.expr.str method)": [[677, "polars.Expr.str.reverse"]], "rjust() (polars.expr.str method)": [[678, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[679, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[680, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[681, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[682, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[683, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[684, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[685, "polars.Expr.str.strip"]], "strip_chars() (polars.expr.str method)": [[686, "polars.Expr.str.strip_chars"]], "strip_chars_end() (polars.expr.str method)": [[687, "polars.Expr.str.strip_chars_end"]], "strip_chars_start() (polars.expr.str method)": [[688, "polars.Expr.str.strip_chars_start"]], "strip_prefix() (polars.expr.str method)": [[689, "polars.Expr.str.strip_prefix"]], "strip_suffix() (polars.expr.str method)": [[690, "polars.Expr.str.strip_suffix"]], "strptime() (polars.expr.str method)": [[691, "polars.Expr.str.strptime"]], "tail() (polars.expr.str method)": [[692, "polars.Expr.str.tail"]], "to_date() (polars.expr.str method)": [[693, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[694, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[695, "polars.Expr.str.to_decimal"]], "to_integer() (polars.expr.str method)": [[696, "polars.Expr.str.to_integer"]], "to_lowercase() (polars.expr.str method)": [[697, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[698, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[699, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[700, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[701, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[702, "polars.Expr.struct.field"]], "json_encode() (polars.expr.struct method)": [[703, "polars.Expr.struct.json_encode"]], "rename_fields() (polars.expr.struct method)": [[704, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[705, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[706, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[707, "polars.Expr.sum"]], "tail() (polars.expr method)": [[708, "polars.Expr.tail"]], "take() (polars.expr method)": [[709, "polars.Expr.take"]], "take_every() (polars.expr method)": [[710, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[711, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[712, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[713, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[714, "polars.Expr.top_k"]], "top_k_by() (polars.expr method)": [[715, "polars.Expr.top_k_by"]], "truediv() (polars.expr method)": [[716, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[717, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[718, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[719, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[720, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[721, "polars.Expr.var"]], "where() (polars.expr method)": [[722, "polars.Expr.where"]], "xor() (polars.expr method)": [[723, "polars.Expr.xor"]], "all() (in module polars)": [[724, "polars.all"]], "all_horizontal() (in module polars)": [[725, "polars.all_horizontal"]], "any() (in module polars)": [[726, "polars.any"]], "any_horizontal() (in module polars)": [[727, "polars.any_horizontal"]], "apply() (in module polars)": [[728, "polars.apply"]], "approx_n_unique() (in module polars)": [[729, "polars.approx_n_unique"]], "arange() (in module polars)": [[730, "polars.arange"]], "arctan2() (in module polars)": [[731, "polars.arctan2"]], "arctan2d() (in module polars)": [[732, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[733, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[734, "polars.arg_where"]], "business_day_count() (in module polars)": [[735, "polars.business_day_count"]], "coalesce() (in module polars)": [[736, "polars.coalesce"]], "concat_list() (in module polars)": [[737, "polars.concat_list"]], "concat_str() (in module polars)": [[738, "polars.concat_str"]], "corr() (in module polars)": [[739, "polars.corr"]], "count() (in module polars)": [[740, "polars.count"]], "cov() (in module polars)": [[741, "polars.cov"]], "cum_count() (in module polars)": [[742, "polars.cum_count"]], "cum_fold() (in module polars)": [[743, "polars.cum_fold"]], "cum_reduce() (in module polars)": [[744, "polars.cum_reduce"]], "cum_sum() (in module polars)": [[745, "polars.cum_sum"]], "cum_sum_horizontal() (in module polars)": [[746, "polars.cum_sum_horizontal"]], "cumfold() (in module polars)": [[747, "polars.cumfold"]], "cumreduce() (in module polars)": [[748, "polars.cumreduce"]], "cumsum() (in module polars)": [[749, "polars.cumsum"]], "cumsum_horizontal() (in module polars)": [[750, "polars.cumsum_horizontal"]], "date() (in module polars)": [[751, "polars.date"]], "date_range() (in module polars)": [[752, "polars.date_range"]], "date_ranges() (in module polars)": [[753, "polars.date_ranges"]], "datetime() (in module polars)": [[754, "polars.datetime"]], "datetime_range() (in module polars)": [[755, "polars.datetime_range"]], "datetime_ranges() (in module polars)": [[756, "polars.datetime_ranges"]], "duration() (in module polars)": [[757, "polars.duration"]], "element() (in module polars)": [[758, "polars.element"]], "exclude() (in module polars)": [[759, "polars.exclude"]], "first() (in module polars)": [[760, "polars.first"]], "fold() (in module polars)": [[761, "polars.fold"]], "format() (in module polars)": [[762, "polars.format"]], "from_epoch() (in module polars)": [[763, "polars.from_epoch"]], "groups() (in module polars)": [[764, "polars.groups"]], "head() (in module polars)": [[765, "polars.head"]], "implode() (in module polars)": [[766, "polars.implode"]], "int_range() (in module polars)": [[767, "polars.int_range"]], "int_ranges() (in module polars)": [[768, "polars.int_ranges"]], "last() (in module polars)": [[769, "polars.last"]], "len() (in module polars)": [[770, "polars.len"]], "lit() (in module polars)": [[771, "polars.lit"]], "map() (in module polars)": [[772, "polars.map"]], "map_batches() (in module polars)": [[773, "polars.map_batches"]], "map_groups() (in module polars)": [[774, "polars.map_groups"]], "max() (in module polars)": [[775, "polars.max"]], "max_horizontal() (in module polars)": [[776, "polars.max_horizontal"]], "mean() (in module polars)": [[777, "polars.mean"]], "mean_horizontal() (in module polars)": [[778, "polars.mean_horizontal"]], "median() (in module polars)": [[779, "polars.median"]], "min() (in module polars)": [[780, "polars.min"]], "min_horizontal() (in module polars)": [[781, "polars.min_horizontal"]], "n_unique() (in module polars)": [[782, "polars.n_unique"]], "nth() (in module polars)": [[783, "polars.nth"]], "ones() (in module polars)": [[784, "polars.ones"]], "quantile() (in module polars)": [[785, "polars.quantile"]], "reduce() (in module polars)": [[786, "polars.reduce"]], "repeat() (in module polars)": [[787, "polars.repeat"]], "rolling_corr() (in module polars)": [[788, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[789, "polars.rolling_cov"]], "select() (in module polars)": [[790, "polars.select"]], "sql_expr() (in module polars)": [[791, "polars.sql_expr"]], "std() (in module polars)": [[792, "polars.std"]], "struct() (in module polars)": [[793, "polars.struct"]], "sum() (in module polars)": [[794, "polars.sum"]], "sum_horizontal() (in module polars)": [[795, "polars.sum_horizontal"]], "tail() (in module polars)": [[796, "polars.tail"]], "time() (in module polars)": [[797, "polars.time"]], "time_range() (in module polars)": [[798, "polars.time_range"]], "time_ranges() (in module polars)": [[799, "polars.time_ranges"]], "var() (in module polars)": [[800, "polars.var"]], "when() (in module polars)": [[801, "polars.when"]], "zeros() (in module polars)": [[802, "polars.zeros"]], "approx_n_unique() (polars.lazyframe method)": [[826, "polars.LazyFrame.approx_n_unique"]], "bottom_k() (polars.lazyframe method)": [[827, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[828, "polars.LazyFrame.cache"]], "cast() (polars.lazyframe method)": [[829, "polars.LazyFrame.cast"]], "clear() (polars.lazyframe method)": [[830, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[831, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[832, "polars.LazyFrame.collect"]], "collect_async() (polars.lazyframe method)": [[833, "polars.LazyFrame.collect_async"]], "columns (polars.lazyframe property)": [[834, "polars.LazyFrame.columns"]], "count() (polars.lazyframe method)": [[835, "polars.LazyFrame.count"]], "describe() (polars.lazyframe method)": [[836, "polars.LazyFrame.describe"]], "deserialize() (polars.lazyframe class method)": [[837, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[838, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[839, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[840, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[841, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[842, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[843, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[844, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[845, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[846, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[847, "polars.LazyFrame.first"]], "gather_every() (polars.lazyframe method)": [[848, "polars.LazyFrame.gather_every"]], "group_by() (polars.lazyframe method)": [[849, "polars.LazyFrame.group_by"]], "group_by_dynamic() (polars.lazyframe method)": [[850, "polars.LazyFrame.group_by_dynamic"]], "group_by_rolling() (polars.lazyframe method)": [[851, "polars.LazyFrame.group_by_rolling"]], "groupby() (polars.lazyframe method)": [[852, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[853, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[854, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[855, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[856, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[857, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[858, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[859, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[860, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[861, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[862, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[863, "polars.LazyFrame.map"]], "map_batches() (polars.lazyframe method)": [[864, "polars.LazyFrame.map_batches"]], "max() (polars.lazyframe method)": [[865, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[866, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[867, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[868, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[869, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[870, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[871, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[872, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[873, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[874, "polars.LazyFrame.quantile"]], "rename() (polars.lazyframe method)": [[875, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[876, "polars.LazyFrame.reverse"]], "rolling() (polars.lazyframe method)": [[877, "polars.LazyFrame.rolling"]], "schema (polars.lazyframe property)": [[878, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[879, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[880, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[881, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[882, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[883, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[884, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[885, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[886, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[887, "polars.LazyFrame.sort"]], "sql() (polars.lazyframe method)": [[888, "polars.LazyFrame.sql"]], "std() (polars.lazyframe method)": [[889, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[890, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[891, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[892, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[893, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[894, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[895, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[896, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[897, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[898, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[899, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[900, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[901, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[902, "polars.LazyFrame.with_row_count"]], "with_row_index() (polars.lazyframe method)": [[903, "polars.LazyFrame.with_row_index"]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[904, "polars.lazyframe.group_by.LazyGroupBy.agg"]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[905, "polars.lazyframe.group_by.LazyGroupBy.all"]], "apply() (polars.lazyframe.group_by.lazygroupby method)": [[906, "polars.lazyframe.group_by.LazyGroupBy.apply"]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[907, "polars.lazyframe.group_by.LazyGroupBy.count"]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[908, "polars.lazyframe.group_by.LazyGroupBy.first"]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[909, "polars.lazyframe.group_by.LazyGroupBy.head"]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[910, "polars.lazyframe.group_by.LazyGroupBy.last"]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[911, "polars.lazyframe.group_by.LazyGroupBy.len"]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[912, "polars.lazyframe.group_by.LazyGroupBy.map_groups"]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[913, "polars.lazyframe.group_by.LazyGroupBy.max"]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[914, "polars.lazyframe.group_by.LazyGroupBy.mean"]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[915, "polars.lazyframe.group_by.LazyGroupBy.median"]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[916, "polars.lazyframe.group_by.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[917, "polars.lazyframe.group_by.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[918, "polars.lazyframe.group_by.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[919, "polars.lazyframe.group_by.LazyGroupBy.sum"]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[920, "polars.lazyframe.group_by.LazyGroupBy.tail"]], "module": [[928, "module-polars.plugins"], [929, "module-polars.selectors"]], "polars.plugins": [[928, "module-polars.plugins"]], "register_plugin_function() (in module polars.plugins)": [[928, "polars.plugins.register_plugin_function"]], "all() (in module polars.selectors)": [[929, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[929, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[929, "polars.selectors.by_name"]], "categorical() (in module polars.selectors)": [[929, "polars.selectors.categorical"]], "contains() (in module polars.selectors)": [[929, "polars.selectors.contains"]], "date() (in module polars.selectors)": [[929, "polars.selectors.date"]], "datetime() (in module polars.selectors)": [[929, "polars.selectors.datetime"]], "duration() (in module polars.selectors)": [[929, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[929, "polars.selectors.ends_with"]], "expand_selector() (in module polars.selectors)": [[929, "polars.selectors.expand_selector"]], "first() (in module polars.selectors)": [[929, "polars.selectors.first"]], "float() (in module polars.selectors)": [[929, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[929, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[929, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[929, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[929, "polars.selectors.matches"]], "numeric() (in module polars.selectors)": [[929, "polars.selectors.numeric"]], "polars.selectors": [[929, "module-polars.selectors"]], "starts_with() (in module polars.selectors)": [[929, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[929, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[929, "polars.selectors.temporal"]], "time() (in module polars.selectors)": [[929, "polars.selectors.time"]], "abs() (polars.series method)": [[931, "polars.Series.abs"]], "alias() (polars.series method)": [[932, "polars.Series.alias"]], "all() (polars.series method)": [[933, "polars.Series.all"]], "any() (polars.series method)": [[934, "polars.Series.any"]], "append() (polars.series method)": [[935, "polars.Series.append"]], "apply() (polars.series method)": [[936, "polars.Series.apply"]], "arccos() (polars.series method)": [[937, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[938, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[939, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[940, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[941, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[942, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[943, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[944, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[945, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[946, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[947, "polars.Series.arg_unique"]], "all() (polars.series.arr method)": [[948, "polars.Series.arr.all"]], "any() (polars.series.arr method)": [[949, "polars.Series.arr.any"]], "arg_max() (polars.series.arr method)": [[950, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[951, "polars.Series.arr.arg_min"]], "contains() (polars.series.arr method)": [[952, "polars.Series.arr.contains"]], "count_matches() (polars.series.arr method)": [[953, "polars.Series.arr.count_matches"]], "explode() (polars.series.arr method)": [[954, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[955, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[956, "polars.Series.arr.get"]], "join() (polars.series.arr method)": [[957, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[958, "polars.Series.arr.last"]], "max() (polars.series.arr method)": [[959, "polars.Series.arr.max"]], "median() (polars.series.arr method)": [[960, "polars.Series.arr.median"]], "min() (polars.series.arr method)": [[961, "polars.Series.arr.min"]], "n_unique() (polars.series.arr method)": [[962, "polars.Series.arr.n_unique"]], "reverse() (polars.series.arr method)": [[963, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[964, "polars.Series.arr.shift"]], "sort() (polars.series.arr method)": [[965, "polars.Series.arr.sort"]], "std() (polars.series.arr method)": [[966, "polars.Series.arr.std"]], "sum() (polars.series.arr method)": [[967, "polars.Series.arr.sum"]], "to_list() (polars.series.arr method)": [[968, "polars.Series.arr.to_list"]], "to_struct() (polars.series.arr method)": [[969, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[970, "polars.Series.arr.unique"]], "var() (polars.series.arr method)": [[971, "polars.Series.arr.var"]], "contains() (polars.series.bin method)": [[972, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[973, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[974, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[975, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[976, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[977, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[978, "polars.Series.cast"]], "get_categories() (polars.series.cat method)": [[979, "polars.Series.cat.get_categories"]], "is_local() (polars.series.cat method)": [[980, "polars.Series.cat.is_local"]], "set_ordering() (polars.series.cat method)": [[981, "polars.Series.cat.set_ordering"]], "to_local() (polars.series.cat method)": [[982, "polars.Series.cat.to_local"]], "uses_lexical_ordering() (polars.series.cat method)": [[983, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[984, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[985, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[986, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[987, "polars.Series.clear"]], "clip() (polars.series method)": [[988, "polars.Series.clip"]], "clip_max() (polars.series method)": [[989, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[990, "polars.Series.clip_min"]], "clone() (polars.series method)": [[991, "polars.Series.clone"]], "cos() (polars.series method)": [[992, "polars.Series.cos"]], "cosh() (polars.series method)": [[993, "polars.Series.cosh"]], "cot() (polars.series method)": [[994, "polars.Series.cot"]], "cum_max() (polars.series method)": [[995, "polars.Series.cum_max"]], "cum_min() (polars.series method)": [[996, "polars.Series.cum_min"]], "cum_prod() (polars.series method)": [[997, "polars.Series.cum_prod"]], "cum_sum() (polars.series method)": [[998, "polars.Series.cum_sum"]], "cummax() (polars.series method)": [[999, "polars.Series.cummax"]], "cummin() (polars.series method)": [[1000, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[1001, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[1002, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[1003, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[1004, "polars.Series.cut"]], "describe() (polars.series method)": [[1005, "polars.Series.describe"]], "diff() (polars.series method)": [[1006, "polars.Series.diff"]], "dot() (polars.series method)": [[1007, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[1008, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[1009, "polars.Series.drop_nulls"]], "add_business_days() (polars.series.dt method)": [[1010, "polars.Series.dt.add_business_days"]], "base_utc_offset() (polars.series.dt method)": [[1011, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[1012, "polars.Series.dt.cast_time_unit"]], "century() (polars.series.dt method)": [[1013, "polars.Series.dt.century"]], "combine() (polars.series.dt method)": [[1014, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[1015, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[1016, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[1017, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[1018, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[1019, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[1020, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[1021, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[1022, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[1023, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[1024, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[1025, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[1026, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[1027, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[1028, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[1029, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[1030, "polars.Series.dt.microseconds"]], "millennium() (polars.series.dt method)": [[1031, "polars.Series.dt.millennium"]], "millisecond() (polars.series.dt method)": [[1032, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[1033, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[1034, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[1035, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[1036, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[1037, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[1038, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[1039, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[1040, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[1041, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[1042, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[1043, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[1044, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[1045, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[1046, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[1047, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[1048, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[1049, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[1050, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[1051, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[1052, "polars.Series.dt.to_string"]], "total_days() (polars.series.dt method)": [[1053, "polars.Series.dt.total_days"]], "total_hours() (polars.series.dt method)": [[1054, "polars.Series.dt.total_hours"]], "total_microseconds() (polars.series.dt method)": [[1055, "polars.Series.dt.total_microseconds"]], "total_milliseconds() (polars.series.dt method)": [[1056, "polars.Series.dt.total_milliseconds"]], "total_minutes() (polars.series.dt method)": [[1057, "polars.Series.dt.total_minutes"]], "total_nanoseconds() (polars.series.dt method)": [[1058, "polars.Series.dt.total_nanoseconds"]], "total_seconds() (polars.series.dt method)": [[1059, "polars.Series.dt.total_seconds"]], "truncate() (polars.series.dt method)": [[1060, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[1061, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[1062, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[1063, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[1064, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[1065, "polars.Series.dtype"]], "entropy() (polars.series method)": [[1066, "polars.Series.entropy"]], "equals() (polars.series method)": [[1067, "polars.Series.equals"]], "estimated_size() (polars.series method)": [[1068, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[1069, "polars.Series.ewm_mean"]], "ewm_mean_by() (polars.series method)": [[1070, "polars.Series.ewm_mean_by"]], "ewm_std() (polars.series method)": [[1071, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[1072, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[1073, "polars.Series.exp"]], "explode() (polars.series method)": [[1074, "polars.Series.explode"]], "extend() (polars.series method)": [[1075, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[1076, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[1077, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[1078, "polars.Series.fill_null"]], "filter() (polars.series method)": [[1079, "polars.Series.filter"]], "flags (polars.series attribute)": [[1080, "polars.Series.flags"]], "floor() (polars.series method)": [[1081, "polars.Series.floor"]], "gather() (polars.series method)": [[1082, "polars.Series.gather"]], "gather_every() (polars.series method)": [[1083, "polars.Series.gather_every"]], "get_chunks() (polars.series method)": [[1084, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[1085, "polars.Series.has_validity"]], "hash() (polars.series method)": [[1086, "polars.Series.hash"]], "head() (polars.series method)": [[1087, "polars.Series.head"]], "hist() (polars.series method)": [[1088, "polars.Series.hist"]], "implode() (polars.series method)": [[1089, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[1090, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[1091, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[1092, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[1093, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[1094, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[1095, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[1096, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[1097, "polars.Series.is_first"]], "is_first_distinct() (polars.series method)": [[1098, "polars.Series.is_first_distinct"]], "is_float() (polars.series method)": [[1099, "polars.Series.is_float"]], "is_in() (polars.series method)": [[1100, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[1101, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[1102, "polars.Series.is_integer"]], "is_last() (polars.series method)": [[1103, "polars.Series.is_last"]], "is_last_distinct() (polars.series method)": [[1104, "polars.Series.is_last_distinct"]], "is_nan() (polars.series method)": [[1105, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[1106, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[1107, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[1108, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[1109, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[1110, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[1111, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[1112, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[1113, "polars.Series.is_utf8"]], "item() (polars.series method)": [[1114, "polars.Series.item"]], "kurtosis() (polars.series method)": [[1115, "polars.Series.kurtosis"]], "len() (polars.series method)": [[1116, "polars.Series.len"]], "limit() (polars.series method)": [[1117, "polars.Series.limit"]], "all() (polars.series.list method)": [[1118, "polars.Series.list.all"]], "any() (polars.series.list method)": [[1119, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[1120, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[1121, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[1122, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[1123, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[1124, "polars.Series.list.count_match"]], "count_matches() (polars.series.list method)": [[1125, "polars.Series.list.count_matches"]], "diff() (polars.series.list method)": [[1126, "polars.Series.list.diff"]], "drop_nulls() (polars.series.list method)": [[1127, "polars.Series.list.drop_nulls"]], "eval() (polars.series.list method)": [[1128, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[1129, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[1130, "polars.Series.list.first"]], "gather() (polars.series.list method)": [[1131, "polars.Series.list.gather"]], "gather_every() (polars.series.list method)": [[1132, "polars.Series.list.gather_every"]], "get() (polars.series.list method)": [[1133, "polars.Series.list.get"]], "head() (polars.series.list method)": [[1134, "polars.Series.list.head"]], "join() (polars.series.list method)": [[1135, "polars.Series.list.join"]], "last() (polars.series.list method)": [[1136, "polars.Series.list.last"]], "len() (polars.series.list method)": [[1137, "polars.Series.list.len"]], "lengths() (polars.series.list method)": [[1138, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[1139, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[1140, "polars.Series.list.mean"]], "median() (polars.series.list method)": [[1141, "polars.Series.list.median"]], "min() (polars.series.list method)": [[1142, "polars.Series.list.min"]], "n_unique() (polars.series.list method)": [[1143, "polars.Series.list.n_unique"]], "reverse() (polars.series.list method)": [[1144, "polars.Series.list.reverse"]], "sample() (polars.series.list method)": [[1145, "polars.Series.list.sample"]], "set_difference() (polars.series.list method)": [[1146, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[1147, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[1148, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[1149, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[1150, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[1151, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[1152, "polars.Series.list.sort"]], "std() (polars.series.list method)": [[1153, "polars.Series.list.std"]], "sum() (polars.series.list method)": [[1154, "polars.Series.list.sum"]], "tail() (polars.series.list method)": [[1155, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[1156, "polars.Series.list.take"]], "to_array() (polars.series.list method)": [[1157, "polars.Series.list.to_array"]], "to_struct() (polars.series.list method)": [[1158, "polars.Series.list.to_struct"]], "unique() (polars.series.list method)": [[1159, "polars.Series.list.unique"]], "var() (polars.series.list method)": [[1160, "polars.Series.list.var"]], "log() (polars.series method)": [[1161, "polars.Series.log"]], "log10() (polars.series method)": [[1162, "polars.Series.log10"]], "log1p() (polars.series method)": [[1163, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[1164, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[1165, "polars.Series.map_dict"]], "map_elements() (polars.series method)": [[1166, "polars.Series.map_elements"]], "max() (polars.series method)": [[1167, "polars.Series.max"]], "mean() (polars.series method)": [[1168, "polars.Series.mean"]], "median() (polars.series method)": [[1169, "polars.Series.median"]], "min() (polars.series method)": [[1170, "polars.Series.min"]], "mode() (polars.series method)": [[1171, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[1172, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[1173, "polars.Series.n_unique"]], "name (polars.series attribute)": [[1174, "polars.Series.name"]], "nan_max() (polars.series method)": [[1175, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[1176, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[1177, "polars.Series.new_from_index"]], "not_() (polars.series method)": [[1178, "polars.Series.not_"]], "null_count() (polars.series method)": [[1179, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[1180, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[1181, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[1182, "polars.Series.peak_min"]], "product() (polars.series method)": [[1183, "polars.Series.product"]], "qcut() (polars.series method)": [[1184, "polars.Series.qcut"]], "quantile() (polars.series method)": [[1185, "polars.Series.quantile"]], "rank() (polars.series method)": [[1186, "polars.Series.rank"]], "rechunk() (polars.series method)": [[1187, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[1188, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[1189, "polars.Series.rename"]], "replace() (polars.series method)": [[1190, "polars.Series.replace"]], "reshape() (polars.series method)": [[1191, "polars.Series.reshape"]], "reverse() (polars.series method)": [[1192, "polars.Series.reverse"]], "rle() (polars.series method)": [[1193, "polars.Series.rle"]], "rle_id() (polars.series method)": [[1194, "polars.Series.rle_id"]], "rolling_apply() (polars.series method)": [[1195, "polars.Series.rolling_apply"]], "rolling_map() (polars.series method)": [[1196, "polars.Series.rolling_map"]], "rolling_max() (polars.series method)": [[1197, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[1198, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[1199, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[1200, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[1201, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[1202, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[1203, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[1204, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[1205, "polars.Series.rolling_var"]], "round() (polars.series method)": [[1206, "polars.Series.round"]], "round_sig_figs() (polars.series method)": [[1207, "polars.Series.round_sig_figs"]], "sample() (polars.series method)": [[1208, "polars.Series.sample"]], "scatter() (polars.series method)": [[1209, "polars.Series.scatter"]], "search_sorted() (polars.series method)": [[1210, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[1211, "polars.Series.series_equal"]], "set() (polars.series method)": [[1212, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[1213, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[1214, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[1215, "polars.Series.shape"]], "shift() (polars.series method)": [[1216, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[1217, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[1218, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[1219, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[1220, "polars.Series.shuffle"]], "sign() (polars.series method)": [[1221, "polars.Series.sign"]], "sin() (polars.series method)": [[1222, "polars.Series.sin"]], "sinh() (polars.series method)": [[1223, "polars.Series.sinh"]], "skew() (polars.series method)": [[1224, "polars.Series.skew"]], "slice() (polars.series method)": [[1225, "polars.Series.slice"]], "sort() (polars.series method)": [[1226, "polars.Series.sort"]], "sqrt() (polars.series method)": [[1227, "polars.Series.sqrt"]], "std() (polars.series method)": [[1228, "polars.Series.std"]], "concat() (polars.series.str method)": [[1229, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[1230, "polars.Series.str.contains"]], "contains_any() (polars.series.str method)": [[1231, "polars.Series.str.contains_any"]], "count_match() (polars.series.str method)": [[1232, "polars.Series.str.count_match"]], "count_matches() (polars.series.str method)": [[1233, "polars.Series.str.count_matches"]], "decode() (polars.series.str method)": [[1234, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[1235, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[1236, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[1237, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[1238, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[1239, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[1240, "polars.Series.str.extract_groups"]], "find() (polars.series.str method)": [[1241, "polars.Series.str.find"]], "head() (polars.series.str method)": [[1242, "polars.Series.str.head"]], "json_decode() (polars.series.str method)": [[1243, "polars.Series.str.json_decode"]], "json_extract() (polars.series.str method)": [[1244, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[1245, "polars.Series.str.json_path_match"]], "len_bytes() (polars.series.str method)": [[1246, "polars.Series.str.len_bytes"]], "len_chars() (polars.series.str method)": [[1247, "polars.Series.str.len_chars"]], "lengths() (polars.series.str method)": [[1248, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[1249, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[1250, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[1251, "polars.Series.str.n_chars"]], "pad_end() (polars.series.str method)": [[1252, "polars.Series.str.pad_end"]], "pad_start() (polars.series.str method)": [[1253, "polars.Series.str.pad_start"]], "parse_int() (polars.series.str method)": [[1254, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[1255, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1256, "polars.Series.str.replace_all"]], "replace_many() (polars.series.str method)": [[1257, "polars.Series.str.replace_many"]], "reverse() (polars.series.str method)": [[1258, "polars.Series.str.reverse"]], "rjust() (polars.series.str method)": [[1259, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[1260, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[1261, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1262, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1263, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1264, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1265, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[1266, "polars.Series.str.strip"]], "strip_chars() (polars.series.str method)": [[1267, "polars.Series.str.strip_chars"]], "strip_chars_end() (polars.series.str method)": [[1268, "polars.Series.str.strip_chars_end"]], "strip_chars_start() (polars.series.str method)": [[1269, "polars.Series.str.strip_chars_start"]], "strip_prefix() (polars.series.str method)": [[1270, "polars.Series.str.strip_prefix"]], "strip_suffix() (polars.series.str method)": [[1271, "polars.Series.str.strip_suffix"]], "strptime() (polars.series.str method)": [[1272, "polars.Series.str.strptime"]], "tail() (polars.series.str method)": [[1273, "polars.Series.str.tail"]], "to_date() (polars.series.str method)": [[1274, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1275, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1276, "polars.Series.str.to_decimal"]], "to_integer() (polars.series.str method)": [[1277, "polars.Series.str.to_integer"]], "to_lowercase() (polars.series.str method)": [[1278, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1279, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1280, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1281, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1282, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1283, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1284, "polars.Series.struct.fields"]], "json_encode() (polars.series.struct method)": [[1285, "polars.Series.struct.json_encode"]], "rename_fields() (polars.series.struct method)": [[1286, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1287, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1288, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1289, "polars.Series.sum"]], "tail() (polars.series method)": [[1290, "polars.Series.tail"]], "take() (polars.series method)": [[1291, "polars.Series.take"]], "take_every() (polars.series method)": [[1292, "polars.Series.take_every"]], "tan() (polars.series method)": [[1293, "polars.Series.tan"]], "tanh() (polars.series method)": [[1294, "polars.Series.tanh"]], "to_arrow() (polars.series method)": [[1295, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1296, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1297, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1298, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[1299, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1300, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1301, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1302, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[1303, "polars.Series.top_k"]], "unique() (polars.series method)": [[1304, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1305, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1306, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1307, "polars.Series.value_counts"]], "var() (polars.series method)": [[1308, "polars.Series.var"]], "view() (polars.series method)": [[1309, "polars.Series.view"]], "zip_with() (polars.series method)": [[1310, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1327, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1327, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1327, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1327, "polars.SQLContext.__init__"]]}})